cmake_minimum_required(VERSION 3.18)

project(TasteQtPyWidget VERSION 0.0.1 DESCRIPTION "C++/Qt Widgets for ESA Python projects" LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Setup Qt
find_package(Qt6 REQUIRED COMPONENTS Core Widgets Network Gui)
set(CMAKE_INCLUDE_CURRENT_DIR ON) # Generated files should be in the include path. Good for moc with Qt
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)



add_subdirectory(${CMAKE_SOURCE_DIR}/../traceability ${CMAKE_BINARY_DIR}/traceability)

set(original_library "libQtTASTE")

add_library(${original_library} SHARED )

target_link_libraries(${original_library} PUBLIC
    requirements
)

set_target_properties(${original_library} PROPERTIES VERSION 0.0.1)

### Do not prepend a "lib" for the library filename
set_property(TARGET ${original_library} PROPERTY PREFIX "")

macro(pyside_config option output_var)
    if(${ARGC} GREATER 2)
        set(is_list ${ARGV2})
    else()
        set(is_list "")
    endif()

    execute_process(
      COMMAND python3 ${CMAKE_SOURCE_DIR}/scripts/pyside_config.py
              ${option}
      OUTPUT_VARIABLE ${output_var}
      OUTPUT_STRIP_TRAILING_WHITESPACE)

    if ("${${output_var}}" STREQUAL "")
        message(FATAL_ERROR "Error: Calling pyside_config.py ${option} returned no output.")
    endif()
    if(is_list)
        string (REPLACE " " ";" ${output_var} "${${output_var}}")
    endif()
endmacro()

# Query for the shiboken generator path, Python path, include paths and linker flags.
pyside_config(--shiboken-module-path shiboken_module_path)
pyside_config(--shiboken-generator-path shiboken_generator_path)
pyside_config(--python-include-path python_include_dir)
pyside_config(--shiboken-generator-include-path shiboken_include_dir 1)
pyside_config(--shiboken-module-shared-libraries-cmake shiboken_shared_libraries 0)
pyside_config(--python-link-flags-cmake python_linking_data 0)
pyside_config(--pyside-path pyside_path)
pyside_config(--pyside-include-path pyside_include_dir 1)
pyside_config(--pyside-shared-libraries-cmake pyside_shared_libraries 0)

### Before we can run the shiboken generator, we define a couple of variables.
set(shiboken_path "${shiboken_generator_path}/shiboken6")
if(NOT EXISTS ${shiboken_path})
    message(FATAL_ERROR "Shiboken executable not found at path: ${shiboken_path}")
endif()

# The name of the generated bindings module (as imported in Python).
set(bindings_library "TasteQtWidgets")


# Typesystem xml file which defines the relationships between the C++ types / functions and the corresponding Python equivalents.
set(typesystem_file ${CMAKE_SOURCE_DIR}/bindings.xml)

# The header file with all the types and functions for which bindings will be generated.
# Usually it simply includes other headers of the library you are creating bindings for.
set(wrapped_header ${CMAKE_SOURCE_DIR}/bindings.h)

# Specify which C++ files will be generated by shiboken. This includes the module wrapper
# and a '.cpp' file per C++ type. These are needed for generating the module shared library.
set(generated_sources
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/tasteqtwidgets_module_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/requirement_requirementswidget_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/requirement_requirementsmanager_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/requirement_requirementsmodelbase_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/requirement_wrapper.cpp
)

### Gather include diretories needed for Qt
set(QT_INCLUDES "")
foreach(QT_MODULE Qt6::Core Qt6::Widgets Qt6::Network Qt6::Gui requirements)
    get_property(QT_WIDGETS_INCLUDE_DIRS TARGET ${QT_MODULE} PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
    foreach(INCLUDE_DIR ${QT_WIDGETS_INCLUDE_DIRS})
        list(APPEND QT_INCLUDES "-I${INCLUDE_DIR}")
        message(${INCLUDE_DIR})
    endforeach()
endforeach()


### Now we are ready to tell cmake how to produce breadcrumbs_wrapper.cpp and place it in a module
set(shiboken_options --generator-set=shiboken --enable-parent-ctor-heuristic
    --enable-return-value-heuristic --use-isnull-as-nb_nonzero
    --avoid-protected-hack --enable-pyside-extensions
    -I${CMAKE_SOURCE_DIR}/include
#    -I${CMAKE_SOURCE_DIR}/traceability/requirements
#    -I${CMAKE_SOURCE_DIR}/traceability/requirements/ui
#    -I${CMAKE_SOURCE_DIR}/traceability/qgitlabapi
    ${QT_INCLUDES}
    -T${pyside_path}/typesystems
    --output-directory=${CMAKE_CURRENT_BINARY_DIR}
    )

set(generated_sources_dependencies ${wrapped_header} ${typesystem_file})

# Add custom target to run shiboken to generate the binding cpp files.
add_custom_command(OUTPUT ${generated_sources}
                   COMMAND ${shiboken_path}
                   ${shiboken_options} ${wrapped_header} ${typesystem_file}
                   DEPENDS ${generated_sources_dependencies}
                   IMPLICIT_DEPENDS CXX ${wrapped_header}
                   WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
                   COMMENT "Running generator for ${typesystem_file}.")

# Define and build the bindings library.
add_library(${bindings_library} MODULE ${generated_sources}
    main.py)

# We need to include the headers for the module bindings that we use.
set(pyside_additional_includes "")
foreach(INCLUDE_DIR ${pyside_include_dir})
    list(APPEND pyside_additional_includes "${INCLUDE_DIR}/QtCore")
    list(APPEND pyside_additional_includes "${INCLUDE_DIR}/QtGui")
    list(APPEND pyside_additional_includes "${INCLUDE_DIR}/QtWidgets")
    list(APPEND pyside_additional_includes "${INCLUDE_DIR}/QtNetwork")
endforeach()

# Apply relevant include and link flags.
target_include_directories(${bindings_library} PRIVATE ${pyside_additional_includes})
target_include_directories(${bindings_library} PRIVATE ${pyside_include_dir})
target_include_directories(${bindings_library} PRIVATE ${python_include_dir})
target_include_directories(${bindings_library} PRIVATE ${shiboken_include_dir})
target_include_directories(${bindings_library} PRIVATE ${CMAKE_SOURCE_DIR})
target_include_directories(${bindings_library} PRIVATE ${CMAKE_SOURCE_DIR}/include)

target_link_libraries(${bindings_library} PRIVATE Qt6::Widgets)
target_link_libraries(${bindings_library} PRIVATE ${original_library})
target_link_libraries(${bindings_library} PRIVATE ${pyside_shared_libraries})
target_link_libraries(${bindings_library} PRIVATE ${shiboken_shared_libraries})


### Set correct per- and post-fix for the binding library
set_property(TARGET ${bindings_library} PROPERTY PREFIX "")
set_property(TARGET ${bindings_library} PROPERTY OUTPUT_NAME
             "${bindings_library}${PYTHON_EXTENSION_SUFFIX}")


# Install the library and the bindings module into the source folder near the main.py file, so
# that the Python interpeter successfully imports the used module.
install(TARGETS ${bindings_library} ${original_library}
        LIBRARY DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}
        RUNTIME DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}
        )

