-- This is autogenerated AADL snippet for %{ProjectName} driver project.
-- Please merge contents of this file with ocarina_components.aadl from your Taste instance
-- installation (usually /home/taste/tool-src/misc/aadl-library/ocarina_components.aadl).
--
-- After Taste installation update, the original contents of ocarina_components.aadl will be restored!
-- If you want to keep using your driver, you will have to merge the following code with
-- ocarina_components.aadl again.

-- ############################################################################
-- Paste the following code into "Configuration Type" section.
-- ############################################################################

data configuration_type_%{ProjectName}
properties
  Type_Source_Name => "%{ProjectNameUpperCase}-Conf-T";
  Deployment::ASN1_Module_Name => "%{ProjectNameUpperCase}-DRIVER-CONFIGURATION";
  Source_Language => (ASN1);
  Source_Text => ("%{ProjectDirectory}/%{AsnConfigFile}");
end configuration_type_%{ProjectName};

-- ############################################################################
-- Paste the following code into "Device" section.
-- ############################################################################

  ---------------------------
  -- serial %{ProjectName} --
  ---------------------------
  device serial_%{ProjectName}
  features
    link : requires bus access ocarina_buses::serial.ccsds;
  end serial_%{ProjectName};

  device implementation serial_%{ProjectName}.linux
  properties
    Deployment::Driver_Name       => "linux_serial_%{ProjectName}";
    Device_Driver                 => classifier (ocarina_drivers_serial_%{ProjectName}::serial_%{ProjectName}_linux.linux);
    Initialize_Entrypoint         => classifier (ocarina_drivers_serial_%{ProjectName}::linux_serial_%{ProjectName}_init);
    Provided_Virtual_Bus_Class    => (classifier (ocarina_buses::generic.linux));
  end serial_%{ProjectName}.linux;

  device implementation serial_%{ProjectName}.samv71
  properties
    Deployment::Driver_Name       => "samv71_serial_%{ProjectName}";
    Device_Driver                 => classifier (ocarina_drivers_serial_%{ProjectName}::serial_%{ProjectName}_samv71.samv71);
    Initialize_Entrypoint         => classifier (ocarina_drivers_serial_%{ProjectName}::samv71_serial_%{ProjectName}_init);
    Provided_Virtual_Bus_Class    => (classifier (ocarina_buses::generic.samv71));
  end  serial_%{ProjectName}.samv71;

  ------------------------------------
  -- linux ip socket %{ProjectName} --
  ------------------------------------
  device ip_socket_%{ProjectName}
  features
    link : requires bus access ocarina_buses::ip.generic;
  end ip_socket_%{ProjectName};

  device implementation ip_socket_%{ProjectName}.linux
  properties
    Deployment::Driver_Name       => "linux_ip_socket_%{ProjectName}";
    Device_Driver                 => classifier (ocarina_drivers_ip_socket_%{ProjectName}::ip_socket_%{ProjectName}.linux);
    Initialize_Entrypoint         => classifier (ocarina_drivers_ip_socket_%{ProjectName}::linux_ip_socket_%{ProjectName}_init);
    Provided_Virtual_Bus_Class    => (classifier (ocarina_buses::generic.linux));
  end ip_socket_%{ProjectName}.linux;

-- ############################################################################
-- Paste the following code into "Driver" section.
-- ############################################################################

package ocarina_drivers_%{ProjectName}_ip_socket
public

  with Deployment;
  with ocarina_drivers;

  subprogram linux_ip_socket_%{ProjectName}_poll
  properties
    Source_Language => (Cpp);
    Source_Name => "DriverPoll";
    Source_Text => ("driver_interface.cc",
                    "driver_interface.h");
  end linux_ip_socket_%{ProjectName}_poll;

  subprogram linux_ip_socket_%{ProjectName}_send
  properties
    Source_Language => (Cpp);
    Source_Name => "DriverSend";
    Source_Text => ("driver_interface.cc",
                    "driver_interface.h");
  end linux_ip_socket_%{ProjectName}_send;

  subprogram linux_ip_socket_%{ProjectName}_init
  properties
    Source_Language => (Cpp);
    Source_Name => "DriverInit";
    Source_Text => ("driver_interface.cc",
                    "driver_interface.h");
  end linux_ip_socket_%{ProjectName}_init;

  thread linux_ip_socket_%{ProjectName}_poller
  end linux_ip_socket_%{ProjectName}_poller;

  thread implementation linux_ip_socket_%{ProjectName}_poller.impl
  calls
    mycall : {
    pspg : subprogram linux_ip_socket_%{ProjectName}_poll;
    };
  properties
    Period => 1000ms;
    Dispatch_Protocol => Periodic;
  end linux_ip_socket_%{ProjectName}_poller.impl;

  abstract ip_socket_%{ProjectName}
  properties
    Deployment::Version  => "1.0";
    Deployment::Help     => "Write your ASN.1 configuration here";
    Deployment::Configuration_Type => classifier (ocarina_drivers::configuration_type_%{ProjectName});
  end ip_socket_%{ProjectName};

  abstract implementation ip_socket_%{ProjectName}.linux
  subcomponents
    receiver : thread linux_ip_socket_%{ProjectName}_poller.impl;
    sender : subprogram linux_ip_socket_%{ProjectName}_send;
  end ip_socket_%{ProjectName}.linux;

end ocarina_drivers_%{ProjectName}_ip_socket;

package ocarina_drivers_serial_%{ProjectName}
public

  with Deployment;
  with ocarina_drivers;

  ------------------------
  -- serial %{ProjectName} linux --
  ------------------------

  subprogram linux_serial_%{ProjectName}_poll
  properties
    Source_Language => (Cpp);
    Source_Name => "DriverPoll";
    Source_Text => ("driver_interface.cc",
                    "driver_interface.h");
  end linux_serial_%{ProjectName}_poll;

  subprogram linux_serial_%{ProjectName}_send
  properties
    Source_Language => (Cpp);
    Source_Name => "DriverSend";
    Source_Text => ("driver_interface.cc",
                    "driver_interface.h");
  end linux_serial_%{ProjectName}_send;

  subprogram linux_serial_%{ProjectName}_init
  properties
    Source_Language => (Cpp);
    Source_Name => "DriverInit";
    Source_Text => ("driver_interface.cc",
                    "driver_interface.h");
  end linux_serial_%{ProjectName}_init;

  thread linux_serial_%{ProjectName}_poller
  end linux_serial_%{ProjectName}_poller;

  thread implementation linux_serial_%{ProjectName}_poller.impl
  calls
    mycall : {
    pspg : subprogram linux_serial_%{ProjectName}_poll;
    };
  properties
    Period => 1000ms;
    Dispatch_Protocol => Periodic;
  end linux_serial_%{ProjectName}_poller.impl;

  abstract serial_%{ProjectName}_linux
  properties
    Deployment::Version  => "1.0";
    Deployment::Help     => "Write your ASN.1 configuration here";
    Deployment::Configuration_Type => classifier (ocarina_drivers::configuration_type_%{ProjectName});
  end serial_%{ProjectName}_linux;

  abstract implementation serial_%{ProjectName}_linux.linux
  subcomponents
    receiver : thread linux_serial_%{ProjectName}_poller.impl;
    sender : subprogram linux_serial_%{ProjectName}_send;
  end serial_%{ProjectName}_linux.linux;

  -------------------------
  -- serial %{ProjectName} samv71 --
  -------------------------

  subprogram samv71_serial_%{ProjectName}_poll
  properties
    Source_Language => (Cpp);
    Source_Name => "DriverPoll";
    Source_Text => ("driver_interface.cc",
                    "driver_interface.h");
  end samv71_serial_%{ProjectName}_poll;

  subprogram samv71_serial_%{ProjectName}_send
  properties
    Source_Language => (Cpp);
    Source_Name => "DriverSend";
    Source_Text => ("driver_interface.cc",
                    "driver_interface.h");
  end samv71_serial_%{ProjectName}_send;

  subprogram samv71_serial_%{ProjectName}_init
  properties
    Source_Language => (Cpp);
    Source_Name => "DriverInit";
    Source_Text => ("driver_interface.cc",
                    "driver_interface.h");
  end samv71_serial_%{ProjectName}_init;

  thread samv71_serial_%{ProjectName}_poller
  end samv71_serial_%{ProjectName}_poller;

  thread implementation samv71_serial_%{ProjectName}_poller.impl
  calls
    mycall : {
    pspg : subprogram samv71_serial_%{ProjectName}_poll;
    };
  properties
    Period => 1000ms;
    Dispatch_Protocol => Periodic;
  end samv71_serial_%{ProjectName}_poller.impl;

  abstract serial_%{ProjectName}_samv71
  properties
    Deployment::Version  => "1.0";
    Deployment::Help     => "Write your ASN.1 configuration here";
    Deployment::Configuration_Type => classifier (ocarina_drivers::configuration_type_%{ProjectName});
  end serial_%{ProjectName}_samv71;

  abstract implementation serial_%{ProjectName}_samv71.samv71
  subcomponents
    receiver : thread samv71_serial_%{ProjectName}_poller.impl;
    sender : subprogram samv71_serial_%{ProjectName}_send;
  end serial_%{ProjectName}_samv71.samv71;

end ocarina_drivers_serial_%{ProjectName};
