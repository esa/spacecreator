/* File generated by kazoo for TASTE - do not edit */
#include <cstdint>


#include <Lock.h>
#include <Queue.h>
#include <Request.h>
#include <Thread.h>
#include <Timer.h>
#include <StartBarrier.h>

#include <system_spec.h>

#include "demo_interface.h"
#include "transport.h"

extern "C"
{
#include "routing.h"
#include <Broker.h>
#include <DriverHelper.h>
}



#include "thread_actuator_controlsignal.h"
#include "thread_egse_poll.h"
#include "thread_egse_tm.h"
#include "thread_sensor_trigger.h"
#include "thread_systemcontrol_reading.h"
#include "thread_systemcontrol_reporting.h"
#include "thread_systemcontrol_tc.h"

extern "C"
{
extern void init_egse(void);
}
extern "C"
{
extern void init_systemcontrol(void);
}
extern "C"
{
extern void init_sensor(void);
}
extern "C"
{
extern void init_actuator(void);
}


driver_send_function bus_to_driver_send_function[SYSTEM_BUSES_NUMBER];
void* bus_to_driver_private_data[SYSTEM_BUSES_NUMBER];
enum PacketizerCfg bus_to_packetizer_cfg[SYSTEM_BUSES_NUMBER];
deliver_function interface_to_deliver_function[INTERFACE_MAX_ID];

static void initializeDevices()
{
    for(int i = 0; i < SYSTEM_BUSES_NUMBER; ++i)
    {
        bus_to_driver_send_function[i] = nullptr;
        bus_to_driver_private_data[i] = nullptr;
        bus_to_packetizer_cfg[i] = PACKETIZER_DEFAULT;
    }

    // register send functions
    // initialize devices
}

taste::Lock egse_Mutex;
taste::Lock systemcontrol_Mutex;
taste::Lock sensor_Mutex;
taste::Lock actuator_Mutex;



taste::Queue<ACTUATOR_CONTROLSIGNAL_REQUEST_SIZE> actuator_controlsignal_Global_Queue( 1, "actuator_controlsignal");
taste::Thread actuator_controlsignal_Global_Thread( 1, 8388608);

static void Initialize_Thread_actuator_controlsignal()
{
	actuator_controlsignal_Global_Thread.start(&actuator_controlsignal_job);
}

static void Join_Thread_actuator_controlsignal()
{
    actuator_controlsignal_Global_Thread.join();
}

taste::Queue<EGSE_POLL_REQUEST_SIZE> egse_Poll_Global_Queue( 1, "egse_Poll");
taste::Thread egse_Poll_Global_Thread( 1, 8388608);

static void Initialize_Thread_egse_poll()
{
	egse_Poll_Global_Thread.start(&egse_poll_job);
}

static void Join_Thread_egse_poll()
{
    egse_Poll_Global_Thread.join();
}

taste::Queue<EGSE_TM_REQUEST_SIZE> egse_tm_Global_Queue( 1, "egse_tm");
taste::Thread egse_tm_Global_Thread( 1, 8388608);

static void Initialize_Thread_egse_tm()
{
	egse_tm_Global_Thread.start(&egse_tm_job);
}

static void Join_Thread_egse_tm()
{
    egse_tm_Global_Thread.join();
}

taste::Queue<SENSOR_TRIGGER_REQUEST_SIZE> sensor_trigger_Global_Queue( 1, "sensor_trigger");
taste::Thread sensor_trigger_Global_Thread( 1, 8388608);

static void Initialize_Thread_sensor_trigger()
{
	sensor_trigger_Global_Thread.start(&sensor_trigger_job);
}

static void Join_Thread_sensor_trigger()
{
    sensor_trigger_Global_Thread.join();
}

taste::Queue<SYSTEMCONTROL_READING_REQUEST_SIZE> systemcontrol_reading_Global_Queue( 1, "systemcontrol_reading");
taste::Thread systemcontrol_reading_Global_Thread( 1, 8388608);

static void Initialize_Thread_systemcontrol_reading()
{
	systemcontrol_reading_Global_Thread.start(&systemcontrol_reading_job);
}

static void Join_Thread_systemcontrol_reading()
{
    systemcontrol_reading_Global_Thread.join();
}

taste::Queue<SYSTEMCONTROL_REPORTING_REQUEST_SIZE> systemcontrol_reporting_Global_Queue( 1, "systemcontrol_reporting");
taste::Thread systemcontrol_reporting_Global_Thread( 1, 8388608);

static void Initialize_Thread_systemcontrol_reporting()
{
	systemcontrol_reporting_Global_Thread.start(&systemcontrol_reporting_job);
}

static void Join_Thread_systemcontrol_reporting()
{
    systemcontrol_reporting_Global_Thread.join();
}

taste::Queue<SYSTEMCONTROL_TC_REQUEST_SIZE> systemcontrol_tc_Global_Queue( 1, "systemcontrol_tc");
taste::Thread systemcontrol_tc_Global_Thread( 1, 8388608);

static void Initialize_Thread_systemcontrol_tc()
{
	systemcontrol_tc_Global_Thread.start(&systemcontrol_tc_job);
}

static void Join_Thread_systemcontrol_tc()
{
    systemcontrol_tc_Global_Thread.join();
}

// the main function
int main(void)
{
    initializeDevices();

    initialize_transport();
    initialize_routing();

    enum SystemBus valid_buses[SYSTEM_BUSES_NUMBER] = { BUS_INVALID_ID };
    Broker_initialize(valid_buses);

    init_egse();
    init_systemcontrol();
    init_sensor();
    init_actuator();

    taste::StartBarrier::initialize(7, &taste::Timer::initialize);

    Initialize_Thread_actuator_controlsignal();
    Initialize_Thread_egse_poll();
    Initialize_Thread_egse_tm();
    Initialize_Thread_sensor_trigger();
    Initialize_Thread_systemcontrol_reading();
    Initialize_Thread_systemcontrol_reporting();
    Initialize_Thread_systemcontrol_tc();

    Join_Thread_actuator_controlsignal();
    Join_Thread_egse_poll();
    Join_Thread_egse_tm();
    Join_Thread_sensor_trigger();
    Join_Thread_systemcontrol_reading();
    Join_Thread_systemcontrol_reporting();
    Join_Thread_systemcontrol_tc();
}
