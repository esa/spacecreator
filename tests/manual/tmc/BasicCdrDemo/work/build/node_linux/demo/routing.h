/* File generated by kazoo for TASTE - do not edit */

#include "dataview-uniq.h"
#include <pthread.h>

// Enable all routes
void initialize_routing(void);



// Routing table of function Actuator

// env is the last entry in the PID Enumeration containing
// list of all function instances in the system
extern bool actuator_feedback_routing_table[PID_env];

// Set route to the given destination function enabled or disabled
void actuator_feedback_set_route_enabled(asn1SccPID destination, bool is_enabled);
// Set route to the given destination as the only enabled one
void actuator_feedback_set_recipient(asn1SccPID destination);
// Set all routes enabled or disabled
void actuator_feedback_set_all_routes_enabled(bool are_enabled);



// Pid of the sender function containing required interface
// invoking this provided interface
extern __thread asn1SccPID actuator_ctrl_sender_pid;

// Get sender pid for this provided interface
asn1SccPID actuator_ctrl_get_sender();




// Routing table of function EGSE

// env is the last entry in the PID Enumeration containing
// list of all function instances in the system
extern bool egse_tc_routing_table[PID_env];

// Set route to the given destination function enabled or disabled
void egse_tc_set_route_enabled(asn1SccPID destination, bool is_enabled);
// Set route to the given destination as the only enabled one
void egse_tc_set_recipient(asn1SccPID destination);
// Set all routes enabled or disabled
void egse_tc_set_all_routes_enabled(bool are_enabled);



// Pid of the sender function containing required interface
// invoking this provided interface
extern __thread asn1SccPID egse_poll_sender_pid;

// Get sender pid for this provided interface
asn1SccPID egse_poll_get_sender();
// Pid of the sender function containing required interface
// invoking this provided interface
extern __thread asn1SccPID egse_tm_sender_pid;

// Get sender pid for this provided interface
asn1SccPID egse_tm_get_sender();




// Routing table of function ModeManager

// env is the last entry in the PID Enumeration containing
// list of all function instances in the system
extern bool modemanager_ctrl_routing_table[PID_env];

// Set route to the given destination function enabled or disabled
void modemanager_ctrl_set_route_enabled(asn1SccPID destination, bool is_enabled);
// Set route to the given destination as the only enabled one
void modemanager_ctrl_set_recipient(asn1SccPID destination);
// Set all routes enabled or disabled
void modemanager_ctrl_set_all_routes_enabled(bool are_enabled);
// env is the last entry in the PID Enumeration containing
// list of all function instances in the system
extern bool modemanager_tm_routing_table[PID_env];

// Set route to the given destination function enabled or disabled
void modemanager_tm_set_route_enabled(asn1SccPID destination, bool is_enabled);
// Set route to the given destination as the only enabled one
void modemanager_tm_set_recipient(asn1SccPID destination);
// Set all routes enabled or disabled
void modemanager_tm_set_all_routes_enabled(bool are_enabled);



// Pid of the sender function containing required interface
// invoking this provided interface
extern __thread asn1SccPID modemanager_feedback_sender_pid;

// Get sender pid for this provided interface
asn1SccPID modemanager_feedback_get_sender();
// Pid of the sender function containing required interface
// invoking this provided interface
extern __thread asn1SccPID modemanager_reading_sender_pid;

// Get sender pid for this provided interface
asn1SccPID modemanager_reading_get_sender();
// Pid of the sender function containing required interface
// invoking this provided interface
extern __thread asn1SccPID modemanager_tc_sender_pid;

// Get sender pid for this provided interface
asn1SccPID modemanager_tc_get_sender();




// Routing table of function Sensor

// env is the last entry in the PID Enumeration containing
// list of all function instances in the system
extern bool sensor_reading_routing_table[PID_env];

// Set route to the given destination function enabled or disabled
void sensor_reading_set_route_enabled(asn1SccPID destination, bool is_enabled);
// Set route to the given destination as the only enabled one
void sensor_reading_set_recipient(asn1SccPID destination);
// Set all routes enabled or disabled
void sensor_reading_set_all_routes_enabled(bool are_enabled);



// Pid of the sender function containing required interface
// invoking this provided interface
extern __thread asn1SccPID sensor_poll_sender_pid;

// Get sender pid for this provided interface
asn1SccPID sensor_poll_get_sender();



