/* File generated by kazoo for TASTE - do not edit */
#include <cstddef>

#include "dataview-uniq.h"

extern "C"
{

// Protected provided interfaces of function Actuator

void call_protected_Actuator_ctrl
      (const char *IN_buf_x, size_t size_IN_buf_x);
// End of the protected provided interfaces of function Actuator

// Required interfaces of function Actuator

// Required interface feedback in function Actuator
// This RI is connected to: ModeManager
void vm_actuator_feedback
        (asn1SccPID dest_pid,
         const char *IN_buf_x, size_t size_IN_buf_x);
// End of the required interfaces of function Actuator

void actuator_check_queue(bool* has_pending_msg);
// Protected provided interfaces of function EGSE

void call_protected_EGSE_Poll(void);
void call_protected_EGSE_tm
      (const char *IN_buf_reprt, size_t size_IN_buf_reprt);
// End of the protected provided interfaces of function EGSE

// Required interfaces of function EGSE

// Required interface tc in function EGSE
// This RI is connected to: ModeManager
void vm_egse_tc
        (asn1SccPID dest_pid,
         const char *IN_buf_cfg, size_t size_IN_buf_cfg);
// End of the required interfaces of function EGSE

void egse_check_queue(bool* has_pending_msg);
// Protected provided interfaces of function ModeManager

void call_protected_ModeManager_feedback
      (const char *IN_buf_x, size_t size_IN_buf_x);
void call_protected_ModeManager_reading
      (const char *IN_buf_x, size_t size_IN_buf_x);
void call_protected_ModeManager_tc
      (const char *IN_buf_cfg, size_t size_IN_buf_cfg);
// End of the protected provided interfaces of function ModeManager

// Required interfaces of function ModeManager

// Required interface ctrl in function ModeManager
// This RI is connected to: Actuator
void vm_modemanager_ctrl
        (asn1SccPID dest_pid,
         const char *IN_buf_x, size_t size_IN_buf_x);
// Required interface tm in function ModeManager
// This RI is connected to: EGSE
void vm_modemanager_tm
        (asn1SccPID dest_pid,
         const char *IN_buf_reprt, size_t size_IN_buf_reprt);
// End of the required interfaces of function ModeManager

void modemanager_check_queue(bool* has_pending_msg);
// Protected provided interfaces of function Sensor

void call_protected_Sensor_Poll(void);
// End of the protected provided interfaces of function Sensor

// Required interfaces of function Sensor

// Required interface reading in function Sensor
// This RI is connected to: ModeManager
void vm_sensor_reading
        (asn1SccPID dest_pid,
         const char *IN_buf_x, size_t size_IN_buf_x);
// End of the required interfaces of function Sensor

void sensor_check_queue(bool* has_pending_msg);

void call_actuator_ctrl (const char* buf, size_t len);

// This is the list of remote threads/RIs :
// modemanager_feedback.feedback

void call_egse_poll (const char* buf, size_t len);

// This is the list of remote threads/RIs :
// modemanager_tc.tc

void call_egse_tm (const char* buf, size_t len);

// This is the list of remote threads/RIs :
// modemanager_tc.tc

void call_modemanager_feedback (const char* buf, size_t len);

// This is the list of remote threads/RIs :
// actuator_ctrl.ctrl
// egse_tm.tm

void call_modemanager_reading (const char* buf, size_t len);

// This is the list of remote threads/RIs :
// actuator_ctrl.ctrl
// egse_tm.tm

void call_modemanager_tc (const char* buf, size_t len);

// This is the list of remote threads/RIs :
// actuator_ctrl.ctrl
// egse_tm.tm

void call_sensor_poll (const char* buf, size_t len);

// This is the list of remote threads/RIs :
// modemanager_reading.reading

}
