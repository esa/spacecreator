/* File generated by kazoo for TASTE - do not edit */
#include <cstdint>


#include <Lock.h>
#include <Queue.h>
#include <Request.h>
#include <Thread.h>
#include <Timer.h>
#include <StartBarrier.h>

#include <system_spec.h>

#include "demo_interface.h"
#include "transport.h"

extern "C"
{
#include "routing.h"
#include <Broker.h>
#include <DriverHelper.h>
}



#include "thread_actuator_ctrl.h"
#include "thread_egse_poll.h"
#include "thread_egse_tm.h"
#include "thread_modemanager_feedback.h"
#include "thread_modemanager_reading.h"
#include "thread_modemanager_tc.h"
#include "thread_sensor_poll.h"

extern "C"
{
extern void init_actuator(void);
}
extern "C"
{
extern void init_sensor(void);
}
extern "C"
{
extern void init_modemanager(void);
}
extern "C"
{
extern void init_egse(void);
}


driver_send_function bus_to_driver_send_function[SYSTEM_BUSES_NUMBER];
void* bus_to_driver_private_data[SYSTEM_BUSES_NUMBER];
enum PacketizerCfg bus_to_packetizer_cfg[SYSTEM_BUSES_NUMBER];
deliver_function interface_to_deliver_function[INTERFACE_MAX_ID];

static void initializeDevices()
{
    for(int i = 0; i < SYSTEM_BUSES_NUMBER; ++i)
    {
        bus_to_driver_send_function[i] = nullptr;
        bus_to_driver_private_data[i] = nullptr;
        bus_to_packetizer_cfg[i] = PACKETIZER_DEFAULT;
    }

    // register send functions
    // initialize devices
}

taste::Lock actuator_Mutex;
taste::Lock sensor_Mutex;
taste::Lock modemanager_Mutex;
taste::Lock egse_Mutex;



taste::Queue<ACTUATOR_CTRL_REQUEST_SIZE> actuator_ctrl_Global_Queue( 1, "actuator_ctrl");
taste::Thread actuator_ctrl_Global_Thread( 2, 8388608);

static void Initialize_Thread_actuator_ctrl()
{
	actuator_ctrl_Global_Thread.start(&actuator_ctrl_job);
}

static void Join_Thread_actuator_ctrl()
{
    actuator_ctrl_Global_Thread.join();
}

taste::Queue<EGSE_POLL_REQUEST_SIZE> egse_Poll_Global_Queue( 1, "egse_Poll");
taste::Thread egse_Poll_Global_Thread( 1, 8388608);

static void Initialize_Thread_egse_poll()
{
	egse_Poll_Global_Thread.start(&egse_poll_job);
}

static void Join_Thread_egse_poll()
{
    egse_Poll_Global_Thread.join();
}

taste::Queue<EGSE_TM_REQUEST_SIZE> egse_tm_Global_Queue( 1, "egse_tm");
taste::Thread egse_tm_Global_Thread( 4, 8388608);

static void Initialize_Thread_egse_tm()
{
	egse_tm_Global_Thread.start(&egse_tm_job);
}

static void Join_Thread_egse_tm()
{
    egse_tm_Global_Thread.join();
}

taste::Queue<MODEMANAGER_FEEDBACK_REQUEST_SIZE> modemanager_feedback_Global_Queue( 1, "modemanager_feedback");
taste::Thread modemanager_feedback_Global_Thread( 3, 8388608);

static void Initialize_Thread_modemanager_feedback()
{
	modemanager_feedback_Global_Thread.start(&modemanager_feedback_job);
}

static void Join_Thread_modemanager_feedback()
{
    modemanager_feedback_Global_Thread.join();
}

taste::Queue<MODEMANAGER_READING_REQUEST_SIZE> modemanager_reading_Global_Queue( 1, "modemanager_reading");
taste::Thread modemanager_reading_Global_Thread( 1, 8388608);

static void Initialize_Thread_modemanager_reading()
{
	modemanager_reading_Global_Thread.start(&modemanager_reading_job);
}

static void Join_Thread_modemanager_reading()
{
    modemanager_reading_Global_Thread.join();
}

taste::Queue<MODEMANAGER_TC_REQUEST_SIZE> modemanager_tc_Global_Queue( 1, "modemanager_tc");
taste::Thread modemanager_tc_Global_Thread( 1, 8388608);

static void Initialize_Thread_modemanager_tc()
{
	modemanager_tc_Global_Thread.start(&modemanager_tc_job);
}

static void Join_Thread_modemanager_tc()
{
    modemanager_tc_Global_Thread.join();
}

taste::Queue<SENSOR_POLL_REQUEST_SIZE> sensor_Poll_Global_Queue( 1, "sensor_Poll");
taste::Thread sensor_Poll_Global_Thread( 1, 8388608);

static void Initialize_Thread_sensor_poll()
{
	sensor_Poll_Global_Thread.start(&sensor_poll_job);
}

static void Join_Thread_sensor_poll()
{
    sensor_Poll_Global_Thread.join();
}

// the main function
int main(void)
{
    initializeDevices();

    initialize_transport();
    initialize_routing();

    enum SystemBus valid_buses[SYSTEM_BUSES_NUMBER] = { BUS_INVALID_ID };
    Broker_initialize(valid_buses);

    init_actuator();
    init_sensor();
    init_modemanager();
    init_egse();

    taste::StartBarrier::initialize(7, &taste::Timer::initialize);

    Initialize_Thread_actuator_ctrl();
    Initialize_Thread_egse_poll();
    Initialize_Thread_egse_tm();
    Initialize_Thread_modemanager_feedback();
    Initialize_Thread_modemanager_reading();
    Initialize_Thread_modemanager_tc();
    Initialize_Thread_sensor_poll();

    Join_Thread_actuator_ctrl();
    Join_Thread_egse_poll();
    Join_Thread_egse_tm();
    Join_Thread_modemanager_feedback();
    Join_Thread_modemanager_reading();
    Join_Thread_modemanager_tc();
    Join_Thread_sensor_poll();
}
