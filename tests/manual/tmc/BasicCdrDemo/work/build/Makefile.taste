TOOL_INST       := $(shell taste-config --prefix)

all: node_linux_x86_linux
	# Check stack usage for all tasks of all nodes
	python3 ./checkAllStacks.py

# Generate a dynamic library excluding the runtime for each node
simu: node_linux_simu

IF_PROPERTIES := $(basename $(notdir $(wildcard modelchecking/properties/*.if)))
ifeq ($(IF_PROPERTIES),)
IF_MODEL := model_default
else
IF_MODEL := $(addprefix model_, $(IF_PROPERTIES))
endif

model-check: $(IF_PROPERTIES) $(IF_MODEL)

run_if:  $(IF_MODEL)
	cd modelchecking && ./$^.x -po -ln -$(ALGORITHM) $(SUCCESS_SCN) $(ERROR_SCN) $(MAX_ENV_CALLS) $(TIME_LIMIT) $(MAX_STATES) $(MAX_SCN); \
	if [ $$? -eq 1 ]; then exit 1; fi

scn2msc:
	mkdir -p modelchecking/output
	rsync -azvh --ignore-missing-args modelchecking/*.scn modelchecking/output
	rm -f modelchecking/*.scn
	cd modelchecking/output &&\
	scn2msc --preffix $(IF_MODEL) *.scn ../../../modelchecking/configurations/.mcconfig.xml

ALGORITHM := $(shell xmllint --xpath "string(xmel/ModelCheckingWindow/IFModelChecker/@explorationalgorithm)" ../modelchecking/configurations/.mcconfig.xml)
ifeq ($(shell xmllint --xpath "string(xmel/ModelCheckingWindow/IFModelChecker/@successscenarios)" ../modelchecking/configurations/.mcconfig.xml),true)
SUCCESS_SCN := -ms -cs
endif
ifeq ($(shell xmllint --xpath "string(xmel/ModelCheckingWindow/IFModelChecker/@errorscenarios)" ../modelchecking/configurations/.mcconfig.xml),true)
ERROR_SCN := -me -ce
endif

ifneq ($(shell xmllint --xpath "string(xmel/ModelCheckingWindow/IFModelChecker/@maxscenarios)" ../modelchecking/configurations/.mcconfig.xml),)
MAX_SCN := -ld $(shell xmllint --xpath "string(xmel/ModelCheckingWindow/IFModelChecker/@maxscenarios)" ../modelchecking/configurations/.mcconfig.xml)
endif

ifneq ($(shell xmllint --xpath "string(xmel/ModelCheckingWindow/IFModelChecker/@timelimit)" ../modelchecking/configurations/.mcconfig.xml),)
TIME_LIMIT := -lt $(shell xmllint --xpath "string(xmel/ModelCheckingWindow/IFModelChecker/@timelimit)" ../modelchecking/configurations/.mcconfig.xml)
endif

ifneq ($(shell xmllint --xpath "string(xmel/ModelCheckingWindow/IFModelChecker/@maxenvironmentcalls)" ../modelchecking/configurations/.mcconfig.xml),)
MAX_ENV_CALLS := -le $(shell xmllint --xpath "string(xmel/ModelCheckingWindow/IFModelChecker/@maxenvironmentcalls)" ../modelchecking/configurations/.mcconfig.xml)
endif

ifneq ($(shell xmllint --xpath "string(xmel/ModelCheckingWindow/IFModelChecker/@maxstates)" ../modelchecking/configurations/.mcconfig.xml),)
MAX_STATES := -ls $(shell xmllint --xpath "string(xmel/ModelCheckingWindow/IFModelChecker/@maxstates)" ../modelchecking/configurations/.mcconfig.xml)
endif


$(IF_PROPERTIES):
	cd modelchecking && cat if.m4 properties/$@.if > if_$@.m4 &&\
	m4 -I $(TOOL_INST)/share/kazoo/templates/dump/if if_$@.m4 > model_$@.if &&\
	m4 -I $(TOOL_INST)/share/kazoo/templates/dump/if i.m4 > model_$@.i && touch if_done

modelchecking/if_done:
	cd modelchecking &&\
	m4 -I $(TOOL_INST)/share/kazoo/templates/dump/if if.m4 > model_default.if &&\
	m4 -I $(TOOL_INST)/share/kazoo/templates/dump/if i.m4 > model_default.i && touch if_done

$(IF_MODEL): modelchecking/if_done
	cd modelchecking && if2gen $@.if
	cd modelchecking && ./$@.x -po -ln -$(ALGORITHM) $(SUCCESS_SCN) $(ERROR_SCN) $(MAX_ENV_CALLS) $(TIME_LIMIT) $(MAX_STATES) $(MAX_SCN); \
	if [ $$? -eq 1 ]; then exit 1; fi
	mkdir -p modelchecking/output
	rsync -azvh --ignore-missing-args modelchecking/*.scn modelchecking/output
	rm -f modelchecking/*.scn
	cd modelchecking/output &&\
	scn2msc --preffix $@ *.scn ../../../modelchecking/configurations/.mcconfig.xml

run:	run_demo_partition


ocarina:  # call Ocarina for POHI targets
	$(warning PolyORB-HI is not a target of this system)

DriversConfig/drivers_config.h:  # Not a distributed system => nothing to do

check_targets:  # check that runtime of every node is installed
	check_deployment_target_cli.py x86_generic_linux


# Build of node node_linux for PLATFORM_GENERIC_LINUX
# (rule generated by templates/concurrency_view/aadl_4_makefile/node.tmplt)

node_linux_x86_linux: demo_glue DriversConfig/drivers_config.h
	$(MAKE) -j -C node_linux -f Makefile.node_linux

node_linux_simu:	demo_simu DriversConfig/drivers_config.h simulation.asn
	#asn2dataModel -toAda -allboards -o ../dataview/Ada simulation.asn ../dataview/dataview-uniq.asn
	$(MAKE) -j -C node_linux -f Makefile.node_linux simulate


#  Build of partition demo (common to all targets)
# (rule generated by templates/concurrency_view/aadl_4_makefile/partition.tmplt)

DEMO_USER_CFLAGS += -no-pie
export DEMO_USER_CFLAGS
DEMO_USER_LDFLAGS += -no-pie
export DEMO_USER_LDFLAGS

# CPU PLATFORM: PLATFORM_GENERIC_LINUX
demo_glue:	actuator  egse  modemanager  sensor
	args=$$(python3 -c "import os, sys; print(' '.join({os.path.basename(f):f for f in sys.argv[1:]}.values()))" ${wildcard ../actuator/SDL/code/actuator_datamodel.asn} ${wildcard ../actuator/SDL/Context-actuator.asn} ${wildcard ../modemanager/SDL/code/modemanager_datamodel.asn} ${wildcard ../modemanager/SDL/Context-modemanager.asn} ../dataview/dataview-uniq.asn); \
	mkdir -p ../dataview/Ada; asn1scc -Ada -equal --target allboards -typePrefix asn1Scc -o ../dataview/Ada $$args 
	touch $@

# Standalone simulator
demo_simu:	actuator  egse  modemanager  sensor
	mkdir -p ../simulation/observers
	args=$$(python3 -c "import os, sys; print(' '.join({os.path.basename(f):f for f in sys.argv[1:]}.values()))" ${wildcard ../actuator/SDL/code/actuator_datamodel.asn} ${wildcard ../actuator/SDL/Context-actuator.asn} ${wildcard ../modemanager/SDL/code/modemanager_datamodel.asn} ${wildcard ../modemanager/SDL/Context-modemanager.asn} ../dataview/dataview-uniq.asn simulation.asn simulation-timer.asn); \
	mkdir -p ../dataview/Ada && asn1scc -Ada -uPER -equal --target allboards -typePrefix asn1Scc -o ../dataview/Ada $$args && taste-asn1-gser -o ../dataview/Ada/src --raw $$args && sed -e '$$s/$$/\n/' -s $$args > ../simulation/observers/observer.asn 
	touch $@

# Standalone rule to create/update observer.asn, based on the fact that SDL
# functions have their _datamodel.asn file already present in their src folder
# if the files are not present (old models) this will cause trouble, the file
# will be incomplete.
observer.asn:
	mkdir -p ../simulation/observers
	args=$$(python3 -c "import os, sys; print(' '.join({os.path.basename(f):f for f in sys.argv[1:]}.values()))" ${wildcard ../actuator/SDL/src/actuator_datamodel.asn} ${wildcard ../actuator/SDL/Context-actuator.asn} ${wildcard ../modemanager/SDL/src/modemanager_datamodel.asn} ${wildcard ../modemanager/SDL/Context-modemanager.asn} ../dataview/dataview-uniq.asn simulation.asn simulation-timer.asn); \
	sed -e '$$s/$$/\n/' -s $$args > ../simulation/observers/observer.asn 



# Rule to execute the generated binary for this partition (used by space creator Run button)
run_demo_partition: run_EGSE_gui run_Sensor_gui run_demo_binary


run_demo_binary:
	cd ../binaries && ./demo || :

run_EGSE_gui:
	uname -a | grep WSL && sudo sysctl fs.mqueue.msg_max=100 || :
	cd ../binaries && ./EGSE
	# When GUI exits, kill the binary (-INT to allow coverage collection)
	pkill -INT demo
run_Sensor_gui:
	uname -a | grep WSL && sudo sysctl fs.mqueue.msg_max=100 || :
	cd ../binaries && ./Sensor
	# When GUI exits, kill the binary (-INT to allow coverage collection)
	pkill -INT demo


actuator:	../actuator/SDL/code/actuator.adb
	touch $@


../actuator/SDL/code/actuator.adb: ../actuator/SDL/src/actuator.pr ../actuator/SDL/src/system_structure.pr ../actuator/SDL/src/dataview-uniq.asn
	# Call opengeode to generate the functional code
	$(MAKE) -j -C ../actuator/SDL generate-code

# Provide scripts to run the gui and its partition automatically
egse:  # Simulation target: no dependency
	touch $@

../binaries/EGSE:
	# Generate the script containing a copy of GUI/src (UserWidgets.py + other files)
	echo "cd egse_GUI && cp -fu ../../egse/GUI/src/* . && taste-gui" > $@
	chmod +x $@
	echo "./demo & sleep 1 ; ./EGSE ; pkill -INT demo" > ../binaries/run_demo_partition
	chmod +x ../binaries/run_demo_partition

modemanager:	../modemanager/SDL/code/modemanager.adb
	touch $@


../modemanager/SDL/code/modemanager.adb: ../modemanager/SDL/src/modemanager.pr ../modemanager/SDL/src/system_structure.pr ../modemanager/SDL/src/dataview-uniq.asn
	# Call opengeode to generate the functional code
	$(MAKE) -j -C ../modemanager/SDL generate-code

# Provide scripts to run the gui and its partition automatically
sensor:  # Simulation target: no dependency
	touch $@

../binaries/Sensor:
	# Generate the script containing a copy of GUI/src (UserWidgets.py + other files)
	echo "cd sensor_GUI && cp -fu ../../sensor/GUI/src/* . && taste-gui" > $@
	chmod +x $@
	echo "./demo & sleep 1 ; ./Sensor ; pkill -INT demo" > ../binaries/run_demo_partition
	chmod +x ../binaries/run_demo_partition


clean:
	$(MAKE) -C node_linux -f Makefile.node_linux clean
	rm -rf *_adainit deploymentview_final

.PHONY:	clean simu run $(IF_PROPERTIES)

