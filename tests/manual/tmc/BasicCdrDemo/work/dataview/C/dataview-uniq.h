#ifndef GENERATED_ASN1SCC_dataview_uniq_H
#define GENERATED_ASN1SCC_dataview_uniq_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"
#include "asn1crt_encoding.h"


#ifdef  __cplusplus
extern "C" {
#endif


typedef asn1SccUint asn1SccT_Integer;


flag asn1SccT_Integer_Equal(const asn1SccT_Integer* pVal1, const asn1SccT_Integer* pVal2);

#define ERR_T_INTEGER		1  /*(0 .. 1000000)*/
flag asn1SccT_Integer_IsConstraintValid(const asn1SccT_Integer* pVal, int* pErrCode);

void asn1SccT_Integer_Initialize(asn1SccT_Integer* pVal);

#define ERR_UPER_ENCODE_T_INTEGER		2  /**/
#define asn1SccT_Integer_REQUIRED_BYTES_FOR_ENCODING       3 
#define asn1SccT_Integer_REQUIRED_BITS_FOR_ENCODING        20

flag asn1SccT_Integer_Encode(const asn1SccT_Integer* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INTEGER		3  /**/
flag asn1SccT_Integer_Decode(asn1SccT_Integer* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INTEGER		4  /**/
#define asn1SccT_Integer_REQUIRED_BYTES_FOR_ACN_ENCODING       3 
#define asn1SccT_Integer_REQUIRED_BITS_FOR_ACN_ENCODING        20

flag asn1SccT_Integer_ACN_Encode(const asn1SccT_Integer* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INTEGER		5  /**/
flag asn1SccT_Integer_ACN_Decode(asn1SccT_Integer* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccT_Config --------------------------------------------*/
typedef struct {
    asn1SccT_Integer param_a;
    asn1SccT_Integer param_b;

} asn1SccT_Config;

flag asn1SccT_Config_Equal(const asn1SccT_Config* pVal1, const asn1SccT_Config* pVal2);

#define ERR_T_CONFIG		26  /**/
#define ERR_T_CONFIG_PARAM_A_2		11  /**/
#define ERR_T_CONFIG_PARAM_B_2		21  /**/
flag asn1SccT_Config_IsConstraintValid(const asn1SccT_Config* pVal, int* pErrCode);

void asn1SccT_Config_Initialize(asn1SccT_Config* pVal);

#define ERR_UPER_ENCODE_T_CONFIG		27  /**/
#define ERR_UPER_ENCODE_T_CONFIG_PARAM_A_2		12  /**/
#define ERR_UPER_ENCODE_T_CONFIG_PARAM_B_2		22  /**/
#define asn1SccT_Config_REQUIRED_BYTES_FOR_ENCODING       5 
#define asn1SccT_Config_REQUIRED_BITS_FOR_ENCODING        40

flag asn1SccT_Config_Encode(const asn1SccT_Config* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_CONFIG		28  /**/
#define ERR_UPER_DECODE_T_CONFIG_PARAM_A_2		13  /**/
#define ERR_UPER_DECODE_T_CONFIG_PARAM_B_2		23  /**/
flag asn1SccT_Config_Decode(asn1SccT_Config* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_CONFIG		29  /**/
#define ERR_ACN_ENCODE_T_CONFIG_PARAM_A_2		14  /**/
#define ERR_ACN_ENCODE_T_CONFIG_PARAM_B_2		24  /**/
#define asn1SccT_Config_REQUIRED_BYTES_FOR_ACN_ENCODING       5 
#define asn1SccT_Config_REQUIRED_BITS_FOR_ACN_ENCODING        40

flag asn1SccT_Config_ACN_Encode(const asn1SccT_Config* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_CONFIG		30  /**/
#define ERR_ACN_DECODE_T_CONFIG_PARAM_A_2		15  /**/
#define ERR_ACN_DECODE_T_CONFIG_PARAM_B_2		25  /**/
flag asn1SccT_Config_ACN_Decode(asn1SccT_Config* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccT_Report --------------------------------------------*/
typedef struct {
    asn1SccT_Integer reading;
    asn1SccT_Integer ctrl;
    asn1SccT_Integer feedback;

} asn1SccT_Report;

flag asn1SccT_Report_Equal(const asn1SccT_Report* pVal1, const asn1SccT_Report* pVal2);

#define ERR_T_REPORT		61  /**/
#define ERR_T_REPORT_READING_2		36  /**/
#define ERR_T_REPORT_CTRL_2		46  /**/
#define ERR_T_REPORT_FEEDBACK_2		56  /**/
flag asn1SccT_Report_IsConstraintValid(const asn1SccT_Report* pVal, int* pErrCode);

void asn1SccT_Report_Initialize(asn1SccT_Report* pVal);

#define ERR_UPER_ENCODE_T_REPORT		62  /**/
#define ERR_UPER_ENCODE_T_REPORT_READING_2		37  /**/
#define ERR_UPER_ENCODE_T_REPORT_CTRL_2		47  /**/
#define ERR_UPER_ENCODE_T_REPORT_FEEDBACK_2		57  /**/
#define asn1SccT_Report_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccT_Report_REQUIRED_BITS_FOR_ENCODING        60

flag asn1SccT_Report_Encode(const asn1SccT_Report* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_REPORT		63  /**/
#define ERR_UPER_DECODE_T_REPORT_READING_2		38  /**/
#define ERR_UPER_DECODE_T_REPORT_CTRL_2		48  /**/
#define ERR_UPER_DECODE_T_REPORT_FEEDBACK_2		58  /**/
flag asn1SccT_Report_Decode(asn1SccT_Report* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_REPORT		64  /**/
#define ERR_ACN_ENCODE_T_REPORT_READING_2		39  /**/
#define ERR_ACN_ENCODE_T_REPORT_CTRL_2		49  /**/
#define ERR_ACN_ENCODE_T_REPORT_FEEDBACK_2		59  /**/
#define asn1SccT_Report_REQUIRED_BYTES_FOR_ACN_ENCODING       8 
#define asn1SccT_Report_REQUIRED_BITS_FOR_ACN_ENCODING        60

flag asn1SccT_Report_ACN_Encode(const asn1SccT_Report* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_REPORT		65  /**/
#define ERR_ACN_DECODE_T_REPORT_READING_2		40  /**/
#define ERR_ACN_DECODE_T_REPORT_CTRL_2		50  /**/
#define ERR_ACN_DECODE_T_REPORT_FEEDBACK_2		60  /**/
flag asn1SccT_Report_ACN_Decode(asn1SccT_Report* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int32;


flag asn1SccT_Int32_Equal(const asn1SccT_Int32* pVal1, const asn1SccT_Int32* pVal2);

#define ERR_T_INT32		66  /*(-2147483648 .. 2147483647)*/
flag asn1SccT_Int32_IsConstraintValid(const asn1SccT_Int32* pVal, int* pErrCode);

void asn1SccT_Int32_Initialize(asn1SccT_Int32* pVal);

#define ERR_UPER_ENCODE_T_INT32		67  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_Int32_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT32		68  /**/
flag asn1SccT_Int32_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT32		69  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccT_Int32_ACN_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT32		70  /**/
flag asn1SccT_Int32_ACN_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt32;


flag asn1SccT_UInt32_Equal(const asn1SccT_UInt32* pVal1, const asn1SccT_UInt32* pVal2);

#define ERR_T_UINT32		71  /*(0 .. 4294967295)*/
flag asn1SccT_UInt32_IsConstraintValid(const asn1SccT_UInt32* pVal, int* pErrCode);

void asn1SccT_UInt32_Initialize(asn1SccT_UInt32* pVal);

#define ERR_UPER_ENCODE_T_UINT32		72  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_UInt32_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT32		73  /**/
flag asn1SccT_UInt32_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT32		74  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccT_UInt32_ACN_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT32		75  /**/
flag asn1SccT_UInt32_ACN_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int8;


flag asn1SccT_Int8_Equal(const asn1SccT_Int8* pVal1, const asn1SccT_Int8* pVal2);

#define ERR_T_INT8		76  /*(-128 .. 127)*/
flag asn1SccT_Int8_IsConstraintValid(const asn1SccT_Int8* pVal, int* pErrCode);

void asn1SccT_Int8_Initialize(asn1SccT_Int8* pVal);

#define ERR_UPER_ENCODE_T_INT8		77  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_Int8_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT8		78  /**/
flag asn1SccT_Int8_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT8		79  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag asn1SccT_Int8_ACN_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT8		80  /**/
flag asn1SccT_Int8_ACN_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt8;


flag asn1SccT_UInt8_Equal(const asn1SccT_UInt8* pVal1, const asn1SccT_UInt8* pVal2);

#define ERR_T_UINT8		81  /*(0 .. 255)*/
flag asn1SccT_UInt8_IsConstraintValid(const asn1SccT_UInt8* pVal, int* pErrCode);

void asn1SccT_UInt8_Initialize(asn1SccT_UInt8* pVal);

#define ERR_UPER_ENCODE_T_UINT8		82  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_UInt8_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT8		83  /**/
flag asn1SccT_UInt8_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT8		84  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag asn1SccT_UInt8_ACN_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT8		85  /**/
flag asn1SccT_UInt8_ACN_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag asn1SccT_Boolean;


flag asn1SccT_Boolean_Equal(const asn1SccT_Boolean* pVal1, const asn1SccT_Boolean* pVal2);

#define ERR_T_BOOLEAN		86  /**/
flag asn1SccT_Boolean_IsConstraintValid(const asn1SccT_Boolean* pVal, int* pErrCode);

void asn1SccT_Boolean_Initialize(asn1SccT_Boolean* pVal);

#define ERR_UPER_ENCODE_T_BOOLEAN		87  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccT_Boolean_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_BOOLEAN		88  /**/
flag asn1SccT_Boolean_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_BOOLEAN		89  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag asn1SccT_Boolean_ACN_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_BOOLEAN		90  /**/
flag asn1SccT_Boolean_ACN_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccT_Null_Record --------------------------------------------*/
typedef struct {

} asn1SccT_Null_Record;

flag asn1SccT_Null_Record_Equal(const asn1SccT_Null_Record* pVal1, const asn1SccT_Null_Record* pVal2);

#define ERR_T_NULL_RECORD		91  /**/
flag asn1SccT_Null_Record_IsConstraintValid(const asn1SccT_Null_Record* pVal, int* pErrCode);

void asn1SccT_Null_Record_Initialize(asn1SccT_Null_Record* pVal);

#define asn1SccT_Null_Record_REQUIRED_BYTES_FOR_ENCODING       0 
#define asn1SccT_Null_Record_REQUIRED_BITS_FOR_ENCODING        0

flag asn1SccT_Null_Record_Encode(const asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag asn1SccT_Null_Record_Decode(asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccT_Null_Record_REQUIRED_BYTES_FOR_ACN_ENCODING       0 
#define asn1SccT_Null_Record_REQUIRED_BITS_FOR_ACN_ENCODING        0

flag asn1SccT_Null_Record_ACN_Encode(const asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag asn1SccT_Null_Record_ACN_Decode(asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccPID_Range;


flag asn1SccPID_Range_Equal(const asn1SccPID_Range* pVal1, const asn1SccPID_Range* pVal2);

#define ERR_PID_RANGE		96  /*(0..4)*/
flag asn1SccPID_Range_IsConstraintValid(const asn1SccPID_Range* pVal, int* pErrCode);

void asn1SccPID_Range_Initialize(asn1SccPID_Range* pVal);

#define ERR_UPER_ENCODE_PID_RANGE		97  /**/
#define asn1SccPID_Range_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccPID_Range_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccPID_Range_Encode(const asn1SccPID_Range* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PID_RANGE		98  /**/
flag asn1SccPID_Range_Decode(asn1SccPID_Range* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PID_RANGE		99  /**/
#define asn1SccPID_Range_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccPID_Range_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag asn1SccPID_Range_ACN_Encode(const asn1SccPID_Range* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PID_RANGE		100  /**/
flag asn1SccPID_Range_ACN_Decode(asn1SccPID_Range* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    PID_actuator = 0,
    PID_egse = 1,
    PID_modemanager = 2,
    PID_sensor = 3,
    PID_env = 4
} asn1SccPID;

// please use the following macros to avoid breaking code.
#define asn1SccPID_actuator PID_actuator
#define asn1SccPID_egse PID_egse
#define asn1SccPID_modemanager PID_modemanager
#define asn1SccPID_sensor PID_sensor
#define asn1SccPID_env PID_env

flag asn1SccPID_Equal(const asn1SccPID* pVal1, const asn1SccPID* pVal2);

#define ERR_PID		101  /*actuator | egse | modemanager | sensor | env*/
flag asn1SccPID_IsConstraintValid(const asn1SccPID* pVal, int* pErrCode);

void asn1SccPID_Initialize(asn1SccPID* pVal);

#define ERR_UPER_ENCODE_PID		102  /**/
#define asn1SccPID_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccPID_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccPID_Encode(const asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PID		103  /**/
flag asn1SccPID_Decode(asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PID		104  /**/
#define asn1SccPID_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccPID_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag asn1SccPID_ACN_Encode(const asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PID		105  /**/
flag asn1SccPID_ACN_Decode(asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode);

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
