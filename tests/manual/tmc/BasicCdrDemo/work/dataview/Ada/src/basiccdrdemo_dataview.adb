pragma Style_Checks (Off);
--  Code automatically generated by asn1scc tool
pragma Warnings (Off, "redundant with clause in body");
pragma Warnings (On, "redundant with clause in body");

package body BASICCDRDEMO_DATAVIEW with SPARK_Mode is



pragma Warnings (Off, "condition can only be False if invalid values present");
pragma Warnings (Off, "condition can only be True if invalid values present");


function asn1SccTInteger_Equal (val1, val2 :  asn1SccTInteger) return Boolean
is

begin
	return val1 = val2;

end asn1SccTInteger_Equal;

function asn1SccTInteger_IsConstraintValid(val : asn1SccTInteger) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ""ret"" has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ""ret"" has no effect");        
begin
    ret.Success := (val <= 1000000);
    ret.ErrorCode := (if ret.Success then 0 else ERR_TINTEGER);
    return ret;
end asn1SccTInteger_IsConstraintValid;





function asn1SccTConfig_Equal (val1, val2 :  asn1SccTConfig) return Boolean
is
    pragma Warnings (Off, "initialization of ""ret"" has no effect");
    ret : Boolean := True;
    pragma Warnings (On, "initialization of ""ret"" has no effect");

begin
    ret := (val1.param_a = val2.param_a);

    if ret then
        ret := (val1.param_b = val2.param_b);

    end if;
	return ret;

end asn1SccTConfig_Equal;

function asn1SccTConfig_IsConstraintValid(val : asn1SccTConfig) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ""ret"" has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ""ret"" has no effect");        
begin
    ret := asn1SccTInteger_IsConstraintValid(val.param_a);
    if ret.Success then
        ret := asn1SccTInteger_IsConstraintValid(val.param_b);
    end if;
    return ret;
end asn1SccTConfig_IsConstraintValid;





function asn1SccTReport_Equal (val1, val2 :  asn1SccTReport) return Boolean
is
    pragma Warnings (Off, "initialization of ""ret"" has no effect");
    ret : Boolean := True;
    pragma Warnings (On, "initialization of ""ret"" has no effect");

begin
    ret := (val1.reading = val2.reading);

    if ret then
        ret := (val1.ctrl = val2.ctrl);

        if ret then
            ret := (val1.feedback = val2.feedback);

        end if;
    end if;
	return ret;

end asn1SccTReport_Equal;

function asn1SccTReport_IsConstraintValid(val : asn1SccTReport) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ""ret"" has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ""ret"" has no effect");        
begin
    ret := asn1SccTInteger_IsConstraintValid(val.reading);
    if ret.Success then
        ret := asn1SccTInteger_IsConstraintValid(val.ctrl);
        if ret.Success then
            ret := asn1SccTInteger_IsConstraintValid(val.feedback);
        end if;
    end if;
    return ret;
end asn1SccTReport_IsConstraintValid;




pragma Warnings (On, "condition can only be False if invalid values present");
pragma Warnings (On, "condition can only be True if invalid values present");

 
end BASICCDRDEMO_DATAVIEW;