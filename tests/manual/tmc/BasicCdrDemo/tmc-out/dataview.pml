#define T_SmallInteger int
#define Egse_tc_cfg_param_a int
#define Egse_tc_cfg_param_b int
#define Sensor_reading_x int
#define Actuator_States int
#define Actuator_Context_state int
#define Actuator_Context_init_done bool
#define Actuator_Context_sender int
#define Actuator_Context_x int
#define Modemanager_States int
#define Modemanager_Context_state int
#define Modemanager_Context_init_done bool
#define Modemanager_Context_sender int
#define Modemanager_Context_cfg_param_a int
#define Modemanager_Context_cfg_param_b int
#define Modemanager_Context_xin int
#define Modemanager_Context_xout int
#define Modemanager_Context_xfeedback int
#define Modemanager_Context_rprt_reading int
#define Modemanager_Context_rprt_ctrl int
#define Modemanager_Context_rprt_feedback int
#define T_Integer int
#define T_Config_param_a int
#define T_Config_param_b int
#define T_Report_reading int
#define T_Report_ctrl int
#define T_Report_feedback int
#define T_Int32 int
#define T_UInt32 int
#define T_Int8 int
#define T_UInt8 int
#define T_Boolean bool
#define PID_Range int
#define PID int
#define Actuator_Event_msg_in_ctrl_x int
#define Actuator_Event_msg_out_feedback_x int
#define Egse_Event_msg_in_tm_reprt_reading int
#define Egse_Event_msg_in_tm_reprt_ctrl int
#define Egse_Event_msg_in_tm_reprt_feedback int
#define Egse_Event_msg_out_tc_cfg_param_a int
#define Egse_Event_msg_out_tc_cfg_param_b int
#define Modemanager_Event_msg_in_feedback_x int
#define Modemanager_Event_msg_in_reading_x int
#define Modemanager_Event_msg_in_tc_cfg_param_a int
#define Modemanager_Event_msg_in_tc_cfg_param_b int
#define Modemanager_Event_msg_out_ctrl_x int
#define Modemanager_Event_msg_out_tm_reprt_reading int
#define Modemanager_Event_msg_out_tm_reprt_ctrl int
#define Modemanager_Event_msg_out_tm_reprt_feedback int
#define Sensor_Event_msg_out_reading_x int
#define Observer_State_Kind int
#define Function_Event_actuator_msg_in_ctrl_x int
#define Function_Event_actuator_msg_out_feedback_x int
#define Function_Event_egse_msg_in_tm_reprt_reading int
#define Function_Event_egse_msg_in_tm_reprt_ctrl int
#define Function_Event_egse_msg_in_tm_reprt_feedback int
#define Function_Event_egse_msg_out_tc_cfg_param_a int
#define Function_Event_egse_msg_out_tc_cfg_param_b int
#define Function_Event_modemanager_msg_in_feedback_x int
#define Function_Event_modemanager_msg_in_reading_x int
#define Function_Event_modemanager_msg_in_tc_cfg_param_a int
#define Function_Event_modemanager_msg_in_tc_cfg_param_b int
#define Function_Event_modemanager_msg_out_ctrl_x int
#define Function_Event_modemanager_msg_out_tm_reprt_reading int
#define Function_Event_modemanager_msg_out_tm_reprt_ctrl int
#define Function_Event_modemanager_msg_out_tm_reprt_feedback int
#define Function_Event_sensor_msg_out_reading_x int
#define Named_Function_Event_event_actuator_msg_in_ctrl_x int
#define Named_Function_Event_event_actuator_msg_out_feedback_x int
#define Named_Function_Event_event_egse_msg_in_tm_reprt_reading int
#define Named_Function_Event_event_egse_msg_in_tm_reprt_ctrl int
#define Named_Function_Event_event_egse_msg_in_tm_reprt_feedback int
#define Named_Function_Event_event_egse_msg_out_tc_cfg_param_a int
#define Named_Function_Event_event_egse_msg_out_tc_cfg_param_b int
#define Named_Function_Event_event_modemanager_msg_in_feedback_x int
#define Named_Function_Event_event_modemanager_msg_in_reading_x int
#define Named_Function_Event_event_modemanager_msg_in_tc_cfg_param_a int
#define Named_Function_Event_event_modemanager_msg_in_tc_cfg_param_b int
#define Named_Function_Event_event_modemanager_msg_out_ctrl_x int
#define Named_Function_Event_event_modemanager_msg_out_tm_reprt_reading int
#define Named_Function_Event_event_modemanager_msg_out_tm_reprt_ctrl int
#define Named_Function_Event_event_modemanager_msg_out_tm_reprt_feedback int
#define Named_Function_Event_event_sensor_msg_out_reading_x int
#define Interface_Event_source int
#define Interface_Event_dest int
#define Interface_Event_event_actuator_msg_in_ctrl_x int
#define Interface_Event_event_actuator_msg_out_feedback_x int
#define Interface_Event_event_egse_msg_in_tm_reprt_reading int
#define Interface_Event_event_egse_msg_in_tm_reprt_ctrl int
#define Interface_Event_event_egse_msg_in_tm_reprt_feedback int
#define Interface_Event_event_egse_msg_out_tc_cfg_param_a int
#define Interface_Event_event_egse_msg_out_tc_cfg_param_b int
#define Interface_Event_event_modemanager_msg_in_feedback_x int
#define Interface_Event_event_modemanager_msg_in_reading_x int
#define Interface_Event_event_modemanager_msg_in_tc_cfg_param_a int
#define Interface_Event_event_modemanager_msg_in_tc_cfg_param_b int
#define Interface_Event_event_modemanager_msg_out_ctrl_x int
#define Interface_Event_event_modemanager_msg_out_tm_reprt_reading int
#define Interface_Event_event_modemanager_msg_out_tm_reprt_ctrl int
#define Interface_Event_event_modemanager_msg_out_tm_reprt_feedback int
#define Interface_Event_event_sensor_msg_out_reading_x int
#define Observable_Event_input_event_source int
#define Observable_Event_input_event_dest int
#define Observable_Event_input_event_event_actuator_msg_in_ctrl_x int
#define Observable_Event_input_event_event_actuator_msg_out_feedback_x int
#define Observable_Event_input_event_event_egse_msg_in_tm_reprt_reading int
#define Observable_Event_input_event_event_egse_msg_in_tm_reprt_ctrl int
#define Observable_Event_input_event_event_egse_msg_in_tm_reprt_feedback int
#define Observable_Event_input_event_event_egse_msg_out_tc_cfg_param_a int
#define Observable_Event_input_event_event_egse_msg_out_tc_cfg_param_b int
#define Observable_Event_input_event_event_modemanager_msg_in_feedback_x int
#define Observable_Event_input_event_event_modemanager_msg_in_reading_x int
#define Observable_Event_input_event_event_modemanager_msg_in_tc_cfg_param_a int
#define Observable_Event_input_event_event_modemanager_msg_in_tc_cfg_param_b int
#define Observable_Event_input_event_event_modemanager_msg_out_ctrl_x int
#define Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_reading int
#define Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_ctrl int
#define Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_feedback int
#define Observable_Event_input_event_event_sensor_msg_out_reading_x int
#define Observable_Event_output_event_source int
#define Observable_Event_output_event_dest int
#define Observable_Event_output_event_event_actuator_msg_in_ctrl_x int
#define Observable_Event_output_event_event_actuator_msg_out_feedback_x int
#define Observable_Event_output_event_event_egse_msg_in_tm_reprt_reading int
#define Observable_Event_output_event_event_egse_msg_in_tm_reprt_ctrl int
#define Observable_Event_output_event_event_egse_msg_in_tm_reprt_feedback int
#define Observable_Event_output_event_event_egse_msg_out_tc_cfg_param_a int
#define Observable_Event_output_event_event_egse_msg_out_tc_cfg_param_b int
#define Observable_Event_output_event_event_modemanager_msg_in_feedback_x int
#define Observable_Event_output_event_event_modemanager_msg_in_reading_x int
#define Observable_Event_output_event_event_modemanager_msg_in_tc_cfg_param_a int
#define Observable_Event_output_event_event_modemanager_msg_in_tc_cfg_param_b int
#define Observable_Event_output_event_event_modemanager_msg_out_ctrl_x int
#define Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_reading int
#define Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_ctrl int
#define Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_feedback int
#define Observable_Event_output_event_event_sensor_msg_out_reading_x int
#define Observable_Event_unhandled_input_source int
#define Observable_Event_unhandled_input_dest int
#define Observable_Event_unhandled_input_event_actuator_msg_in_ctrl_x int
#define Observable_Event_unhandled_input_event_actuator_msg_out_feedback_x int
#define Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_reading int
#define Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_ctrl int
#define Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_feedback int
#define Observable_Event_unhandled_input_event_egse_msg_out_tc_cfg_param_a int
#define Observable_Event_unhandled_input_event_egse_msg_out_tc_cfg_param_b int
#define Observable_Event_unhandled_input_event_modemanager_msg_in_feedback_x int
#define Observable_Event_unhandled_input_event_modemanager_msg_in_reading_x int
#define Observable_Event_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a int
#define Observable_Event_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b int
#define Observable_Event_unhandled_input_event_modemanager_msg_out_ctrl_x int
#define Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_reading int
#define Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl int
#define Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback int
#define Observable_Event_unhandled_input_event_sensor_msg_out_reading_x int
#define Events_Ty_elem_input_event_source int
#define Events_Ty_elem_input_event_dest int
#define Events_Ty_elem_input_event_event_actuator_msg_in_ctrl_x int
#define Events_Ty_elem_input_event_event_actuator_msg_out_feedback_x int
#define Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_reading int
#define Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_ctrl int
#define Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_feedback int
#define Events_Ty_elem_input_event_event_egse_msg_out_tc_cfg_param_a int
#define Events_Ty_elem_input_event_event_egse_msg_out_tc_cfg_param_b int
#define Events_Ty_elem_input_event_event_modemanager_msg_in_feedback_x int
#define Events_Ty_elem_input_event_event_modemanager_msg_in_reading_x int
#define Events_Ty_elem_input_event_event_modemanager_msg_in_tc_cfg_param_a int
#define Events_Ty_elem_input_event_event_modemanager_msg_in_tc_cfg_param_b int
#define Events_Ty_elem_input_event_event_modemanager_msg_out_ctrl_x int
#define Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_reading int
#define Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_ctrl int
#define Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_feedback int
#define Events_Ty_elem_input_event_event_sensor_msg_out_reading_x int
#define Events_Ty_elem_output_event_source int
#define Events_Ty_elem_output_event_dest int
#define Events_Ty_elem_output_event_event_actuator_msg_in_ctrl_x int
#define Events_Ty_elem_output_event_event_actuator_msg_out_feedback_x int
#define Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_reading int
#define Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_ctrl int
#define Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_feedback int
#define Events_Ty_elem_output_event_event_egse_msg_out_tc_cfg_param_a int
#define Events_Ty_elem_output_event_event_egse_msg_out_tc_cfg_param_b int
#define Events_Ty_elem_output_event_event_modemanager_msg_in_feedback_x int
#define Events_Ty_elem_output_event_event_modemanager_msg_in_reading_x int
#define Events_Ty_elem_output_event_event_modemanager_msg_in_tc_cfg_param_a int
#define Events_Ty_elem_output_event_event_modemanager_msg_in_tc_cfg_param_b int
#define Events_Ty_elem_output_event_event_modemanager_msg_out_ctrl_x int
#define Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_reading int
#define Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_ctrl int
#define Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_feedback int
#define Events_Ty_elem_output_event_event_sensor_msg_out_reading_x int
#define Events_Ty_elem_unhandled_input_source int
#define Events_Ty_elem_unhandled_input_dest int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_ctrl_x int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_out_feedback_x int
#define Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_reading int
#define Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_ctrl int
#define Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_feedback int
#define Events_Ty_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_a int
#define Events_Ty_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_b int
#define Events_Ty_elem_unhandled_input_event_modemanager_msg_in_feedback_x int
#define Events_Ty_elem_unhandled_input_event_modemanager_msg_in_reading_x int
#define Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a int
#define Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b int
#define Events_Ty_elem_unhandled_input_event_modemanager_msg_out_ctrl_x int
#define Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_reading int
#define Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl int
#define Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback int
#define Events_Ty_elem_unhandled_input_event_sensor_msg_out_reading_x int
#define System_State_actuator_queue_elem_input_event_source int
#define System_State_actuator_queue_elem_input_event_dest int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ctrl_x int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_out_feedback_x int
#define System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_reading int
#define System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_ctrl int
#define System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_feedback int
#define System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_a int
#define System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_b int
#define System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_feedback_x int
#define System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_reading_x int
#define System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_a int
#define System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_b int
#define System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_ctrl_x int
#define System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_reading int
#define System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_ctrl int
#define System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_feedback int
#define System_State_actuator_queue_elem_input_event_event_sensor_msg_out_reading_x int
#define System_State_actuator_queue_elem_output_event_source int
#define System_State_actuator_queue_elem_output_event_dest int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ctrl_x int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_out_feedback_x int
#define System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_reading int
#define System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_ctrl int
#define System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_feedback int
#define System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_a int
#define System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_b int
#define System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_feedback_x int
#define System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_reading_x int
#define System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_a int
#define System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_b int
#define System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_ctrl_x int
#define System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_reading int
#define System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_ctrl int
#define System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_feedback int
#define System_State_actuator_queue_elem_output_event_event_sensor_msg_out_reading_x int
#define System_State_actuator_queue_elem_unhandled_input_source int
#define System_State_actuator_queue_elem_unhandled_input_dest int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ctrl_x int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_feedback_x int
#define System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_reading int
#define System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_ctrl int
#define System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_feedback int
#define System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_a int
#define System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_b int
#define System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_feedback_x int
#define System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_reading_x int
#define System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a int
#define System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b int
#define System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl_x int
#define System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_reading int
#define System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl int
#define System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback int
#define System_State_actuator_queue_elem_unhandled_input_event_sensor_msg_out_reading_x int
#define System_State_modemanager_queue_elem_input_event_source int
#define System_State_modemanager_queue_elem_input_event_dest int
#define System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_ctrl_x int
#define System_State_modemanager_queue_elem_input_event_event_actuator_msg_out_feedback_x int
#define System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_reading int
#define System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_ctrl int
#define System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_feedback int
#define System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_a int
#define System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_b int
#define System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_feedback_x int
#define System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_reading_x int
#define System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_a int
#define System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_b int
#define System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_ctrl_x int
#define System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_reading int
#define System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_ctrl int
#define System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_feedback int
#define System_State_modemanager_queue_elem_input_event_event_sensor_msg_out_reading_x int
#define System_State_modemanager_queue_elem_output_event_source int
#define System_State_modemanager_queue_elem_output_event_dest int
#define System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_ctrl_x int
#define System_State_modemanager_queue_elem_output_event_event_actuator_msg_out_feedback_x int
#define System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_reading int
#define System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_ctrl int
#define System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_feedback int
#define System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_a int
#define System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_b int
#define System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_feedback_x int
#define System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_reading_x int
#define System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_a int
#define System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_b int
#define System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_ctrl_x int
#define System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_reading int
#define System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_ctrl int
#define System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_feedback int
#define System_State_modemanager_queue_elem_output_event_event_sensor_msg_out_reading_x int
#define System_State_modemanager_queue_elem_unhandled_input_source int
#define System_State_modemanager_queue_elem_unhandled_input_dest int
#define System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_ctrl_x int
#define System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_out_feedback_x int
#define System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_reading int
#define System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_ctrl int
#define System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_feedback int
#define System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_a int
#define System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_b int
#define System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_feedback_x int
#define System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_reading_x int
#define System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a int
#define System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b int
#define System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl_x int
#define System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_reading int
#define System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl int
#define System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback int
#define System_State_modemanager_queue_elem_unhandled_input_event_sensor_msg_out_reading_x int
#define System_State_actuator_state int
#define System_State_actuator_init_done bool
#define System_State_actuator_sender int
#define System_State_actuator_x int
#define System_State_modemanager_state int
#define System_State_modemanager_init_done bool
#define System_State_modemanager_sender int
#define System_State_modemanager_cfg_param_a int
#define System_State_modemanager_cfg_param_b int
#define System_State_modemanager_xin int
#define System_State_modemanager_xout int
#define System_State_modemanager_xfeedback int
#define System_State_modemanager_rprt_reading int
#define System_State_modemanager_rprt_ctrl int
#define System_State_modemanager_rprt_feedback int
#define TimerData_timer_enabled bool
#define TimerData_interval int
#define Actuator_States_working 0
#define Actuator_States_idle 1
#define Actuator_Context_state_working 0
#define Actuator_Context_state_idle 1
#define Actuator_Context_sender_actuator 0
#define Actuator_Context_sender_egse 1
#define Actuator_Context_sender_modemanager 2
#define Actuator_Context_sender_sensor 3
#define Actuator_Context_sender_env 4
#define Modemanager_States_uninitialized 0
#define Modemanager_States_configured 1
#define Modemanager_Context_state_uninitialized 0
#define Modemanager_Context_state_configured 1
#define Modemanager_Context_sender_actuator 0
#define Modemanager_Context_sender_egse 1
#define Modemanager_Context_sender_modemanager 2
#define Modemanager_Context_sender_sensor 3
#define Modemanager_Context_sender_env 4
#define PID_actuator 0
#define PID_egse 1
#define PID_modemanager 2
#define PID_sensor 3
#define PID_env 4
#define Actuator_Event_NONE 0
#define Actuator_Event_msg_in_NONE 0
#define Actuator_Event_msg_in_input_none_PRESENT 1
#define Actuator_event_msg_in_selection_input_none_PRESENT 1
#define Actuator_Event_msg_in_ctrl_PRESENT 2
#define Actuator_event_msg_in_selection_ctrl_PRESENT 2
#define Actuator_Event_msg_in_PRESENT 1
#define Actuator_event_selection_msg_in_PRESENT 1
#define Actuator_Event_msg_out_NONE 0
#define Actuator_Event_msg_out_feedback_PRESENT 1
#define Actuator_event_msg_out_selection_feedback_PRESENT 1
#define Actuator_Event_msg_out_PRESENT 2
#define Actuator_event_selection_msg_out_PRESENT 2
#define Egse_Event_NONE 0
#define Egse_Event_msg_in_NONE 0
#define Egse_Event_msg_in_tm_PRESENT 1
#define Egse_event_msg_in_selection_tm_PRESENT 1
#define Egse_Event_msg_in_PRESENT 1
#define Egse_event_selection_msg_in_PRESENT 1
#define Egse_Event_msg_out_NONE 0
#define Egse_Event_msg_out_tc_PRESENT 1
#define Egse_event_msg_out_selection_tc_PRESENT 1
#define Egse_Event_msg_out_PRESENT 2
#define Egse_event_selection_msg_out_PRESENT 2
#define Modemanager_Event_NONE 0
#define Modemanager_Event_msg_in_NONE 0
#define Modemanager_Event_msg_in_input_none_PRESENT 1
#define Modemanager_event_msg_in_selection_input_none_PRESENT 1
#define Modemanager_Event_msg_in_feedback_PRESENT 2
#define Modemanager_event_msg_in_selection_feedback_PRESENT 2
#define Modemanager_Event_msg_in_reading_PRESENT 3
#define Modemanager_event_msg_in_selection_reading_PRESENT 3
#define Modemanager_Event_msg_in_tc_PRESENT 4
#define Modemanager_event_msg_in_selection_tc_PRESENT 4
#define Modemanager_Event_msg_in_PRESENT 1
#define Modemanager_event_selection_msg_in_PRESENT 1
#define Modemanager_Event_msg_out_NONE 0
#define Modemanager_Event_msg_out_ctrl_PRESENT 1
#define Modemanager_event_msg_out_selection_ctrl_PRESENT 1
#define Modemanager_Event_msg_out_tm_PRESENT 2
#define Modemanager_event_msg_out_selection_tm_PRESENT 2
#define Modemanager_Event_msg_out_PRESENT 2
#define Modemanager_event_selection_msg_out_PRESENT 2
#define Sensor_Event_NONE 0
#define Sensor_Event_msg_out_NONE 0
#define Sensor_Event_msg_out_reading_PRESENT 1
#define Sensor_event_msg_out_selection_reading_PRESENT 1
#define Sensor_Event_msg_out_PRESENT 1
#define Sensor_event_selection_msg_out_PRESENT 1
#define Observer_State_Kind_regular_state 0
#define Observer_State_Kind_error_state 1
#define Observer_State_Kind_ignore_state 2
#define Observer_State_Kind_success_state 3
#define Function_Event_NONE 0
#define Function_Event_actuator_NONE 0
#define Function_Event_actuator_msg_in_NONE 0
#define Function_Event_actuator_msg_in_input_none_PRESENT 1
#define Function_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Function_Event_actuator_msg_in_ctrl_PRESENT 2
#define Function_event_actuator_msg_in_selection_ctrl_PRESENT 2
#define Function_Event_actuator_msg_in_PRESENT 1
#define Function_event_actuator_selection_msg_in_PRESENT 1
#define Function_Event_actuator_msg_out_NONE 0
#define Function_Event_actuator_msg_out_feedback_PRESENT 1
#define Function_event_actuator_msg_out_selection_feedback_PRESENT 1
#define Function_Event_actuator_msg_out_PRESENT 2
#define Function_event_actuator_selection_msg_out_PRESENT 2
#define Function_Event_actuator_PRESENT 1
#define Function_event_selection_actuator_PRESENT 1
#define Function_Event_egse_NONE 0
#define Function_Event_egse_msg_in_NONE 0
#define Function_Event_egse_msg_in_tm_PRESENT 1
#define Function_event_egse_msg_in_selection_tm_PRESENT 1
#define Function_Event_egse_msg_in_PRESENT 1
#define Function_event_egse_selection_msg_in_PRESENT 1
#define Function_Event_egse_msg_out_NONE 0
#define Function_Event_egse_msg_out_tc_PRESENT 1
#define Function_event_egse_msg_out_selection_tc_PRESENT 1
#define Function_Event_egse_msg_out_PRESENT 2
#define Function_event_egse_selection_msg_out_PRESENT 2
#define Function_Event_egse_PRESENT 2
#define Function_event_selection_egse_PRESENT 2
#define Function_Event_modemanager_NONE 0
#define Function_Event_modemanager_msg_in_NONE 0
#define Function_Event_modemanager_msg_in_input_none_PRESENT 1
#define Function_event_modemanager_msg_in_selection_input_none_PRESENT 1
#define Function_Event_modemanager_msg_in_feedback_PRESENT 2
#define Function_event_modemanager_msg_in_selection_feedback_PRESENT 2
#define Function_Event_modemanager_msg_in_reading_PRESENT 3
#define Function_event_modemanager_msg_in_selection_reading_PRESENT 3
#define Function_Event_modemanager_msg_in_tc_PRESENT 4
#define Function_event_modemanager_msg_in_selection_tc_PRESENT 4
#define Function_Event_modemanager_msg_in_PRESENT 1
#define Function_event_modemanager_selection_msg_in_PRESENT 1
#define Function_Event_modemanager_msg_out_NONE 0
#define Function_Event_modemanager_msg_out_ctrl_PRESENT 1
#define Function_event_modemanager_msg_out_selection_ctrl_PRESENT 1
#define Function_Event_modemanager_msg_out_tm_PRESENT 2
#define Function_event_modemanager_msg_out_selection_tm_PRESENT 2
#define Function_Event_modemanager_msg_out_PRESENT 2
#define Function_event_modemanager_selection_msg_out_PRESENT 2
#define Function_Event_modemanager_PRESENT 3
#define Function_event_selection_modemanager_PRESENT 3
#define Function_Event_sensor_NONE 0
#define Function_Event_sensor_msg_out_NONE 0
#define Function_Event_sensor_msg_out_reading_PRESENT 1
#define Function_event_sensor_msg_out_selection_reading_PRESENT 1
#define Function_Event_sensor_msg_out_PRESENT 1
#define Function_event_sensor_selection_msg_out_PRESENT 1
#define Function_Event_sensor_PRESENT 4
#define Function_event_selection_sensor_PRESENT 4
#define Named_Function_Event_event_NONE 0
#define Named_Function_Event_event_actuator_NONE 0
#define Named_Function_Event_event_actuator_msg_in_NONE 0
#define Named_Function_Event_event_actuator_msg_in_input_none_PRESENT 1
#define Named_function_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Named_Function_Event_event_actuator_msg_in_ctrl_PRESENT 2
#define Named_function_event_event_actuator_msg_in_selection_ctrl_PRESENT 2
#define Named_Function_Event_event_actuator_msg_in_PRESENT 1
#define Named_function_event_event_actuator_selection_msg_in_PRESENT 1
#define Named_Function_Event_event_actuator_msg_out_NONE 0
#define Named_Function_Event_event_actuator_msg_out_feedback_PRESENT 1
#define Named_function_event_event_actuator_msg_out_selection_feedback_PRESENT 1
#define Named_Function_Event_event_actuator_msg_out_PRESENT 2
#define Named_function_event_event_actuator_selection_msg_out_PRESENT 2
#define Named_Function_Event_event_actuator_PRESENT 1
#define Named_function_event_event_selection_actuator_PRESENT 1
#define Named_Function_Event_event_egse_NONE 0
#define Named_Function_Event_event_egse_msg_in_NONE 0
#define Named_Function_Event_event_egse_msg_in_tm_PRESENT 1
#define Named_function_event_event_egse_msg_in_selection_tm_PRESENT 1
#define Named_Function_Event_event_egse_msg_in_PRESENT 1
#define Named_function_event_event_egse_selection_msg_in_PRESENT 1
#define Named_Function_Event_event_egse_msg_out_NONE 0
#define Named_Function_Event_event_egse_msg_out_tc_PRESENT 1
#define Named_function_event_event_egse_msg_out_selection_tc_PRESENT 1
#define Named_Function_Event_event_egse_msg_out_PRESENT 2
#define Named_function_event_event_egse_selection_msg_out_PRESENT 2
#define Named_Function_Event_event_egse_PRESENT 2
#define Named_function_event_event_selection_egse_PRESENT 2
#define Named_Function_Event_event_modemanager_NONE 0
#define Named_Function_Event_event_modemanager_msg_in_NONE 0
#define Named_Function_Event_event_modemanager_msg_in_input_none_PRESENT 1
#define Named_function_event_event_modemanager_msg_in_selection_input_none_PRESENT 1
#define Named_Function_Event_event_modemanager_msg_in_feedback_PRESENT 2
#define Named_function_event_event_modemanager_msg_in_selection_feedback_PRESENT 2
#define Named_Function_Event_event_modemanager_msg_in_reading_PRESENT 3
#define Named_function_event_event_modemanager_msg_in_selection_reading_PRESENT 3
#define Named_Function_Event_event_modemanager_msg_in_tc_PRESENT 4
#define Named_function_event_event_modemanager_msg_in_selection_tc_PRESENT 4
#define Named_Function_Event_event_modemanager_msg_in_PRESENT 1
#define Named_function_event_event_modemanager_selection_msg_in_PRESENT 1
#define Named_Function_Event_event_modemanager_msg_out_NONE 0
#define Named_Function_Event_event_modemanager_msg_out_ctrl_PRESENT 1
#define Named_function_event_event_modemanager_msg_out_selection_ctrl_PRESENT 1
#define Named_Function_Event_event_modemanager_msg_out_tm_PRESENT 2
#define Named_function_event_event_modemanager_msg_out_selection_tm_PRESENT 2
#define Named_Function_Event_event_modemanager_msg_out_PRESENT 2
#define Named_function_event_event_modemanager_selection_msg_out_PRESENT 2
#define Named_Function_Event_event_modemanager_PRESENT 3
#define Named_function_event_event_selection_modemanager_PRESENT 3
#define Named_Function_Event_event_sensor_NONE 0
#define Named_Function_Event_event_sensor_msg_out_NONE 0
#define Named_Function_Event_event_sensor_msg_out_reading_PRESENT 1
#define Named_function_event_event_sensor_msg_out_selection_reading_PRESENT 1
#define Named_Function_Event_event_sensor_msg_out_PRESENT 1
#define Named_function_event_event_sensor_selection_msg_out_PRESENT 1
#define Named_Function_Event_event_sensor_PRESENT 4
#define Named_function_event_event_selection_sensor_PRESENT 4
#define Interface_Event_source_actuator 0
#define Interface_Event_source_egse 1
#define Interface_Event_source_modemanager 2
#define Interface_Event_source_sensor 3
#define Interface_Event_source_env 4
#define Interface_Event_dest_actuator 0
#define Interface_Event_dest_egse 1
#define Interface_Event_dest_modemanager 2
#define Interface_Event_dest_sensor 3
#define Interface_Event_dest_env 4
#define Interface_Event_event_NONE 0
#define Interface_Event_event_actuator_NONE 0
#define Interface_Event_event_actuator_msg_in_NONE 0
#define Interface_Event_event_actuator_msg_in_input_none_PRESENT 1
#define Interface_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Interface_Event_event_actuator_msg_in_ctrl_PRESENT 2
#define Interface_event_event_actuator_msg_in_selection_ctrl_PRESENT 2
#define Interface_Event_event_actuator_msg_in_PRESENT 1
#define Interface_event_event_actuator_selection_msg_in_PRESENT 1
#define Interface_Event_event_actuator_msg_out_NONE 0
#define Interface_Event_event_actuator_msg_out_feedback_PRESENT 1
#define Interface_event_event_actuator_msg_out_selection_feedback_PRESENT 1
#define Interface_Event_event_actuator_msg_out_PRESENT 2
#define Interface_event_event_actuator_selection_msg_out_PRESENT 2
#define Interface_Event_event_actuator_PRESENT 1
#define Interface_event_event_selection_actuator_PRESENT 1
#define Interface_Event_event_egse_NONE 0
#define Interface_Event_event_egse_msg_in_NONE 0
#define Interface_Event_event_egse_msg_in_tm_PRESENT 1
#define Interface_event_event_egse_msg_in_selection_tm_PRESENT 1
#define Interface_Event_event_egse_msg_in_PRESENT 1
#define Interface_event_event_egse_selection_msg_in_PRESENT 1
#define Interface_Event_event_egse_msg_out_NONE 0
#define Interface_Event_event_egse_msg_out_tc_PRESENT 1
#define Interface_event_event_egse_msg_out_selection_tc_PRESENT 1
#define Interface_Event_event_egse_msg_out_PRESENT 2
#define Interface_event_event_egse_selection_msg_out_PRESENT 2
#define Interface_Event_event_egse_PRESENT 2
#define Interface_event_event_selection_egse_PRESENT 2
#define Interface_Event_event_modemanager_NONE 0
#define Interface_Event_event_modemanager_msg_in_NONE 0
#define Interface_Event_event_modemanager_msg_in_input_none_PRESENT 1
#define Interface_event_event_modemanager_msg_in_selection_input_none_PRESENT 1
#define Interface_Event_event_modemanager_msg_in_feedback_PRESENT 2
#define Interface_event_event_modemanager_msg_in_selection_feedback_PRESENT 2
#define Interface_Event_event_modemanager_msg_in_reading_PRESENT 3
#define Interface_event_event_modemanager_msg_in_selection_reading_PRESENT 3
#define Interface_Event_event_modemanager_msg_in_tc_PRESENT 4
#define Interface_event_event_modemanager_msg_in_selection_tc_PRESENT 4
#define Interface_Event_event_modemanager_msg_in_PRESENT 1
#define Interface_event_event_modemanager_selection_msg_in_PRESENT 1
#define Interface_Event_event_modemanager_msg_out_NONE 0
#define Interface_Event_event_modemanager_msg_out_ctrl_PRESENT 1
#define Interface_event_event_modemanager_msg_out_selection_ctrl_PRESENT 1
#define Interface_Event_event_modemanager_msg_out_tm_PRESENT 2
#define Interface_event_event_modemanager_msg_out_selection_tm_PRESENT 2
#define Interface_Event_event_modemanager_msg_out_PRESENT 2
#define Interface_event_event_modemanager_selection_msg_out_PRESENT 2
#define Interface_Event_event_modemanager_PRESENT 3
#define Interface_event_event_selection_modemanager_PRESENT 3
#define Interface_Event_event_sensor_NONE 0
#define Interface_Event_event_sensor_msg_out_NONE 0
#define Interface_Event_event_sensor_msg_out_reading_PRESENT 1
#define Interface_event_event_sensor_msg_out_selection_reading_PRESENT 1
#define Interface_Event_event_sensor_msg_out_PRESENT 1
#define Interface_event_event_sensor_selection_msg_out_PRESENT 1
#define Interface_Event_event_sensor_PRESENT 4
#define Interface_event_event_selection_sensor_PRESENT 4
#define Observable_Event_NONE 0
#define Observable_Event_no_event_PRESENT 1
#define Observable_event_selection_no_event_PRESENT 1
#define Observable_Event_system_startup_PRESENT 2
#define Observable_event_selection_system_startup_PRESENT 2
#define Observable_Event_input_event_source_actuator 0
#define Observable_Event_input_event_source_egse 1
#define Observable_Event_input_event_source_modemanager 2
#define Observable_Event_input_event_source_sensor 3
#define Observable_Event_input_event_source_env 4
#define Observable_Event_input_event_dest_actuator 0
#define Observable_Event_input_event_dest_egse 1
#define Observable_Event_input_event_dest_modemanager 2
#define Observable_Event_input_event_dest_sensor 3
#define Observable_Event_input_event_dest_env 4
#define Observable_Event_input_event_event_NONE 0
#define Observable_Event_input_event_event_actuator_NONE 0
#define Observable_Event_input_event_event_actuator_msg_in_NONE 0
#define Observable_Event_input_event_event_actuator_msg_in_input_none_PRESENT 1
#define Observable_event_input_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_input_event_event_actuator_msg_in_ctrl_PRESENT 2
#define Observable_event_input_event_event_actuator_msg_in_selection_ctrl_PRESENT 2
#define Observable_Event_input_event_event_actuator_msg_in_PRESENT 1
#define Observable_event_input_event_event_actuator_selection_msg_in_PRESENT 1
#define Observable_Event_input_event_event_actuator_msg_out_NONE 0
#define Observable_Event_input_event_event_actuator_msg_out_feedback_PRESENT 1
#define Observable_event_input_event_event_actuator_msg_out_selection_feedback_PRESENT 1
#define Observable_Event_input_event_event_actuator_msg_out_PRESENT 2
#define Observable_event_input_event_event_actuator_selection_msg_out_PRESENT 2
#define Observable_Event_input_event_event_actuator_PRESENT 1
#define Observable_event_input_event_event_selection_actuator_PRESENT 1
#define Observable_Event_input_event_event_egse_NONE 0
#define Observable_Event_input_event_event_egse_msg_in_NONE 0
#define Observable_Event_input_event_event_egse_msg_in_tm_PRESENT 1
#define Observable_event_input_event_event_egse_msg_in_selection_tm_PRESENT 1
#define Observable_Event_input_event_event_egse_msg_in_PRESENT 1
#define Observable_event_input_event_event_egse_selection_msg_in_PRESENT 1
#define Observable_Event_input_event_event_egse_msg_out_NONE 0
#define Observable_Event_input_event_event_egse_msg_out_tc_PRESENT 1
#define Observable_event_input_event_event_egse_msg_out_selection_tc_PRESENT 1
#define Observable_Event_input_event_event_egse_msg_out_PRESENT 2
#define Observable_event_input_event_event_egse_selection_msg_out_PRESENT 2
#define Observable_Event_input_event_event_egse_PRESENT 2
#define Observable_event_input_event_event_selection_egse_PRESENT 2
#define Observable_Event_input_event_event_modemanager_NONE 0
#define Observable_Event_input_event_event_modemanager_msg_in_NONE 0
#define Observable_Event_input_event_event_modemanager_msg_in_input_none_PRESENT 1
#define Observable_event_input_event_event_modemanager_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_input_event_event_modemanager_msg_in_feedback_PRESENT 2
#define Observable_event_input_event_event_modemanager_msg_in_selection_feedback_PRESENT 2
#define Observable_Event_input_event_event_modemanager_msg_in_reading_PRESENT 3
#define Observable_event_input_event_event_modemanager_msg_in_selection_reading_PRESENT 3
#define Observable_Event_input_event_event_modemanager_msg_in_tc_PRESENT 4
#define Observable_event_input_event_event_modemanager_msg_in_selection_tc_PRESENT 4
#define Observable_Event_input_event_event_modemanager_msg_in_PRESENT 1
#define Observable_event_input_event_event_modemanager_selection_msg_in_PRESENT 1
#define Observable_Event_input_event_event_modemanager_msg_out_NONE 0
#define Observable_Event_input_event_event_modemanager_msg_out_ctrl_PRESENT 1
#define Observable_event_input_event_event_modemanager_msg_out_selection_ctrl_PRESENT 1
#define Observable_Event_input_event_event_modemanager_msg_out_tm_PRESENT 2
#define Observable_event_input_event_event_modemanager_msg_out_selection_tm_PRESENT 2
#define Observable_Event_input_event_event_modemanager_msg_out_PRESENT 2
#define Observable_event_input_event_event_modemanager_selection_msg_out_PRESENT 2
#define Observable_Event_input_event_event_modemanager_PRESENT 3
#define Observable_event_input_event_event_selection_modemanager_PRESENT 3
#define Observable_Event_input_event_event_sensor_NONE 0
#define Observable_Event_input_event_event_sensor_msg_out_NONE 0
#define Observable_Event_input_event_event_sensor_msg_out_reading_PRESENT 1
#define Observable_event_input_event_event_sensor_msg_out_selection_reading_PRESENT 1
#define Observable_Event_input_event_event_sensor_msg_out_PRESENT 1
#define Observable_event_input_event_event_sensor_selection_msg_out_PRESENT 1
#define Observable_Event_input_event_event_sensor_PRESENT 4
#define Observable_event_input_event_event_selection_sensor_PRESENT 4
#define Observable_Event_input_event_PRESENT 3
#define Observable_event_selection_input_event_PRESENT 3
#define Observable_Event_output_event_source_actuator 0
#define Observable_Event_output_event_source_egse 1
#define Observable_Event_output_event_source_modemanager 2
#define Observable_Event_output_event_source_sensor 3
#define Observable_Event_output_event_source_env 4
#define Observable_Event_output_event_dest_actuator 0
#define Observable_Event_output_event_dest_egse 1
#define Observable_Event_output_event_dest_modemanager 2
#define Observable_Event_output_event_dest_sensor 3
#define Observable_Event_output_event_dest_env 4
#define Observable_Event_output_event_event_NONE 0
#define Observable_Event_output_event_event_actuator_NONE 0
#define Observable_Event_output_event_event_actuator_msg_in_NONE 0
#define Observable_Event_output_event_event_actuator_msg_in_input_none_PRESENT 1
#define Observable_event_output_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_output_event_event_actuator_msg_in_ctrl_PRESENT 2
#define Observable_event_output_event_event_actuator_msg_in_selection_ctrl_PRESENT 2
#define Observable_Event_output_event_event_actuator_msg_in_PRESENT 1
#define Observable_event_output_event_event_actuator_selection_msg_in_PRESENT 1
#define Observable_Event_output_event_event_actuator_msg_out_NONE 0
#define Observable_Event_output_event_event_actuator_msg_out_feedback_PRESENT 1
#define Observable_event_output_event_event_actuator_msg_out_selection_feedback_PRESENT 1
#define Observable_Event_output_event_event_actuator_msg_out_PRESENT 2
#define Observable_event_output_event_event_actuator_selection_msg_out_PRESENT 2
#define Observable_Event_output_event_event_actuator_PRESENT 1
#define Observable_event_output_event_event_selection_actuator_PRESENT 1
#define Observable_Event_output_event_event_egse_NONE 0
#define Observable_Event_output_event_event_egse_msg_in_NONE 0
#define Observable_Event_output_event_event_egse_msg_in_tm_PRESENT 1
#define Observable_event_output_event_event_egse_msg_in_selection_tm_PRESENT 1
#define Observable_Event_output_event_event_egse_msg_in_PRESENT 1
#define Observable_event_output_event_event_egse_selection_msg_in_PRESENT 1
#define Observable_Event_output_event_event_egse_msg_out_NONE 0
#define Observable_Event_output_event_event_egse_msg_out_tc_PRESENT 1
#define Observable_event_output_event_event_egse_msg_out_selection_tc_PRESENT 1
#define Observable_Event_output_event_event_egse_msg_out_PRESENT 2
#define Observable_event_output_event_event_egse_selection_msg_out_PRESENT 2
#define Observable_Event_output_event_event_egse_PRESENT 2
#define Observable_event_output_event_event_selection_egse_PRESENT 2
#define Observable_Event_output_event_event_modemanager_NONE 0
#define Observable_Event_output_event_event_modemanager_msg_in_NONE 0
#define Observable_Event_output_event_event_modemanager_msg_in_input_none_PRESENT 1
#define Observable_event_output_event_event_modemanager_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_output_event_event_modemanager_msg_in_feedback_PRESENT 2
#define Observable_event_output_event_event_modemanager_msg_in_selection_feedback_PRESENT 2
#define Observable_Event_output_event_event_modemanager_msg_in_reading_PRESENT 3
#define Observable_event_output_event_event_modemanager_msg_in_selection_reading_PRESENT 3
#define Observable_Event_output_event_event_modemanager_msg_in_tc_PRESENT 4
#define Observable_event_output_event_event_modemanager_msg_in_selection_tc_PRESENT 4
#define Observable_Event_output_event_event_modemanager_msg_in_PRESENT 1
#define Observable_event_output_event_event_modemanager_selection_msg_in_PRESENT 1
#define Observable_Event_output_event_event_modemanager_msg_out_NONE 0
#define Observable_Event_output_event_event_modemanager_msg_out_ctrl_PRESENT 1
#define Observable_event_output_event_event_modemanager_msg_out_selection_ctrl_PRESENT 1
#define Observable_Event_output_event_event_modemanager_msg_out_tm_PRESENT 2
#define Observable_event_output_event_event_modemanager_msg_out_selection_tm_PRESENT 2
#define Observable_Event_output_event_event_modemanager_msg_out_PRESENT 2
#define Observable_event_output_event_event_modemanager_selection_msg_out_PRESENT 2
#define Observable_Event_output_event_event_modemanager_PRESENT 3
#define Observable_event_output_event_event_selection_modemanager_PRESENT 3
#define Observable_Event_output_event_event_sensor_NONE 0
#define Observable_Event_output_event_event_sensor_msg_out_NONE 0
#define Observable_Event_output_event_event_sensor_msg_out_reading_PRESENT 1
#define Observable_event_output_event_event_sensor_msg_out_selection_reading_PRESENT 1
#define Observable_Event_output_event_event_sensor_msg_out_PRESENT 1
#define Observable_event_output_event_event_sensor_selection_msg_out_PRESENT 1
#define Observable_Event_output_event_event_sensor_PRESENT 4
#define Observable_event_output_event_event_selection_sensor_PRESENT 4
#define Observable_Event_output_event_PRESENT 4
#define Observable_event_selection_output_event_PRESENT 4
#define Observable_Event_unhandled_input_source_actuator 0
#define Observable_Event_unhandled_input_source_egse 1
#define Observable_Event_unhandled_input_source_modemanager 2
#define Observable_Event_unhandled_input_source_sensor 3
#define Observable_Event_unhandled_input_source_env 4
#define Observable_Event_unhandled_input_dest_actuator 0
#define Observable_Event_unhandled_input_dest_egse 1
#define Observable_Event_unhandled_input_dest_modemanager 2
#define Observable_Event_unhandled_input_dest_sensor 3
#define Observable_Event_unhandled_input_dest_env 4
#define Observable_Event_unhandled_input_event_NONE 0
#define Observable_Event_unhandled_input_event_actuator_NONE 0
#define Observable_Event_unhandled_input_event_actuator_msg_in_NONE 0
#define Observable_Event_unhandled_input_event_actuator_msg_in_input_none_PRESENT 1
#define Observable_event_unhandled_input_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_unhandled_input_event_actuator_msg_in_ctrl_PRESENT 2
#define Observable_event_unhandled_input_event_actuator_msg_in_selection_ctrl_PRESENT 2
#define Observable_Event_unhandled_input_event_actuator_msg_in_PRESENT 1
#define Observable_event_unhandled_input_event_actuator_selection_msg_in_PRESENT 1
#define Observable_Event_unhandled_input_event_actuator_msg_out_NONE 0
#define Observable_Event_unhandled_input_event_actuator_msg_out_feedback_PRESENT 1
#define Observable_event_unhandled_input_event_actuator_msg_out_selection_feedback_PRESENT 1
#define Observable_Event_unhandled_input_event_actuator_msg_out_PRESENT 2
#define Observable_event_unhandled_input_event_actuator_selection_msg_out_PRESENT 2
#define Observable_Event_unhandled_input_event_actuator_PRESENT 1
#define Observable_event_unhandled_input_event_selection_actuator_PRESENT 1
#define Observable_Event_unhandled_input_event_egse_NONE 0
#define Observable_Event_unhandled_input_event_egse_msg_in_NONE 0
#define Observable_Event_unhandled_input_event_egse_msg_in_tm_PRESENT 1
#define Observable_event_unhandled_input_event_egse_msg_in_selection_tm_PRESENT 1
#define Observable_Event_unhandled_input_event_egse_msg_in_PRESENT 1
#define Observable_event_unhandled_input_event_egse_selection_msg_in_PRESENT 1
#define Observable_Event_unhandled_input_event_egse_msg_out_NONE 0
#define Observable_Event_unhandled_input_event_egse_msg_out_tc_PRESENT 1
#define Observable_event_unhandled_input_event_egse_msg_out_selection_tc_PRESENT 1
#define Observable_Event_unhandled_input_event_egse_msg_out_PRESENT 2
#define Observable_event_unhandled_input_event_egse_selection_msg_out_PRESENT 2
#define Observable_Event_unhandled_input_event_egse_PRESENT 2
#define Observable_event_unhandled_input_event_selection_egse_PRESENT 2
#define Observable_Event_unhandled_input_event_modemanager_NONE 0
#define Observable_Event_unhandled_input_event_modemanager_msg_in_NONE 0
#define Observable_Event_unhandled_input_event_modemanager_msg_in_input_none_PRESENT 1
#define Observable_event_unhandled_input_event_modemanager_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_unhandled_input_event_modemanager_msg_in_feedback_PRESENT 2
#define Observable_event_unhandled_input_event_modemanager_msg_in_selection_feedback_PRESENT 2
#define Observable_Event_unhandled_input_event_modemanager_msg_in_reading_PRESENT 3
#define Observable_event_unhandled_input_event_modemanager_msg_in_selection_reading_PRESENT 3
#define Observable_Event_unhandled_input_event_modemanager_msg_in_tc_PRESENT 4
#define Observable_event_unhandled_input_event_modemanager_msg_in_selection_tc_PRESENT 4
#define Observable_Event_unhandled_input_event_modemanager_msg_in_PRESENT 1
#define Observable_event_unhandled_input_event_modemanager_selection_msg_in_PRESENT 1
#define Observable_Event_unhandled_input_event_modemanager_msg_out_NONE 0
#define Observable_Event_unhandled_input_event_modemanager_msg_out_ctrl_PRESENT 1
#define Observable_event_unhandled_input_event_modemanager_msg_out_selection_ctrl_PRESENT 1
#define Observable_Event_unhandled_input_event_modemanager_msg_out_tm_PRESENT 2
#define Observable_event_unhandled_input_event_modemanager_msg_out_selection_tm_PRESENT 2
#define Observable_Event_unhandled_input_event_modemanager_msg_out_PRESENT 2
#define Observable_event_unhandled_input_event_modemanager_selection_msg_out_PRESENT 2
#define Observable_Event_unhandled_input_event_modemanager_PRESENT 3
#define Observable_event_unhandled_input_event_selection_modemanager_PRESENT 3
#define Observable_Event_unhandled_input_event_sensor_NONE 0
#define Observable_Event_unhandled_input_event_sensor_msg_out_NONE 0
#define Observable_Event_unhandled_input_event_sensor_msg_out_reading_PRESENT 1
#define Observable_event_unhandled_input_event_sensor_msg_out_selection_reading_PRESENT 1
#define Observable_Event_unhandled_input_event_sensor_msg_out_PRESENT 1
#define Observable_event_unhandled_input_event_sensor_selection_msg_out_PRESENT 1
#define Observable_Event_unhandled_input_event_sensor_PRESENT 4
#define Observable_event_unhandled_input_event_selection_sensor_PRESENT 4
#define Observable_Event_unhandled_input_PRESENT 5
#define Observable_event_selection_unhandled_input_PRESENT 5
#define Events_Ty_elem_NONE 0
#define Events_Ty_elem_no_event_PRESENT 1
#define Events_ty_elem_selection_no_event_PRESENT 1
#define Events_Ty_elem_system_startup_PRESENT 2
#define Events_ty_elem_selection_system_startup_PRESENT 2
#define Events_Ty_elem_input_event_source_actuator 0
#define Events_Ty_elem_input_event_source_egse 1
#define Events_Ty_elem_input_event_source_modemanager 2
#define Events_Ty_elem_input_event_source_sensor 3
#define Events_Ty_elem_input_event_source_env 4
#define Events_Ty_elem_input_event_dest_actuator 0
#define Events_Ty_elem_input_event_dest_egse 1
#define Events_Ty_elem_input_event_dest_modemanager 2
#define Events_Ty_elem_input_event_dest_sensor 3
#define Events_Ty_elem_input_event_dest_env 4
#define Events_Ty_elem_input_event_event_NONE 0
#define Events_Ty_elem_input_event_event_actuator_NONE 0
#define Events_Ty_elem_input_event_event_actuator_msg_in_NONE 0
#define Events_Ty_elem_input_event_event_actuator_msg_in_input_none_PRESENT 1
#define Events_ty_elem_input_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_input_event_event_actuator_msg_in_ctrl_PRESENT 2
#define Events_ty_elem_input_event_event_actuator_msg_in_selection_ctrl_PRESENT 2
#define Events_Ty_elem_input_event_event_actuator_msg_in_PRESENT 1
#define Events_ty_elem_input_event_event_actuator_selection_msg_in_PRESENT 1
#define Events_Ty_elem_input_event_event_actuator_msg_out_NONE 0
#define Events_Ty_elem_input_event_event_actuator_msg_out_feedback_PRESENT 1
#define Events_ty_elem_input_event_event_actuator_msg_out_selection_feedback_PRESENT 1
#define Events_Ty_elem_input_event_event_actuator_msg_out_PRESENT 2
#define Events_ty_elem_input_event_event_actuator_selection_msg_out_PRESENT 2
#define Events_Ty_elem_input_event_event_actuator_PRESENT 1
#define Events_ty_elem_input_event_event_selection_actuator_PRESENT 1
#define Events_Ty_elem_input_event_event_egse_NONE 0
#define Events_Ty_elem_input_event_event_egse_msg_in_NONE 0
#define Events_Ty_elem_input_event_event_egse_msg_in_tm_PRESENT 1
#define Events_ty_elem_input_event_event_egse_msg_in_selection_tm_PRESENT 1
#define Events_Ty_elem_input_event_event_egse_msg_in_PRESENT 1
#define Events_ty_elem_input_event_event_egse_selection_msg_in_PRESENT 1
#define Events_Ty_elem_input_event_event_egse_msg_out_NONE 0
#define Events_Ty_elem_input_event_event_egse_msg_out_tc_PRESENT 1
#define Events_ty_elem_input_event_event_egse_msg_out_selection_tc_PRESENT 1
#define Events_Ty_elem_input_event_event_egse_msg_out_PRESENT 2
#define Events_ty_elem_input_event_event_egse_selection_msg_out_PRESENT 2
#define Events_Ty_elem_input_event_event_egse_PRESENT 2
#define Events_ty_elem_input_event_event_selection_egse_PRESENT 2
#define Events_Ty_elem_input_event_event_modemanager_NONE 0
#define Events_Ty_elem_input_event_event_modemanager_msg_in_NONE 0
#define Events_Ty_elem_input_event_event_modemanager_msg_in_input_none_PRESENT 1
#define Events_ty_elem_input_event_event_modemanager_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_input_event_event_modemanager_msg_in_feedback_PRESENT 2
#define Events_ty_elem_input_event_event_modemanager_msg_in_selection_feedback_PRESENT 2
#define Events_Ty_elem_input_event_event_modemanager_msg_in_reading_PRESENT 3
#define Events_ty_elem_input_event_event_modemanager_msg_in_selection_reading_PRESENT 3
#define Events_Ty_elem_input_event_event_modemanager_msg_in_tc_PRESENT 4
#define Events_ty_elem_input_event_event_modemanager_msg_in_selection_tc_PRESENT 4
#define Events_Ty_elem_input_event_event_modemanager_msg_in_PRESENT 1
#define Events_ty_elem_input_event_event_modemanager_selection_msg_in_PRESENT 1
#define Events_Ty_elem_input_event_event_modemanager_msg_out_NONE 0
#define Events_Ty_elem_input_event_event_modemanager_msg_out_ctrl_PRESENT 1
#define Events_ty_elem_input_event_event_modemanager_msg_out_selection_ctrl_PRESENT 1
#define Events_Ty_elem_input_event_event_modemanager_msg_out_tm_PRESENT 2
#define Events_ty_elem_input_event_event_modemanager_msg_out_selection_tm_PRESENT 2
#define Events_Ty_elem_input_event_event_modemanager_msg_out_PRESENT 2
#define Events_ty_elem_input_event_event_modemanager_selection_msg_out_PRESENT 2
#define Events_Ty_elem_input_event_event_modemanager_PRESENT 3
#define Events_ty_elem_input_event_event_selection_modemanager_PRESENT 3
#define Events_Ty_elem_input_event_event_sensor_NONE 0
#define Events_Ty_elem_input_event_event_sensor_msg_out_NONE 0
#define Events_Ty_elem_input_event_event_sensor_msg_out_reading_PRESENT 1
#define Events_ty_elem_input_event_event_sensor_msg_out_selection_reading_PRESENT 1
#define Events_Ty_elem_input_event_event_sensor_msg_out_PRESENT 1
#define Events_ty_elem_input_event_event_sensor_selection_msg_out_PRESENT 1
#define Events_Ty_elem_input_event_event_sensor_PRESENT 4
#define Events_ty_elem_input_event_event_selection_sensor_PRESENT 4
#define Events_Ty_elem_input_event_PRESENT 3
#define Events_ty_elem_selection_input_event_PRESENT 3
#define Events_Ty_elem_output_event_source_actuator 0
#define Events_Ty_elem_output_event_source_egse 1
#define Events_Ty_elem_output_event_source_modemanager 2
#define Events_Ty_elem_output_event_source_sensor 3
#define Events_Ty_elem_output_event_source_env 4
#define Events_Ty_elem_output_event_dest_actuator 0
#define Events_Ty_elem_output_event_dest_egse 1
#define Events_Ty_elem_output_event_dest_modemanager 2
#define Events_Ty_elem_output_event_dest_sensor 3
#define Events_Ty_elem_output_event_dest_env 4
#define Events_Ty_elem_output_event_event_NONE 0
#define Events_Ty_elem_output_event_event_actuator_NONE 0
#define Events_Ty_elem_output_event_event_actuator_msg_in_NONE 0
#define Events_Ty_elem_output_event_event_actuator_msg_in_input_none_PRESENT 1
#define Events_ty_elem_output_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_output_event_event_actuator_msg_in_ctrl_PRESENT 2
#define Events_ty_elem_output_event_event_actuator_msg_in_selection_ctrl_PRESENT 2
#define Events_Ty_elem_output_event_event_actuator_msg_in_PRESENT 1
#define Events_ty_elem_output_event_event_actuator_selection_msg_in_PRESENT 1
#define Events_Ty_elem_output_event_event_actuator_msg_out_NONE 0
#define Events_Ty_elem_output_event_event_actuator_msg_out_feedback_PRESENT 1
#define Events_ty_elem_output_event_event_actuator_msg_out_selection_feedback_PRESENT 1
#define Events_Ty_elem_output_event_event_actuator_msg_out_PRESENT 2
#define Events_ty_elem_output_event_event_actuator_selection_msg_out_PRESENT 2
#define Events_Ty_elem_output_event_event_actuator_PRESENT 1
#define Events_ty_elem_output_event_event_selection_actuator_PRESENT 1
#define Events_Ty_elem_output_event_event_egse_NONE 0
#define Events_Ty_elem_output_event_event_egse_msg_in_NONE 0
#define Events_Ty_elem_output_event_event_egse_msg_in_tm_PRESENT 1
#define Events_ty_elem_output_event_event_egse_msg_in_selection_tm_PRESENT 1
#define Events_Ty_elem_output_event_event_egse_msg_in_PRESENT 1
#define Events_ty_elem_output_event_event_egse_selection_msg_in_PRESENT 1
#define Events_Ty_elem_output_event_event_egse_msg_out_NONE 0
#define Events_Ty_elem_output_event_event_egse_msg_out_tc_PRESENT 1
#define Events_ty_elem_output_event_event_egse_msg_out_selection_tc_PRESENT 1
#define Events_Ty_elem_output_event_event_egse_msg_out_PRESENT 2
#define Events_ty_elem_output_event_event_egse_selection_msg_out_PRESENT 2
#define Events_Ty_elem_output_event_event_egse_PRESENT 2
#define Events_ty_elem_output_event_event_selection_egse_PRESENT 2
#define Events_Ty_elem_output_event_event_modemanager_NONE 0
#define Events_Ty_elem_output_event_event_modemanager_msg_in_NONE 0
#define Events_Ty_elem_output_event_event_modemanager_msg_in_input_none_PRESENT 1
#define Events_ty_elem_output_event_event_modemanager_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_output_event_event_modemanager_msg_in_feedback_PRESENT 2
#define Events_ty_elem_output_event_event_modemanager_msg_in_selection_feedback_PRESENT 2
#define Events_Ty_elem_output_event_event_modemanager_msg_in_reading_PRESENT 3
#define Events_ty_elem_output_event_event_modemanager_msg_in_selection_reading_PRESENT 3
#define Events_Ty_elem_output_event_event_modemanager_msg_in_tc_PRESENT 4
#define Events_ty_elem_output_event_event_modemanager_msg_in_selection_tc_PRESENT 4
#define Events_Ty_elem_output_event_event_modemanager_msg_in_PRESENT 1
#define Events_ty_elem_output_event_event_modemanager_selection_msg_in_PRESENT 1
#define Events_Ty_elem_output_event_event_modemanager_msg_out_NONE 0
#define Events_Ty_elem_output_event_event_modemanager_msg_out_ctrl_PRESENT 1
#define Events_ty_elem_output_event_event_modemanager_msg_out_selection_ctrl_PRESENT 1
#define Events_Ty_elem_output_event_event_modemanager_msg_out_tm_PRESENT 2
#define Events_ty_elem_output_event_event_modemanager_msg_out_selection_tm_PRESENT 2
#define Events_Ty_elem_output_event_event_modemanager_msg_out_PRESENT 2
#define Events_ty_elem_output_event_event_modemanager_selection_msg_out_PRESENT 2
#define Events_Ty_elem_output_event_event_modemanager_PRESENT 3
#define Events_ty_elem_output_event_event_selection_modemanager_PRESENT 3
#define Events_Ty_elem_output_event_event_sensor_NONE 0
#define Events_Ty_elem_output_event_event_sensor_msg_out_NONE 0
#define Events_Ty_elem_output_event_event_sensor_msg_out_reading_PRESENT 1
#define Events_ty_elem_output_event_event_sensor_msg_out_selection_reading_PRESENT 1
#define Events_Ty_elem_output_event_event_sensor_msg_out_PRESENT 1
#define Events_ty_elem_output_event_event_sensor_selection_msg_out_PRESENT 1
#define Events_Ty_elem_output_event_event_sensor_PRESENT 4
#define Events_ty_elem_output_event_event_selection_sensor_PRESENT 4
#define Events_Ty_elem_output_event_PRESENT 4
#define Events_ty_elem_selection_output_event_PRESENT 4
#define Events_Ty_elem_unhandled_input_source_actuator 0
#define Events_Ty_elem_unhandled_input_source_egse 1
#define Events_Ty_elem_unhandled_input_source_modemanager 2
#define Events_Ty_elem_unhandled_input_source_sensor 3
#define Events_Ty_elem_unhandled_input_source_env 4
#define Events_Ty_elem_unhandled_input_dest_actuator 0
#define Events_Ty_elem_unhandled_input_dest_egse 1
#define Events_Ty_elem_unhandled_input_dest_modemanager 2
#define Events_Ty_elem_unhandled_input_dest_sensor 3
#define Events_Ty_elem_unhandled_input_dest_env 4
#define Events_Ty_elem_unhandled_input_event_NONE 0
#define Events_Ty_elem_unhandled_input_event_actuator_NONE 0
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_NONE 0
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT 1
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_ctrl_PRESENT 2
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_ctrl_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_PRESENT 1
#define Events_ty_elem_unhandled_input_event_actuator_selection_msg_in_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_actuator_msg_out_NONE 0
#define Events_Ty_elem_unhandled_input_event_actuator_msg_out_feedback_PRESENT 1
#define Events_ty_elem_unhandled_input_event_actuator_msg_out_selection_feedback_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_actuator_msg_out_PRESENT 2
#define Events_ty_elem_unhandled_input_event_actuator_selection_msg_out_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_actuator_PRESENT 1
#define Events_ty_elem_unhandled_input_event_selection_actuator_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_egse_NONE 0
#define Events_Ty_elem_unhandled_input_event_egse_msg_in_NONE 0
#define Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_PRESENT 1
#define Events_ty_elem_unhandled_input_event_egse_msg_in_selection_tm_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_egse_msg_in_PRESENT 1
#define Events_ty_elem_unhandled_input_event_egse_selection_msg_in_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_egse_msg_out_NONE 0
#define Events_Ty_elem_unhandled_input_event_egse_msg_out_tc_PRESENT 1
#define Events_ty_elem_unhandled_input_event_egse_msg_out_selection_tc_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_egse_msg_out_PRESENT 2
#define Events_ty_elem_unhandled_input_event_egse_selection_msg_out_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_egse_PRESENT 2
#define Events_ty_elem_unhandled_input_event_selection_egse_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_modemanager_NONE 0
#define Events_Ty_elem_unhandled_input_event_modemanager_msg_in_NONE 0
#define Events_Ty_elem_unhandled_input_event_modemanager_msg_in_input_none_PRESENT 1
#define Events_ty_elem_unhandled_input_event_modemanager_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_modemanager_msg_in_feedback_PRESENT 2
#define Events_ty_elem_unhandled_input_event_modemanager_msg_in_selection_feedback_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_modemanager_msg_in_reading_PRESENT 3
#define Events_ty_elem_unhandled_input_event_modemanager_msg_in_selection_reading_PRESENT 3
#define Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc_PRESENT 4
#define Events_ty_elem_unhandled_input_event_modemanager_msg_in_selection_tc_PRESENT 4
#define Events_Ty_elem_unhandled_input_event_modemanager_msg_in_PRESENT 1
#define Events_ty_elem_unhandled_input_event_modemanager_selection_msg_in_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_modemanager_msg_out_NONE 0
#define Events_Ty_elem_unhandled_input_event_modemanager_msg_out_ctrl_PRESENT 1
#define Events_ty_elem_unhandled_input_event_modemanager_msg_out_selection_ctrl_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_PRESENT 2
#define Events_ty_elem_unhandled_input_event_modemanager_msg_out_selection_tm_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_modemanager_msg_out_PRESENT 2
#define Events_ty_elem_unhandled_input_event_modemanager_selection_msg_out_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_modemanager_PRESENT 3
#define Events_ty_elem_unhandled_input_event_selection_modemanager_PRESENT 3
#define Events_Ty_elem_unhandled_input_event_sensor_NONE 0
#define Events_Ty_elem_unhandled_input_event_sensor_msg_out_NONE 0
#define Events_Ty_elem_unhandled_input_event_sensor_msg_out_reading_PRESENT 1
#define Events_ty_elem_unhandled_input_event_sensor_msg_out_selection_reading_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_sensor_msg_out_PRESENT 1
#define Events_ty_elem_unhandled_input_event_sensor_selection_msg_out_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_sensor_PRESENT 4
#define Events_ty_elem_unhandled_input_event_selection_sensor_PRESENT 4
#define Events_Ty_elem_unhandled_input_PRESENT 5
#define Events_ty_elem_selection_unhandled_input_PRESENT 5
#define System_State_actuator_queue_elem_NONE 0
#define System_State_actuator_queue_elem_no_event_PRESENT 1
#define System_state_actuator_queue_elem_selection_no_event_PRESENT 1
#define System_State_actuator_queue_elem_system_startup_PRESENT 2
#define System_state_actuator_queue_elem_selection_system_startup_PRESENT 2
#define System_State_actuator_queue_elem_input_event_source_actuator 0
#define System_State_actuator_queue_elem_input_event_source_egse 1
#define System_State_actuator_queue_elem_input_event_source_modemanager 2
#define System_State_actuator_queue_elem_input_event_source_sensor 3
#define System_State_actuator_queue_elem_input_event_source_env 4
#define System_State_actuator_queue_elem_input_event_dest_actuator 0
#define System_State_actuator_queue_elem_input_event_dest_egse 1
#define System_State_actuator_queue_elem_input_event_dest_modemanager 2
#define System_State_actuator_queue_elem_input_event_dest_sensor 3
#define System_State_actuator_queue_elem_input_event_dest_env 4
#define System_State_actuator_queue_elem_input_event_event_NONE 0
#define System_State_actuator_queue_elem_input_event_event_actuator_NONE 0
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_NONE 0
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ctrl_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_ctrl_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_actuator_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_out_NONE 0
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_out_feedback_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_out_selection_feedback_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_actuator_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_actuator_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_selection_actuator_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_egse_NONE 0
#define System_State_actuator_queue_elem_input_event_event_egse_msg_in_NONE 0
#define System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_egse_msg_in_selection_tm_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_egse_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_egse_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_egse_msg_out_NONE 0
#define System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_egse_msg_out_selection_tc_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_egse_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_egse_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_egse_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_selection_egse_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_modemanager_NONE 0
#define System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_NONE 0
#define System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_modemanager_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_feedback_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_modemanager_msg_in_selection_feedback_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_reading_PRESENT 3
#define System_state_actuator_queue_elem_input_event_event_modemanager_msg_in_selection_reading_PRESENT 3
#define System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc_PRESENT 4
#define System_state_actuator_queue_elem_input_event_event_modemanager_msg_in_selection_tc_PRESENT 4
#define System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_modemanager_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_NONE 0
#define System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_ctrl_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_modemanager_msg_out_selection_ctrl_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_modemanager_msg_out_selection_tm_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_modemanager_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_modemanager_PRESENT 3
#define System_state_actuator_queue_elem_input_event_event_selection_modemanager_PRESENT 3
#define System_State_actuator_queue_elem_input_event_event_sensor_NONE 0
#define System_State_actuator_queue_elem_input_event_event_sensor_msg_out_NONE 0
#define System_State_actuator_queue_elem_input_event_event_sensor_msg_out_reading_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_sensor_msg_out_selection_reading_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_sensor_msg_out_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_sensor_selection_msg_out_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_sensor_PRESENT 4
#define System_state_actuator_queue_elem_input_event_event_selection_sensor_PRESENT 4
#define System_State_actuator_queue_elem_input_event_PRESENT 3
#define System_state_actuator_queue_elem_selection_input_event_PRESENT 3
#define System_State_actuator_queue_elem_output_event_source_actuator 0
#define System_State_actuator_queue_elem_output_event_source_egse 1
#define System_State_actuator_queue_elem_output_event_source_modemanager 2
#define System_State_actuator_queue_elem_output_event_source_sensor 3
#define System_State_actuator_queue_elem_output_event_source_env 4
#define System_State_actuator_queue_elem_output_event_dest_actuator 0
#define System_State_actuator_queue_elem_output_event_dest_egse 1
#define System_State_actuator_queue_elem_output_event_dest_modemanager 2
#define System_State_actuator_queue_elem_output_event_dest_sensor 3
#define System_State_actuator_queue_elem_output_event_dest_env 4
#define System_State_actuator_queue_elem_output_event_event_NONE 0
#define System_State_actuator_queue_elem_output_event_event_actuator_NONE 0
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_NONE 0
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ctrl_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_ctrl_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_actuator_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_out_NONE 0
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_out_feedback_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_out_selection_feedback_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_actuator_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_actuator_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_selection_actuator_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_egse_NONE 0
#define System_State_actuator_queue_elem_output_event_event_egse_msg_in_NONE 0
#define System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_egse_msg_in_selection_tm_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_egse_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_egse_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_egse_msg_out_NONE 0
#define System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_egse_msg_out_selection_tc_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_egse_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_egse_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_egse_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_selection_egse_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_modemanager_NONE 0
#define System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_NONE 0
#define System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_modemanager_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_feedback_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_modemanager_msg_in_selection_feedback_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_reading_PRESENT 3
#define System_state_actuator_queue_elem_output_event_event_modemanager_msg_in_selection_reading_PRESENT 3
#define System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc_PRESENT 4
#define System_state_actuator_queue_elem_output_event_event_modemanager_msg_in_selection_tc_PRESENT 4
#define System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_modemanager_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_NONE 0
#define System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_ctrl_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_modemanager_msg_out_selection_ctrl_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_modemanager_msg_out_selection_tm_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_modemanager_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_modemanager_PRESENT 3
#define System_state_actuator_queue_elem_output_event_event_selection_modemanager_PRESENT 3
#define System_State_actuator_queue_elem_output_event_event_sensor_NONE 0
#define System_State_actuator_queue_elem_output_event_event_sensor_msg_out_NONE 0
#define System_State_actuator_queue_elem_output_event_event_sensor_msg_out_reading_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_sensor_msg_out_selection_reading_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_sensor_msg_out_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_sensor_selection_msg_out_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_sensor_PRESENT 4
#define System_state_actuator_queue_elem_output_event_event_selection_sensor_PRESENT 4
#define System_State_actuator_queue_elem_output_event_PRESENT 4
#define System_state_actuator_queue_elem_selection_output_event_PRESENT 4
#define System_State_actuator_queue_elem_unhandled_input_source_actuator 0
#define System_State_actuator_queue_elem_unhandled_input_source_egse 1
#define System_State_actuator_queue_elem_unhandled_input_source_modemanager 2
#define System_State_actuator_queue_elem_unhandled_input_source_sensor 3
#define System_State_actuator_queue_elem_unhandled_input_source_env 4
#define System_State_actuator_queue_elem_unhandled_input_dest_actuator 0
#define System_State_actuator_queue_elem_unhandled_input_dest_egse 1
#define System_State_actuator_queue_elem_unhandled_input_dest_modemanager 2
#define System_State_actuator_queue_elem_unhandled_input_dest_sensor 3
#define System_State_actuator_queue_elem_unhandled_input_dest_env 4
#define System_State_actuator_queue_elem_unhandled_input_event_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ctrl_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_ctrl_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_feedback_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_out_selection_feedback_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_selection_actuator_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_egse_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_egse_msg_in_selection_tm_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_egse_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_egse_msg_out_selection_tc_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_egse_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_egse_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_selection_egse_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_modemanager_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_feedback_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_selection_feedback_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_reading_PRESENT 3
#define System_state_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_selection_reading_PRESENT 3
#define System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc_PRESENT 4
#define System_state_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_selection_tc_PRESENT 4
#define System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_modemanager_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_selection_ctrl_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_selection_tm_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_modemanager_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_modemanager_PRESENT 3
#define System_state_actuator_queue_elem_unhandled_input_event_selection_modemanager_PRESENT 3
#define System_State_actuator_queue_elem_unhandled_input_event_sensor_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_sensor_msg_out_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_sensor_msg_out_reading_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_sensor_msg_out_selection_reading_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_sensor_msg_out_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_sensor_selection_msg_out_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_sensor_PRESENT 4
#define System_state_actuator_queue_elem_unhandled_input_event_selection_sensor_PRESENT 4
#define System_State_actuator_queue_elem_unhandled_input_PRESENT 5
#define System_state_actuator_queue_elem_selection_unhandled_input_PRESENT 5
#define System_State_modemanager_queue_elem_NONE 0
#define System_State_modemanager_queue_elem_no_event_PRESENT 1
#define System_state_modemanager_queue_elem_selection_no_event_PRESENT 1
#define System_State_modemanager_queue_elem_system_startup_PRESENT 2
#define System_state_modemanager_queue_elem_selection_system_startup_PRESENT 2
#define System_State_modemanager_queue_elem_input_event_source_actuator 0
#define System_State_modemanager_queue_elem_input_event_source_egse 1
#define System_State_modemanager_queue_elem_input_event_source_modemanager 2
#define System_State_modemanager_queue_elem_input_event_source_sensor 3
#define System_State_modemanager_queue_elem_input_event_source_env 4
#define System_State_modemanager_queue_elem_input_event_dest_actuator 0
#define System_State_modemanager_queue_elem_input_event_dest_egse 1
#define System_State_modemanager_queue_elem_input_event_dest_modemanager 2
#define System_State_modemanager_queue_elem_input_event_dest_sensor 3
#define System_State_modemanager_queue_elem_input_event_dest_env 4
#define System_State_modemanager_queue_elem_input_event_event_NONE 0
#define System_State_modemanager_queue_elem_input_event_event_actuator_NONE 0
#define System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_NONE 0
#define System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_modemanager_queue_elem_input_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_ctrl_PRESENT 2
#define System_state_modemanager_queue_elem_input_event_event_actuator_msg_in_selection_ctrl_PRESENT 2
#define System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_PRESENT 1
#define System_state_modemanager_queue_elem_input_event_event_actuator_selection_msg_in_PRESENT 1
#define System_State_modemanager_queue_elem_input_event_event_actuator_msg_out_NONE 0
#define System_State_modemanager_queue_elem_input_event_event_actuator_msg_out_feedback_PRESENT 1
#define System_state_modemanager_queue_elem_input_event_event_actuator_msg_out_selection_feedback_PRESENT 1
#define System_State_modemanager_queue_elem_input_event_event_actuator_msg_out_PRESENT 2
#define System_state_modemanager_queue_elem_input_event_event_actuator_selection_msg_out_PRESENT 2
#define System_State_modemanager_queue_elem_input_event_event_actuator_PRESENT 1
#define System_state_modemanager_queue_elem_input_event_event_selection_actuator_PRESENT 1
#define System_State_modemanager_queue_elem_input_event_event_egse_NONE 0
#define System_State_modemanager_queue_elem_input_event_event_egse_msg_in_NONE 0
#define System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_PRESENT 1
#define System_state_modemanager_queue_elem_input_event_event_egse_msg_in_selection_tm_PRESENT 1
#define System_State_modemanager_queue_elem_input_event_event_egse_msg_in_PRESENT 1
#define System_state_modemanager_queue_elem_input_event_event_egse_selection_msg_in_PRESENT 1
#define System_State_modemanager_queue_elem_input_event_event_egse_msg_out_NONE 0
#define System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc_PRESENT 1
#define System_state_modemanager_queue_elem_input_event_event_egse_msg_out_selection_tc_PRESENT 1
#define System_State_modemanager_queue_elem_input_event_event_egse_msg_out_PRESENT 2
#define System_state_modemanager_queue_elem_input_event_event_egse_selection_msg_out_PRESENT 2
#define System_State_modemanager_queue_elem_input_event_event_egse_PRESENT 2
#define System_state_modemanager_queue_elem_input_event_event_selection_egse_PRESENT 2
#define System_State_modemanager_queue_elem_input_event_event_modemanager_NONE 0
#define System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_NONE 0
#define System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_input_none_PRESENT 1
#define System_state_modemanager_queue_elem_input_event_event_modemanager_msg_in_selection_input_none_PRESENT 1
#define System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_feedback_PRESENT 2
#define System_state_modemanager_queue_elem_input_event_event_modemanager_msg_in_selection_feedback_PRESENT 2
#define System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_reading_PRESENT 3
#define System_state_modemanager_queue_elem_input_event_event_modemanager_msg_in_selection_reading_PRESENT 3
#define System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc_PRESENT 4
#define System_state_modemanager_queue_elem_input_event_event_modemanager_msg_in_selection_tc_PRESENT 4
#define System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_PRESENT 1
#define System_state_modemanager_queue_elem_input_event_event_modemanager_selection_msg_in_PRESENT 1
#define System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_NONE 0
#define System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_ctrl_PRESENT 1
#define System_state_modemanager_queue_elem_input_event_event_modemanager_msg_out_selection_ctrl_PRESENT 1
#define System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_PRESENT 2
#define System_state_modemanager_queue_elem_input_event_event_modemanager_msg_out_selection_tm_PRESENT 2
#define System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_PRESENT 2
#define System_state_modemanager_queue_elem_input_event_event_modemanager_selection_msg_out_PRESENT 2
#define System_State_modemanager_queue_elem_input_event_event_modemanager_PRESENT 3
#define System_state_modemanager_queue_elem_input_event_event_selection_modemanager_PRESENT 3
#define System_State_modemanager_queue_elem_input_event_event_sensor_NONE 0
#define System_State_modemanager_queue_elem_input_event_event_sensor_msg_out_NONE 0
#define System_State_modemanager_queue_elem_input_event_event_sensor_msg_out_reading_PRESENT 1
#define System_state_modemanager_queue_elem_input_event_event_sensor_msg_out_selection_reading_PRESENT 1
#define System_State_modemanager_queue_elem_input_event_event_sensor_msg_out_PRESENT 1
#define System_state_modemanager_queue_elem_input_event_event_sensor_selection_msg_out_PRESENT 1
#define System_State_modemanager_queue_elem_input_event_event_sensor_PRESENT 4
#define System_state_modemanager_queue_elem_input_event_event_selection_sensor_PRESENT 4
#define System_State_modemanager_queue_elem_input_event_PRESENT 3
#define System_state_modemanager_queue_elem_selection_input_event_PRESENT 3
#define System_State_modemanager_queue_elem_output_event_source_actuator 0
#define System_State_modemanager_queue_elem_output_event_source_egse 1
#define System_State_modemanager_queue_elem_output_event_source_modemanager 2
#define System_State_modemanager_queue_elem_output_event_source_sensor 3
#define System_State_modemanager_queue_elem_output_event_source_env 4
#define System_State_modemanager_queue_elem_output_event_dest_actuator 0
#define System_State_modemanager_queue_elem_output_event_dest_egse 1
#define System_State_modemanager_queue_elem_output_event_dest_modemanager 2
#define System_State_modemanager_queue_elem_output_event_dest_sensor 3
#define System_State_modemanager_queue_elem_output_event_dest_env 4
#define System_State_modemanager_queue_elem_output_event_event_NONE 0
#define System_State_modemanager_queue_elem_output_event_event_actuator_NONE 0
#define System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_NONE 0
#define System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_modemanager_queue_elem_output_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_ctrl_PRESENT 2
#define System_state_modemanager_queue_elem_output_event_event_actuator_msg_in_selection_ctrl_PRESENT 2
#define System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_PRESENT 1
#define System_state_modemanager_queue_elem_output_event_event_actuator_selection_msg_in_PRESENT 1
#define System_State_modemanager_queue_elem_output_event_event_actuator_msg_out_NONE 0
#define System_State_modemanager_queue_elem_output_event_event_actuator_msg_out_feedback_PRESENT 1
#define System_state_modemanager_queue_elem_output_event_event_actuator_msg_out_selection_feedback_PRESENT 1
#define System_State_modemanager_queue_elem_output_event_event_actuator_msg_out_PRESENT 2
#define System_state_modemanager_queue_elem_output_event_event_actuator_selection_msg_out_PRESENT 2
#define System_State_modemanager_queue_elem_output_event_event_actuator_PRESENT 1
#define System_state_modemanager_queue_elem_output_event_event_selection_actuator_PRESENT 1
#define System_State_modemanager_queue_elem_output_event_event_egse_NONE 0
#define System_State_modemanager_queue_elem_output_event_event_egse_msg_in_NONE 0
#define System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_PRESENT 1
#define System_state_modemanager_queue_elem_output_event_event_egse_msg_in_selection_tm_PRESENT 1
#define System_State_modemanager_queue_elem_output_event_event_egse_msg_in_PRESENT 1
#define System_state_modemanager_queue_elem_output_event_event_egse_selection_msg_in_PRESENT 1
#define System_State_modemanager_queue_elem_output_event_event_egse_msg_out_NONE 0
#define System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc_PRESENT 1
#define System_state_modemanager_queue_elem_output_event_event_egse_msg_out_selection_tc_PRESENT 1
#define System_State_modemanager_queue_elem_output_event_event_egse_msg_out_PRESENT 2
#define System_state_modemanager_queue_elem_output_event_event_egse_selection_msg_out_PRESENT 2
#define System_State_modemanager_queue_elem_output_event_event_egse_PRESENT 2
#define System_state_modemanager_queue_elem_output_event_event_selection_egse_PRESENT 2
#define System_State_modemanager_queue_elem_output_event_event_modemanager_NONE 0
#define System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_NONE 0
#define System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_input_none_PRESENT 1
#define System_state_modemanager_queue_elem_output_event_event_modemanager_msg_in_selection_input_none_PRESENT 1
#define System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_feedback_PRESENT 2
#define System_state_modemanager_queue_elem_output_event_event_modemanager_msg_in_selection_feedback_PRESENT 2
#define System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_reading_PRESENT 3
#define System_state_modemanager_queue_elem_output_event_event_modemanager_msg_in_selection_reading_PRESENT 3
#define System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc_PRESENT 4
#define System_state_modemanager_queue_elem_output_event_event_modemanager_msg_in_selection_tc_PRESENT 4
#define System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_PRESENT 1
#define System_state_modemanager_queue_elem_output_event_event_modemanager_selection_msg_in_PRESENT 1
#define System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_NONE 0
#define System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_ctrl_PRESENT 1
#define System_state_modemanager_queue_elem_output_event_event_modemanager_msg_out_selection_ctrl_PRESENT 1
#define System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_PRESENT 2
#define System_state_modemanager_queue_elem_output_event_event_modemanager_msg_out_selection_tm_PRESENT 2
#define System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_PRESENT 2
#define System_state_modemanager_queue_elem_output_event_event_modemanager_selection_msg_out_PRESENT 2
#define System_State_modemanager_queue_elem_output_event_event_modemanager_PRESENT 3
#define System_state_modemanager_queue_elem_output_event_event_selection_modemanager_PRESENT 3
#define System_State_modemanager_queue_elem_output_event_event_sensor_NONE 0
#define System_State_modemanager_queue_elem_output_event_event_sensor_msg_out_NONE 0
#define System_State_modemanager_queue_elem_output_event_event_sensor_msg_out_reading_PRESENT 1
#define System_state_modemanager_queue_elem_output_event_event_sensor_msg_out_selection_reading_PRESENT 1
#define System_State_modemanager_queue_elem_output_event_event_sensor_msg_out_PRESENT 1
#define System_state_modemanager_queue_elem_output_event_event_sensor_selection_msg_out_PRESENT 1
#define System_State_modemanager_queue_elem_output_event_event_sensor_PRESENT 4
#define System_state_modemanager_queue_elem_output_event_event_selection_sensor_PRESENT 4
#define System_State_modemanager_queue_elem_output_event_PRESENT 4
#define System_state_modemanager_queue_elem_selection_output_event_PRESENT 4
#define System_State_modemanager_queue_elem_unhandled_input_source_actuator 0
#define System_State_modemanager_queue_elem_unhandled_input_source_egse 1
#define System_State_modemanager_queue_elem_unhandled_input_source_modemanager 2
#define System_State_modemanager_queue_elem_unhandled_input_source_sensor 3
#define System_State_modemanager_queue_elem_unhandled_input_source_env 4
#define System_State_modemanager_queue_elem_unhandled_input_dest_actuator 0
#define System_State_modemanager_queue_elem_unhandled_input_dest_egse 1
#define System_State_modemanager_queue_elem_unhandled_input_dest_modemanager 2
#define System_State_modemanager_queue_elem_unhandled_input_dest_sensor 3
#define System_State_modemanager_queue_elem_unhandled_input_dest_env 4
#define System_State_modemanager_queue_elem_unhandled_input_event_NONE 0
#define System_State_modemanager_queue_elem_unhandled_input_event_actuator_NONE 0
#define System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_NONE 0
#define System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_ctrl_PRESENT 2
#define System_state_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_selection_ctrl_PRESENT 2
#define System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_PRESENT 1
#define System_state_modemanager_queue_elem_unhandled_input_event_actuator_selection_msg_in_PRESENT 1
#define System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_out_NONE 0
#define System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_out_feedback_PRESENT 1
#define System_state_modemanager_queue_elem_unhandled_input_event_actuator_msg_out_selection_feedback_PRESENT 1
#define System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_out_PRESENT 2
#define System_state_modemanager_queue_elem_unhandled_input_event_actuator_selection_msg_out_PRESENT 2
#define System_State_modemanager_queue_elem_unhandled_input_event_actuator_PRESENT 1
#define System_state_modemanager_queue_elem_unhandled_input_event_selection_actuator_PRESENT 1
#define System_State_modemanager_queue_elem_unhandled_input_event_egse_NONE 0
#define System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_NONE 0
#define System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_PRESENT 1
#define System_state_modemanager_queue_elem_unhandled_input_event_egse_msg_in_selection_tm_PRESENT 1
#define System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_PRESENT 1
#define System_state_modemanager_queue_elem_unhandled_input_event_egse_selection_msg_in_PRESENT 1
#define System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_NONE 0
#define System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc_PRESENT 1
#define System_state_modemanager_queue_elem_unhandled_input_event_egse_msg_out_selection_tc_PRESENT 1
#define System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_PRESENT 2
#define System_state_modemanager_queue_elem_unhandled_input_event_egse_selection_msg_out_PRESENT 2
#define System_State_modemanager_queue_elem_unhandled_input_event_egse_PRESENT 2
#define System_state_modemanager_queue_elem_unhandled_input_event_selection_egse_PRESENT 2
#define System_State_modemanager_queue_elem_unhandled_input_event_modemanager_NONE 0
#define System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_NONE 0
#define System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_input_none_PRESENT 1
#define System_state_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_selection_input_none_PRESENT 1
#define System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_feedback_PRESENT 2
#define System_state_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_selection_feedback_PRESENT 2
#define System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_reading_PRESENT 3
#define System_state_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_selection_reading_PRESENT 3
#define System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc_PRESENT 4
#define System_state_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_selection_tc_PRESENT 4
#define System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_PRESENT 1
#define System_state_modemanager_queue_elem_unhandled_input_event_modemanager_selection_msg_in_PRESENT 1
#define System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_NONE 0
#define System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl_PRESENT 1
#define System_state_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_selection_ctrl_PRESENT 1
#define System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_PRESENT 2
#define System_state_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_selection_tm_PRESENT 2
#define System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_PRESENT 2
#define System_state_modemanager_queue_elem_unhandled_input_event_modemanager_selection_msg_out_PRESENT 2
#define System_State_modemanager_queue_elem_unhandled_input_event_modemanager_PRESENT 3
#define System_state_modemanager_queue_elem_unhandled_input_event_selection_modemanager_PRESENT 3
#define System_State_modemanager_queue_elem_unhandled_input_event_sensor_NONE 0
#define System_State_modemanager_queue_elem_unhandled_input_event_sensor_msg_out_NONE 0
#define System_State_modemanager_queue_elem_unhandled_input_event_sensor_msg_out_reading_PRESENT 1
#define System_state_modemanager_queue_elem_unhandled_input_event_sensor_msg_out_selection_reading_PRESENT 1
#define System_State_modemanager_queue_elem_unhandled_input_event_sensor_msg_out_PRESENT 1
#define System_state_modemanager_queue_elem_unhandled_input_event_sensor_selection_msg_out_PRESENT 1
#define System_State_modemanager_queue_elem_unhandled_input_event_sensor_PRESENT 4
#define System_state_modemanager_queue_elem_unhandled_input_event_selection_sensor_PRESENT 4
#define System_State_modemanager_queue_elem_unhandled_input_PRESENT 5
#define System_state_modemanager_queue_elem_selection_unhandled_input_PRESENT 5
#define System_State_actuator_state_working 0
#define System_State_actuator_state_idle 1
#define System_State_actuator_sender_actuator 0
#define System_State_actuator_sender_egse 1
#define System_State_actuator_sender_modemanager 2
#define System_State_actuator_sender_sensor 3
#define System_State_actuator_sender_env 4
#define System_State_modemanager_state_uninitialized 0
#define System_State_modemanager_state_configured 1
#define System_State_modemanager_sender_actuator 0
#define System_State_modemanager_sender_egse 1
#define System_State_modemanager_sender_modemanager 2
#define System_State_modemanager_sender_sensor 3
#define System_State_modemanager_sender_env 4
typedef Actuator_Context {
    Actuator_Context_state state;
    Actuator_Context_init_done init_done;
    Actuator_Context_sender sender;
    Actuator_Context_x x;
}

typedef Actuator_Event_msg_in_ctrl {
    Actuator_Event_msg_in_ctrl_x x;
}

typedef Actuator_Event_msg_in_input_none {
    bit dummy;
}

typedef Actuator_Event_msg_out_feedback {
    Actuator_Event_msg_out_feedback_x x;
}

typedef AggregateTimerData_actuator {
    bit dummy;
}

typedef AggregateTimerData_dummy_entry {
    bit dummy;
}

typedef AggregateTimerData_modemanager {
    bit dummy;
}

typedef Egse_Event_msg_in_tm_reprt {
    Egse_Event_msg_in_tm_reprt_reading reading;
    Egse_Event_msg_in_tm_reprt_ctrl ctrl;
    Egse_Event_msg_in_tm_reprt_feedback feedback;
}

typedef Egse_Event_msg_out_tc_cfg {
    Egse_Event_msg_out_tc_cfg_param_a param_a;
    Egse_Event_msg_out_tc_cfg_param_b param_b;
}

typedef Egse_tc_cfg {
    Egse_tc_cfg_param_a param_a;
    Egse_tc_cfg_param_b param_b;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_ctrl {
    Events_Ty_elem_input_event_event_actuator_msg_in_ctrl_x x;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_out_feedback {
    Events_Ty_elem_input_event_event_actuator_msg_out_feedback_x x;
}

typedef Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt {
    Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_reading reading;
    Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_ctrl ctrl;
    Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_feedback feedback;
}

typedef Events_Ty_elem_input_event_event_egse_msg_out_tc_cfg {
    Events_Ty_elem_input_event_event_egse_msg_out_tc_cfg_param_a param_a;
    Events_Ty_elem_input_event_event_egse_msg_out_tc_cfg_param_b param_b;
}

typedef Events_Ty_elem_input_event_event_modemanager_msg_in_feedback {
    Events_Ty_elem_input_event_event_modemanager_msg_in_feedback_x x;
}

typedef Events_Ty_elem_input_event_event_modemanager_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_input_event_event_modemanager_msg_in_reading {
    Events_Ty_elem_input_event_event_modemanager_msg_in_reading_x x;
}

typedef Events_Ty_elem_input_event_event_modemanager_msg_in_tc_cfg {
    Events_Ty_elem_input_event_event_modemanager_msg_in_tc_cfg_param_a param_a;
    Events_Ty_elem_input_event_event_modemanager_msg_in_tc_cfg_param_b param_b;
}

typedef Events_Ty_elem_input_event_event_modemanager_msg_out_ctrl {
    Events_Ty_elem_input_event_event_modemanager_msg_out_ctrl_x x;
}

typedef Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt {
    Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_reading reading;
    Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_ctrl ctrl;
    Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_feedback feedback;
}

typedef Events_Ty_elem_input_event_event_sensor_msg_out_reading {
    Events_Ty_elem_input_event_event_sensor_msg_out_reading_x x;
}

typedef Events_Ty_elem_no_event {
    bit dummy;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_ctrl {
    Events_Ty_elem_output_event_event_actuator_msg_in_ctrl_x x;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_out_feedback {
    Events_Ty_elem_output_event_event_actuator_msg_out_feedback_x x;
}

typedef Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt {
    Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_reading reading;
    Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_ctrl ctrl;
    Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_feedback feedback;
}

typedef Events_Ty_elem_output_event_event_egse_msg_out_tc_cfg {
    Events_Ty_elem_output_event_event_egse_msg_out_tc_cfg_param_a param_a;
    Events_Ty_elem_output_event_event_egse_msg_out_tc_cfg_param_b param_b;
}

typedef Events_Ty_elem_output_event_event_modemanager_msg_in_feedback {
    Events_Ty_elem_output_event_event_modemanager_msg_in_feedback_x x;
}

typedef Events_Ty_elem_output_event_event_modemanager_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_output_event_event_modemanager_msg_in_reading {
    Events_Ty_elem_output_event_event_modemanager_msg_in_reading_x x;
}

typedef Events_Ty_elem_output_event_event_modemanager_msg_in_tc_cfg {
    Events_Ty_elem_output_event_event_modemanager_msg_in_tc_cfg_param_a param_a;
    Events_Ty_elem_output_event_event_modemanager_msg_in_tc_cfg_param_b param_b;
}

typedef Events_Ty_elem_output_event_event_modemanager_msg_out_ctrl {
    Events_Ty_elem_output_event_event_modemanager_msg_out_ctrl_x x;
}

typedef Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt {
    Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_reading reading;
    Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_ctrl ctrl;
    Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_feedback feedback;
}

typedef Events_Ty_elem_output_event_event_sensor_msg_out_reading {
    Events_Ty_elem_output_event_event_sensor_msg_out_reading_x x;
}

typedef Events_Ty_elem_system_startup {
    bit dummy;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_ctrl {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_ctrl_x x;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_out_feedback {
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_feedback_x x;
}

typedef Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt {
    Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_reading reading;
    Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_ctrl ctrl;
    Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_feedback feedback;
}

typedef Events_Ty_elem_unhandled_input_event_egse_msg_out_tc_cfg {
    Events_Ty_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_a param_a;
    Events_Ty_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_b param_b;
}

typedef Events_Ty_elem_unhandled_input_event_modemanager_msg_in_feedback {
    Events_Ty_elem_unhandled_input_event_modemanager_msg_in_feedback_x x;
}

typedef Events_Ty_elem_unhandled_input_event_modemanager_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_unhandled_input_event_modemanager_msg_in_reading {
    Events_Ty_elem_unhandled_input_event_modemanager_msg_in_reading_x x;
}

typedef Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc_cfg {
    Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a param_a;
    Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b param_b;
}

typedef Events_Ty_elem_unhandled_input_event_modemanager_msg_out_ctrl {
    Events_Ty_elem_unhandled_input_event_modemanager_msg_out_ctrl_x x;
}

typedef Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt {
    Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_reading reading;
    Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl ctrl;
    Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback feedback;
}

typedef Events_Ty_elem_unhandled_input_event_sensor_msg_out_reading {
    Events_Ty_elem_unhandled_input_event_sensor_msg_out_reading_x x;
}

typedef Function_Event_actuator_msg_in_ctrl {
    Function_Event_actuator_msg_in_ctrl_x x;
}

typedef Function_Event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Function_Event_actuator_msg_out_feedback {
    Function_Event_actuator_msg_out_feedback_x x;
}

typedef Function_Event_egse_msg_in_tm_reprt {
    Function_Event_egse_msg_in_tm_reprt_reading reading;
    Function_Event_egse_msg_in_tm_reprt_ctrl ctrl;
    Function_Event_egse_msg_in_tm_reprt_feedback feedback;
}

typedef Function_Event_egse_msg_out_tc_cfg {
    Function_Event_egse_msg_out_tc_cfg_param_a param_a;
    Function_Event_egse_msg_out_tc_cfg_param_b param_b;
}

typedef Function_Event_modemanager_msg_in_feedback {
    Function_Event_modemanager_msg_in_feedback_x x;
}

typedef Function_Event_modemanager_msg_in_input_none {
    bit dummy;
}

typedef Function_Event_modemanager_msg_in_reading {
    Function_Event_modemanager_msg_in_reading_x x;
}

typedef Function_Event_modemanager_msg_in_tc_cfg {
    Function_Event_modemanager_msg_in_tc_cfg_param_a param_a;
    Function_Event_modemanager_msg_in_tc_cfg_param_b param_b;
}

typedef Function_Event_modemanager_msg_out_ctrl {
    Function_Event_modemanager_msg_out_ctrl_x x;
}

typedef Function_Event_modemanager_msg_out_tm_reprt {
    Function_Event_modemanager_msg_out_tm_reprt_reading reading;
    Function_Event_modemanager_msg_out_tm_reprt_ctrl ctrl;
    Function_Event_modemanager_msg_out_tm_reprt_feedback feedback;
}

typedef Function_Event_sensor_msg_out_reading {
    Function_Event_sensor_msg_out_reading_x x;
}

typedef Interface_Event_event_actuator_msg_in_ctrl {
    Interface_Event_event_actuator_msg_in_ctrl_x x;
}

typedef Interface_Event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Interface_Event_event_actuator_msg_out_feedback {
    Interface_Event_event_actuator_msg_out_feedback_x x;
}

typedef Interface_Event_event_egse_msg_in_tm_reprt {
    Interface_Event_event_egse_msg_in_tm_reprt_reading reading;
    Interface_Event_event_egse_msg_in_tm_reprt_ctrl ctrl;
    Interface_Event_event_egse_msg_in_tm_reprt_feedback feedback;
}

typedef Interface_Event_event_egse_msg_out_tc_cfg {
    Interface_Event_event_egse_msg_out_tc_cfg_param_a param_a;
    Interface_Event_event_egse_msg_out_tc_cfg_param_b param_b;
}

typedef Interface_Event_event_modemanager_msg_in_feedback {
    Interface_Event_event_modemanager_msg_in_feedback_x x;
}

typedef Interface_Event_event_modemanager_msg_in_input_none {
    bit dummy;
}

typedef Interface_Event_event_modemanager_msg_in_reading {
    Interface_Event_event_modemanager_msg_in_reading_x x;
}

typedef Interface_Event_event_modemanager_msg_in_tc_cfg {
    Interface_Event_event_modemanager_msg_in_tc_cfg_param_a param_a;
    Interface_Event_event_modemanager_msg_in_tc_cfg_param_b param_b;
}

typedef Interface_Event_event_modemanager_msg_out_ctrl {
    Interface_Event_event_modemanager_msg_out_ctrl_x x;
}

typedef Interface_Event_event_modemanager_msg_out_tm_reprt {
    Interface_Event_event_modemanager_msg_out_tm_reprt_reading reading;
    Interface_Event_event_modemanager_msg_out_tm_reprt_ctrl ctrl;
    Interface_Event_event_modemanager_msg_out_tm_reprt_feedback feedback;
}

typedef Interface_Event_event_sensor_msg_out_reading {
    Interface_Event_event_sensor_msg_out_reading_x x;
}

typedef Modemanager_Context_cfg {
    Modemanager_Context_cfg_param_a param_a;
    Modemanager_Context_cfg_param_b param_b;
}

typedef Modemanager_Context_rprt {
    Modemanager_Context_rprt_reading reading;
    Modemanager_Context_rprt_ctrl ctrl;
    Modemanager_Context_rprt_feedback feedback;
}

typedef Modemanager_Event_msg_in_feedback {
    Modemanager_Event_msg_in_feedback_x x;
}

typedef Modemanager_Event_msg_in_input_none {
    bit dummy;
}

typedef Modemanager_Event_msg_in_reading {
    Modemanager_Event_msg_in_reading_x x;
}

typedef Modemanager_Event_msg_in_tc_cfg {
    Modemanager_Event_msg_in_tc_cfg_param_a param_a;
    Modemanager_Event_msg_in_tc_cfg_param_b param_b;
}

typedef Modemanager_Event_msg_out_ctrl {
    Modemanager_Event_msg_out_ctrl_x x;
}

typedef Modemanager_Event_msg_out_tm_reprt {
    Modemanager_Event_msg_out_tm_reprt_reading reading;
    Modemanager_Event_msg_out_tm_reprt_ctrl ctrl;
    Modemanager_Event_msg_out_tm_reprt_feedback feedback;
}

typedef Named_Function_Event_event_actuator_msg_in_ctrl {
    Named_Function_Event_event_actuator_msg_in_ctrl_x x;
}

typedef Named_Function_Event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Named_Function_Event_event_actuator_msg_out_feedback {
    Named_Function_Event_event_actuator_msg_out_feedback_x x;
}

typedef Named_Function_Event_event_egse_msg_in_tm_reprt {
    Named_Function_Event_event_egse_msg_in_tm_reprt_reading reading;
    Named_Function_Event_event_egse_msg_in_tm_reprt_ctrl ctrl;
    Named_Function_Event_event_egse_msg_in_tm_reprt_feedback feedback;
}

typedef Named_Function_Event_event_egse_msg_out_tc_cfg {
    Named_Function_Event_event_egse_msg_out_tc_cfg_param_a param_a;
    Named_Function_Event_event_egse_msg_out_tc_cfg_param_b param_b;
}

typedef Named_Function_Event_event_modemanager_msg_in_feedback {
    Named_Function_Event_event_modemanager_msg_in_feedback_x x;
}

typedef Named_Function_Event_event_modemanager_msg_in_input_none {
    bit dummy;
}

typedef Named_Function_Event_event_modemanager_msg_in_reading {
    Named_Function_Event_event_modemanager_msg_in_reading_x x;
}

typedef Named_Function_Event_event_modemanager_msg_in_tc_cfg {
    Named_Function_Event_event_modemanager_msg_in_tc_cfg_param_a param_a;
    Named_Function_Event_event_modemanager_msg_in_tc_cfg_param_b param_b;
}

typedef Named_Function_Event_event_modemanager_msg_out_ctrl {
    Named_Function_Event_event_modemanager_msg_out_ctrl_x x;
}

typedef Named_Function_Event_event_modemanager_msg_out_tm_reprt {
    Named_Function_Event_event_modemanager_msg_out_tm_reprt_reading reading;
    Named_Function_Event_event_modemanager_msg_out_tm_reprt_ctrl ctrl;
    Named_Function_Event_event_modemanager_msg_out_tm_reprt_feedback feedback;
}

typedef Named_Function_Event_event_sensor_msg_out_reading {
    Named_Function_Event_event_sensor_msg_out_reading_x x;
}

typedef Named_Function_Event_id {
    byte data[80];
    int length;
}

typedef Observable_Event_input_event_event_actuator_msg_in_ctrl {
    Observable_Event_input_event_event_actuator_msg_in_ctrl_x x;
}

typedef Observable_Event_input_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_input_event_event_actuator_msg_out_feedback {
    Observable_Event_input_event_event_actuator_msg_out_feedback_x x;
}

typedef Observable_Event_input_event_event_egse_msg_in_tm_reprt {
    Observable_Event_input_event_event_egse_msg_in_tm_reprt_reading reading;
    Observable_Event_input_event_event_egse_msg_in_tm_reprt_ctrl ctrl;
    Observable_Event_input_event_event_egse_msg_in_tm_reprt_feedback feedback;
}

typedef Observable_Event_input_event_event_egse_msg_out_tc_cfg {
    Observable_Event_input_event_event_egse_msg_out_tc_cfg_param_a param_a;
    Observable_Event_input_event_event_egse_msg_out_tc_cfg_param_b param_b;
}

typedef Observable_Event_input_event_event_modemanager_msg_in_feedback {
    Observable_Event_input_event_event_modemanager_msg_in_feedback_x x;
}

typedef Observable_Event_input_event_event_modemanager_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_input_event_event_modemanager_msg_in_reading {
    Observable_Event_input_event_event_modemanager_msg_in_reading_x x;
}

typedef Observable_Event_input_event_event_modemanager_msg_in_tc_cfg {
    Observable_Event_input_event_event_modemanager_msg_in_tc_cfg_param_a param_a;
    Observable_Event_input_event_event_modemanager_msg_in_tc_cfg_param_b param_b;
}

typedef Observable_Event_input_event_event_modemanager_msg_out_ctrl {
    Observable_Event_input_event_event_modemanager_msg_out_ctrl_x x;
}

typedef Observable_Event_input_event_event_modemanager_msg_out_tm_reprt {
    Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_reading reading;
    Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_ctrl ctrl;
    Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_feedback feedback;
}

typedef Observable_Event_input_event_event_sensor_msg_out_reading {
    Observable_Event_input_event_event_sensor_msg_out_reading_x x;
}

typedef Observable_Event_no_event {
    bit dummy;
}

typedef Observable_Event_output_event_event_actuator_msg_in_ctrl {
    Observable_Event_output_event_event_actuator_msg_in_ctrl_x x;
}

typedef Observable_Event_output_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_output_event_event_actuator_msg_out_feedback {
    Observable_Event_output_event_event_actuator_msg_out_feedback_x x;
}

typedef Observable_Event_output_event_event_egse_msg_in_tm_reprt {
    Observable_Event_output_event_event_egse_msg_in_tm_reprt_reading reading;
    Observable_Event_output_event_event_egse_msg_in_tm_reprt_ctrl ctrl;
    Observable_Event_output_event_event_egse_msg_in_tm_reprt_feedback feedback;
}

typedef Observable_Event_output_event_event_egse_msg_out_tc_cfg {
    Observable_Event_output_event_event_egse_msg_out_tc_cfg_param_a param_a;
    Observable_Event_output_event_event_egse_msg_out_tc_cfg_param_b param_b;
}

typedef Observable_Event_output_event_event_modemanager_msg_in_feedback {
    Observable_Event_output_event_event_modemanager_msg_in_feedback_x x;
}

typedef Observable_Event_output_event_event_modemanager_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_output_event_event_modemanager_msg_in_reading {
    Observable_Event_output_event_event_modemanager_msg_in_reading_x x;
}

typedef Observable_Event_output_event_event_modemanager_msg_in_tc_cfg {
    Observable_Event_output_event_event_modemanager_msg_in_tc_cfg_param_a param_a;
    Observable_Event_output_event_event_modemanager_msg_in_tc_cfg_param_b param_b;
}

typedef Observable_Event_output_event_event_modemanager_msg_out_ctrl {
    Observable_Event_output_event_event_modemanager_msg_out_ctrl_x x;
}

typedef Observable_Event_output_event_event_modemanager_msg_out_tm_reprt {
    Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_reading reading;
    Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_ctrl ctrl;
    Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_feedback feedback;
}

typedef Observable_Event_output_event_event_sensor_msg_out_reading {
    Observable_Event_output_event_event_sensor_msg_out_reading_x x;
}

typedef Observable_Event_system_startup {
    bit dummy;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_ctrl {
    Observable_Event_unhandled_input_event_actuator_msg_in_ctrl_x x;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_out_feedback {
    Observable_Event_unhandled_input_event_actuator_msg_out_feedback_x x;
}

typedef Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt {
    Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_reading reading;
    Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_ctrl ctrl;
    Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_feedback feedback;
}

typedef Observable_Event_unhandled_input_event_egse_msg_out_tc_cfg {
    Observable_Event_unhandled_input_event_egse_msg_out_tc_cfg_param_a param_a;
    Observable_Event_unhandled_input_event_egse_msg_out_tc_cfg_param_b param_b;
}

typedef Observable_Event_unhandled_input_event_modemanager_msg_in_feedback {
    Observable_Event_unhandled_input_event_modemanager_msg_in_feedback_x x;
}

typedef Observable_Event_unhandled_input_event_modemanager_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_unhandled_input_event_modemanager_msg_in_reading {
    Observable_Event_unhandled_input_event_modemanager_msg_in_reading_x x;
}

typedef Observable_Event_unhandled_input_event_modemanager_msg_in_tc_cfg {
    Observable_Event_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a param_a;
    Observable_Event_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b param_b;
}

typedef Observable_Event_unhandled_input_event_modemanager_msg_out_ctrl {
    Observable_Event_unhandled_input_event_modemanager_msg_out_ctrl_x x;
}

typedef Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt {
    Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_reading reading;
    Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl ctrl;
    Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback feedback;
}

typedef Observable_Event_unhandled_input_event_sensor_msg_out_reading {
    Observable_Event_unhandled_input_event_sensor_msg_out_reading_x x;
}

typedef Sensor_Event_msg_out_reading {
    Sensor_Event_msg_out_reading_x x;
}

typedef System_State_actuator {
    System_State_actuator_state state;
    System_State_actuator_init_done init_done;
    System_State_actuator_sender sender;
    System_State_actuator_x x;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ctrl {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ctrl_x x;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_out_feedback {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_feedback_x x;
}

typedef System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt {
    System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_reading reading;
    System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_ctrl ctrl;
    System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_feedback feedback;
}

typedef System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc_cfg {
    System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_a param_a;
    System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_b param_b;
}

typedef System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_feedback {
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_feedback_x x;
}

typedef System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_reading {
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_reading_x x;
}

typedef System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc_cfg {
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_a param_a;
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_b param_b;
}

typedef System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_ctrl {
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_ctrl_x x;
}

typedef System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt {
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_reading reading;
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_ctrl ctrl;
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_feedback feedback;
}

typedef System_State_actuator_queue_elem_input_event_event_sensor_msg_out_reading {
    System_State_actuator_queue_elem_input_event_event_sensor_msg_out_reading_x x;
}

typedef System_State_actuator_queue_elem_no_event {
    bit dummy;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ctrl {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ctrl_x x;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_out_feedback {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_feedback_x x;
}

typedef System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt {
    System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_reading reading;
    System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_ctrl ctrl;
    System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_feedback feedback;
}

typedef System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc_cfg {
    System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_a param_a;
    System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_b param_b;
}

typedef System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_feedback {
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_feedback_x x;
}

typedef System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_reading {
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_reading_x x;
}

typedef System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc_cfg {
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_a param_a;
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_b param_b;
}

typedef System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_ctrl {
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_ctrl_x x;
}

typedef System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt {
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_reading reading;
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_ctrl ctrl;
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_feedback feedback;
}

typedef System_State_actuator_queue_elem_output_event_event_sensor_msg_out_reading {
    System_State_actuator_queue_elem_output_event_event_sensor_msg_out_reading_x x;
}

typedef System_State_actuator_queue_elem_system_startup {
    bit dummy;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ctrl {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ctrl_x x;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_feedback {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_feedback_x x;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt {
    System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_reading reading;
    System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_ctrl ctrl;
    System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_feedback feedback;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg {
    System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_a param_a;
    System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_b param_b;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_feedback {
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_feedback_x x;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_reading {
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_reading_x x;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg {
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a param_a;
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b param_b;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl {
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl_x x;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt {
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_reading reading;
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl ctrl;
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback feedback;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_sensor_msg_out_reading {
    System_State_actuator_queue_elem_unhandled_input_event_sensor_msg_out_reading_x x;
}

typedef System_State_modemanager_cfg {
    System_State_modemanager_cfg_param_a param_a;
    System_State_modemanager_cfg_param_b param_b;
}

typedef System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_ctrl {
    System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_ctrl_x x;
}

typedef System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_modemanager_queue_elem_input_event_event_actuator_msg_out_feedback {
    System_State_modemanager_queue_elem_input_event_event_actuator_msg_out_feedback_x x;
}

typedef System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt {
    System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_reading reading;
    System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_ctrl ctrl;
    System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_feedback feedback;
}

typedef System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc_cfg {
    System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_a param_a;
    System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_b param_b;
}

typedef System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_feedback {
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_feedback_x x;
}

typedef System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_input_none {
    bit dummy;
}

typedef System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_reading {
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_reading_x x;
}

typedef System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc_cfg {
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_a param_a;
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_b param_b;
}

typedef System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_ctrl {
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_ctrl_x x;
}

typedef System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt {
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_reading reading;
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_ctrl ctrl;
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_feedback feedback;
}

typedef System_State_modemanager_queue_elem_input_event_event_sensor_msg_out_reading {
    System_State_modemanager_queue_elem_input_event_event_sensor_msg_out_reading_x x;
}

typedef System_State_modemanager_queue_elem_no_event {
    bit dummy;
}

typedef System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_ctrl {
    System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_ctrl_x x;
}

typedef System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_modemanager_queue_elem_output_event_event_actuator_msg_out_feedback {
    System_State_modemanager_queue_elem_output_event_event_actuator_msg_out_feedback_x x;
}

typedef System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt {
    System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_reading reading;
    System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_ctrl ctrl;
    System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_feedback feedback;
}

typedef System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc_cfg {
    System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_a param_a;
    System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_b param_b;
}

typedef System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_feedback {
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_feedback_x x;
}

typedef System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_input_none {
    bit dummy;
}

typedef System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_reading {
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_reading_x x;
}

typedef System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc_cfg {
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_a param_a;
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_b param_b;
}

typedef System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_ctrl {
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_ctrl_x x;
}

typedef System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt {
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_reading reading;
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_ctrl ctrl;
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_feedback feedback;
}

typedef System_State_modemanager_queue_elem_output_event_event_sensor_msg_out_reading {
    System_State_modemanager_queue_elem_output_event_event_sensor_msg_out_reading_x x;
}

typedef System_State_modemanager_queue_elem_system_startup {
    bit dummy;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_ctrl {
    System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_ctrl_x x;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_out_feedback {
    System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_out_feedback_x x;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt {
    System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_reading reading;
    System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_ctrl ctrl;
    System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_feedback feedback;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg {
    System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_a param_a;
    System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_b param_b;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_feedback {
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_feedback_x x;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_input_none {
    bit dummy;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_reading {
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_reading_x x;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg {
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a param_a;
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b param_b;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl {
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl_x x;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt {
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_reading reading;
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl ctrl;
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback feedback;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_sensor_msg_out_reading {
    System_State_modemanager_queue_elem_unhandled_input_event_sensor_msg_out_reading_x x;
}

typedef System_State_modemanager_rprt {
    System_State_modemanager_rprt_reading reading;
    System_State_modemanager_rprt_ctrl ctrl;
    System_State_modemanager_rprt_feedback feedback;
}

typedef System_State_timers_actuator {
    bit dummy;
}

typedef System_State_timers_dummy_entry {
    bit dummy;
}

typedef System_State_timers_modemanager {
    bit dummy;
}

typedef T_Config {
    T_Config_param_a param_a;
    T_Config_param_b param_b;
}

typedef T_Null_Record {
    bit dummy;
}

typedef T_Report {
    T_Report_reading reading;
    T_Report_ctrl ctrl;
    T_Report_feedback feedback;
}

typedef TimerData {
    TimerData_timer_enabled timer_enabled;
    TimerData_interval interval;
}

typedef Actuator_Event_msg_in_data {
    Actuator_Event_msg_in_input_none input_none;
    Actuator_Event_msg_in_ctrl ctrl;
}

typedef Actuator_Event_msg_out_data {
    Actuator_Event_msg_out_feedback feedback;
}

typedef AggregateTimerData {
    AggregateTimerData_actuator actuator;
    AggregateTimerData_modemanager modemanager;
    AggregateTimerData_dummy_entry dummy_entry;
}

typedef Egse_Event_msg_in_tm {
    Egse_Event_msg_in_tm_reprt reprt;
}

typedef Egse_Event_msg_out_tc {
    Egse_Event_msg_out_tc_cfg cfg;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_data {
    Events_Ty_elem_input_event_event_actuator_msg_in_input_none input_none;
    Events_Ty_elem_input_event_event_actuator_msg_in_ctrl ctrl;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_out_data {
    Events_Ty_elem_input_event_event_actuator_msg_out_feedback feedback;
}

typedef Events_Ty_elem_input_event_event_egse_msg_in_tm {
    Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt reprt;
}

typedef Events_Ty_elem_input_event_event_egse_msg_out_tc {
    Events_Ty_elem_input_event_event_egse_msg_out_tc_cfg cfg;
}

typedef Events_Ty_elem_input_event_event_modemanager_msg_in_tc {
    Events_Ty_elem_input_event_event_modemanager_msg_in_tc_cfg cfg;
}

typedef Events_Ty_elem_input_event_event_modemanager_msg_out_tm {
    Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt reprt;
}

typedef Events_Ty_elem_input_event_event_sensor_msg_out_data {
    Events_Ty_elem_input_event_event_sensor_msg_out_reading reading;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_data {
    Events_Ty_elem_output_event_event_actuator_msg_in_input_none input_none;
    Events_Ty_elem_output_event_event_actuator_msg_in_ctrl ctrl;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_out_data {
    Events_Ty_elem_output_event_event_actuator_msg_out_feedback feedback;
}

typedef Events_Ty_elem_output_event_event_egse_msg_in_tm {
    Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt reprt;
}

typedef Events_Ty_elem_output_event_event_egse_msg_out_tc {
    Events_Ty_elem_output_event_event_egse_msg_out_tc_cfg cfg;
}

typedef Events_Ty_elem_output_event_event_modemanager_msg_in_tc {
    Events_Ty_elem_output_event_event_modemanager_msg_in_tc_cfg cfg;
}

typedef Events_Ty_elem_output_event_event_modemanager_msg_out_tm {
    Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt reprt;
}

typedef Events_Ty_elem_output_event_event_sensor_msg_out_data {
    Events_Ty_elem_output_event_event_sensor_msg_out_reading reading;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_data {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none input_none;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_ctrl ctrl;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_out_data {
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_feedback feedback;
}

typedef Events_Ty_elem_unhandled_input_event_egse_msg_in_tm {
    Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt reprt;
}

typedef Events_Ty_elem_unhandled_input_event_egse_msg_out_tc {
    Events_Ty_elem_unhandled_input_event_egse_msg_out_tc_cfg cfg;
}

typedef Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc {
    Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc_cfg cfg;
}

typedef Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm {
    Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt reprt;
}

typedef Events_Ty_elem_unhandled_input_event_sensor_msg_out_data {
    Events_Ty_elem_unhandled_input_event_sensor_msg_out_reading reading;
}

typedef Function_Event_actuator_msg_in_data {
    Function_Event_actuator_msg_in_input_none input_none;
    Function_Event_actuator_msg_in_ctrl ctrl;
}

typedef Function_Event_actuator_msg_out_data {
    Function_Event_actuator_msg_out_feedback feedback;
}

typedef Function_Event_egse_msg_in_tm {
    Function_Event_egse_msg_in_tm_reprt reprt;
}

typedef Function_Event_egse_msg_out_tc {
    Function_Event_egse_msg_out_tc_cfg cfg;
}

typedef Function_Event_modemanager_msg_in_tc {
    Function_Event_modemanager_msg_in_tc_cfg cfg;
}

typedef Function_Event_modemanager_msg_out_tm {
    Function_Event_modemanager_msg_out_tm_reprt reprt;
}

typedef Function_Event_sensor_msg_out_data {
    Function_Event_sensor_msg_out_reading reading;
}

typedef Interface_Event_event_actuator_msg_in_data {
    Interface_Event_event_actuator_msg_in_input_none input_none;
    Interface_Event_event_actuator_msg_in_ctrl ctrl;
}

typedef Interface_Event_event_actuator_msg_out_data {
    Interface_Event_event_actuator_msg_out_feedback feedback;
}

typedef Interface_Event_event_egse_msg_in_tm {
    Interface_Event_event_egse_msg_in_tm_reprt reprt;
}

typedef Interface_Event_event_egse_msg_out_tc {
    Interface_Event_event_egse_msg_out_tc_cfg cfg;
}

typedef Interface_Event_event_modemanager_msg_in_tc {
    Interface_Event_event_modemanager_msg_in_tc_cfg cfg;
}

typedef Interface_Event_event_modemanager_msg_out_tm {
    Interface_Event_event_modemanager_msg_out_tm_reprt reprt;
}

typedef Interface_Event_event_sensor_msg_out_data {
    Interface_Event_event_sensor_msg_out_reading reading;
}

typedef Modemanager_Context {
    Modemanager_Context_state state;
    Modemanager_Context_init_done init_done;
    Modemanager_Context_sender sender;
    Modemanager_Context_cfg cfg;
    Modemanager_Context_xin xin;
    Modemanager_Context_xout xout;
    Modemanager_Context_xfeedback xfeedback;
    Modemanager_Context_rprt rprt;
}

typedef Modemanager_Event_msg_in_tc {
    Modemanager_Event_msg_in_tc_cfg cfg;
}

typedef Modemanager_Event_msg_out_tm {
    Modemanager_Event_msg_out_tm_reprt reprt;
}

typedef Named_Function_Event_event_actuator_msg_in_data {
    Named_Function_Event_event_actuator_msg_in_input_none input_none;
    Named_Function_Event_event_actuator_msg_in_ctrl ctrl;
}

typedef Named_Function_Event_event_actuator_msg_out_data {
    Named_Function_Event_event_actuator_msg_out_feedback feedback;
}

typedef Named_Function_Event_event_egse_msg_in_tm {
    Named_Function_Event_event_egse_msg_in_tm_reprt reprt;
}

typedef Named_Function_Event_event_egse_msg_out_tc {
    Named_Function_Event_event_egse_msg_out_tc_cfg cfg;
}

typedef Named_Function_Event_event_modemanager_msg_in_tc {
    Named_Function_Event_event_modemanager_msg_in_tc_cfg cfg;
}

typedef Named_Function_Event_event_modemanager_msg_out_tm {
    Named_Function_Event_event_modemanager_msg_out_tm_reprt reprt;
}

typedef Named_Function_Event_event_sensor_msg_out_data {
    Named_Function_Event_event_sensor_msg_out_reading reading;
}

typedef Observable_Event_input_event_event_actuator_msg_in_data {
    Observable_Event_input_event_event_actuator_msg_in_input_none input_none;
    Observable_Event_input_event_event_actuator_msg_in_ctrl ctrl;
}

typedef Observable_Event_input_event_event_actuator_msg_out_data {
    Observable_Event_input_event_event_actuator_msg_out_feedback feedback;
}

typedef Observable_Event_input_event_event_egse_msg_in_tm {
    Observable_Event_input_event_event_egse_msg_in_tm_reprt reprt;
}

typedef Observable_Event_input_event_event_egse_msg_out_tc {
    Observable_Event_input_event_event_egse_msg_out_tc_cfg cfg;
}

typedef Observable_Event_input_event_event_modemanager_msg_in_tc {
    Observable_Event_input_event_event_modemanager_msg_in_tc_cfg cfg;
}

typedef Observable_Event_input_event_event_modemanager_msg_out_tm {
    Observable_Event_input_event_event_modemanager_msg_out_tm_reprt reprt;
}

typedef Observable_Event_input_event_event_sensor_msg_out_data {
    Observable_Event_input_event_event_sensor_msg_out_reading reading;
}

typedef Observable_Event_output_event_event_actuator_msg_in_data {
    Observable_Event_output_event_event_actuator_msg_in_input_none input_none;
    Observable_Event_output_event_event_actuator_msg_in_ctrl ctrl;
}

typedef Observable_Event_output_event_event_actuator_msg_out_data {
    Observable_Event_output_event_event_actuator_msg_out_feedback feedback;
}

typedef Observable_Event_output_event_event_egse_msg_in_tm {
    Observable_Event_output_event_event_egse_msg_in_tm_reprt reprt;
}

typedef Observable_Event_output_event_event_egse_msg_out_tc {
    Observable_Event_output_event_event_egse_msg_out_tc_cfg cfg;
}

typedef Observable_Event_output_event_event_modemanager_msg_in_tc {
    Observable_Event_output_event_event_modemanager_msg_in_tc_cfg cfg;
}

typedef Observable_Event_output_event_event_modemanager_msg_out_tm {
    Observable_Event_output_event_event_modemanager_msg_out_tm_reprt reprt;
}

typedef Observable_Event_output_event_event_sensor_msg_out_data {
    Observable_Event_output_event_event_sensor_msg_out_reading reading;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_data {
    Observable_Event_unhandled_input_event_actuator_msg_in_input_none input_none;
    Observable_Event_unhandled_input_event_actuator_msg_in_ctrl ctrl;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_out_data {
    Observable_Event_unhandled_input_event_actuator_msg_out_feedback feedback;
}

typedef Observable_Event_unhandled_input_event_egse_msg_in_tm {
    Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt reprt;
}

typedef Observable_Event_unhandled_input_event_egse_msg_out_tc {
    Observable_Event_unhandled_input_event_egse_msg_out_tc_cfg cfg;
}

typedef Observable_Event_unhandled_input_event_modemanager_msg_in_tc {
    Observable_Event_unhandled_input_event_modemanager_msg_in_tc_cfg cfg;
}

typedef Observable_Event_unhandled_input_event_modemanager_msg_out_tm {
    Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt reprt;
}

typedef Observable_Event_unhandled_input_event_sensor_msg_out_data {
    Observable_Event_unhandled_input_event_sensor_msg_out_reading reading;
}

typedef Sensor_Event_msg_out_data {
    Sensor_Event_msg_out_reading reading;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_data {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none input_none;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ctrl ctrl;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_out_data {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_feedback feedback;
}

typedef System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm {
    System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt reprt;
}

typedef System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc {
    System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc_cfg cfg;
}

typedef System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc {
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc_cfg cfg;
}

typedef System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm {
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt reprt;
}

typedef System_State_actuator_queue_elem_input_event_event_sensor_msg_out_data {
    System_State_actuator_queue_elem_input_event_event_sensor_msg_out_reading reading;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_data {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none input_none;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ctrl ctrl;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_out_data {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_feedback feedback;
}

typedef System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm {
    System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt reprt;
}

typedef System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc {
    System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc_cfg cfg;
}

typedef System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc {
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc_cfg cfg;
}

typedef System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm {
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt reprt;
}

typedef System_State_actuator_queue_elem_output_event_event_sensor_msg_out_data {
    System_State_actuator_queue_elem_output_event_event_sensor_msg_out_reading reading;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_data {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none input_none;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ctrl ctrl;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_data {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_feedback feedback;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm {
    System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt reprt;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc {
    System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg cfg;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc {
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg cfg;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm {
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt reprt;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_sensor_msg_out_data {
    System_State_actuator_queue_elem_unhandled_input_event_sensor_msg_out_reading reading;
}

typedef System_State_modemanager {
    System_State_modemanager_state state;
    System_State_modemanager_init_done init_done;
    System_State_modemanager_sender sender;
    System_State_modemanager_cfg cfg;
    System_State_modemanager_xin xin;
    System_State_modemanager_xout xout;
    System_State_modemanager_xfeedback xfeedback;
    System_State_modemanager_rprt rprt;
}

typedef System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_data {
    System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_input_none input_none;
    System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_ctrl ctrl;
}

typedef System_State_modemanager_queue_elem_input_event_event_actuator_msg_out_data {
    System_State_modemanager_queue_elem_input_event_event_actuator_msg_out_feedback feedback;
}

typedef System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm {
    System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt reprt;
}

typedef System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc {
    System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc_cfg cfg;
}

typedef System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc {
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc_cfg cfg;
}

typedef System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm {
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt reprt;
}

typedef System_State_modemanager_queue_elem_input_event_event_sensor_msg_out_data {
    System_State_modemanager_queue_elem_input_event_event_sensor_msg_out_reading reading;
}

typedef System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_data {
    System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_input_none input_none;
    System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_ctrl ctrl;
}

typedef System_State_modemanager_queue_elem_output_event_event_actuator_msg_out_data {
    System_State_modemanager_queue_elem_output_event_event_actuator_msg_out_feedback feedback;
}

typedef System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm {
    System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt reprt;
}

typedef System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc {
    System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc_cfg cfg;
}

typedef System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc {
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc_cfg cfg;
}

typedef System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm {
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt reprt;
}

typedef System_State_modemanager_queue_elem_output_event_event_sensor_msg_out_data {
    System_State_modemanager_queue_elem_output_event_event_sensor_msg_out_reading reading;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_data {
    System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_input_none input_none;
    System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_ctrl ctrl;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_out_data {
    System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_out_feedback feedback;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm {
    System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt reprt;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc {
    System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg cfg;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc {
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg cfg;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm {
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt reprt;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_sensor_msg_out_data {
    System_State_modemanager_queue_elem_unhandled_input_event_sensor_msg_out_reading reading;
}

typedef System_State_timers {
    System_State_timers_actuator actuator;
    System_State_timers_modemanager modemanager;
    System_State_timers_dummy_entry dummy_entry;
}

typedef Actuator_Event_msg_in {
    Actuator_Event_msg_in_data data;
    int selection;
}

typedef Actuator_Event_msg_out {
    Actuator_Event_msg_out_data data;
    int selection;
}

typedef Egse_Event_msg_in_data {
    Egse_Event_msg_in_tm tm;
}

typedef Egse_Event_msg_out_data {
    Egse_Event_msg_out_tc tc;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in {
    Events_Ty_elem_input_event_event_actuator_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_out {
    Events_Ty_elem_input_event_event_actuator_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_egse_msg_in_data {
    Events_Ty_elem_input_event_event_egse_msg_in_tm tm;
}

typedef Events_Ty_elem_input_event_event_egse_msg_out_data {
    Events_Ty_elem_input_event_event_egse_msg_out_tc tc;
}

typedef Events_Ty_elem_input_event_event_modemanager_msg_in_data {
    Events_Ty_elem_input_event_event_modemanager_msg_in_input_none input_none;
    Events_Ty_elem_input_event_event_modemanager_msg_in_feedback feedback;
    Events_Ty_elem_input_event_event_modemanager_msg_in_reading reading;
    Events_Ty_elem_input_event_event_modemanager_msg_in_tc tc;
}

typedef Events_Ty_elem_input_event_event_modemanager_msg_out_data {
    Events_Ty_elem_input_event_event_modemanager_msg_out_ctrl ctrl;
    Events_Ty_elem_input_event_event_modemanager_msg_out_tm tm;
}

typedef Events_Ty_elem_input_event_event_sensor_msg_out {
    Events_Ty_elem_input_event_event_sensor_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in {
    Events_Ty_elem_output_event_event_actuator_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_out {
    Events_Ty_elem_output_event_event_actuator_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_egse_msg_in_data {
    Events_Ty_elem_output_event_event_egse_msg_in_tm tm;
}

typedef Events_Ty_elem_output_event_event_egse_msg_out_data {
    Events_Ty_elem_output_event_event_egse_msg_out_tc tc;
}

typedef Events_Ty_elem_output_event_event_modemanager_msg_in_data {
    Events_Ty_elem_output_event_event_modemanager_msg_in_input_none input_none;
    Events_Ty_elem_output_event_event_modemanager_msg_in_feedback feedback;
    Events_Ty_elem_output_event_event_modemanager_msg_in_reading reading;
    Events_Ty_elem_output_event_event_modemanager_msg_in_tc tc;
}

typedef Events_Ty_elem_output_event_event_modemanager_msg_out_data {
    Events_Ty_elem_output_event_event_modemanager_msg_out_ctrl ctrl;
    Events_Ty_elem_output_event_event_modemanager_msg_out_tm tm;
}

typedef Events_Ty_elem_output_event_event_sensor_msg_out {
    Events_Ty_elem_output_event_event_sensor_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_out {
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_egse_msg_in_data {
    Events_Ty_elem_unhandled_input_event_egse_msg_in_tm tm;
}

typedef Events_Ty_elem_unhandled_input_event_egse_msg_out_data {
    Events_Ty_elem_unhandled_input_event_egse_msg_out_tc tc;
}

typedef Events_Ty_elem_unhandled_input_event_modemanager_msg_in_data {
    Events_Ty_elem_unhandled_input_event_modemanager_msg_in_input_none input_none;
    Events_Ty_elem_unhandled_input_event_modemanager_msg_in_feedback feedback;
    Events_Ty_elem_unhandled_input_event_modemanager_msg_in_reading reading;
    Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc tc;
}

typedef Events_Ty_elem_unhandled_input_event_modemanager_msg_out_data {
    Events_Ty_elem_unhandled_input_event_modemanager_msg_out_ctrl ctrl;
    Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm tm;
}

typedef Events_Ty_elem_unhandled_input_event_sensor_msg_out {
    Events_Ty_elem_unhandled_input_event_sensor_msg_out_data data;
    int selection;
}

typedef Function_Event_actuator_msg_in {
    Function_Event_actuator_msg_in_data data;
    int selection;
}

typedef Function_Event_actuator_msg_out {
    Function_Event_actuator_msg_out_data data;
    int selection;
}

typedef Function_Event_egse_msg_in_data {
    Function_Event_egse_msg_in_tm tm;
}

typedef Function_Event_egse_msg_out_data {
    Function_Event_egse_msg_out_tc tc;
}

typedef Function_Event_modemanager_msg_in_data {
    Function_Event_modemanager_msg_in_input_none input_none;
    Function_Event_modemanager_msg_in_feedback feedback;
    Function_Event_modemanager_msg_in_reading reading;
    Function_Event_modemanager_msg_in_tc tc;
}

typedef Function_Event_modemanager_msg_out_data {
    Function_Event_modemanager_msg_out_ctrl ctrl;
    Function_Event_modemanager_msg_out_tm tm;
}

typedef Function_Event_sensor_msg_out {
    Function_Event_sensor_msg_out_data data;
    int selection;
}

typedef Interface_Event_event_actuator_msg_in {
    Interface_Event_event_actuator_msg_in_data data;
    int selection;
}

typedef Interface_Event_event_actuator_msg_out {
    Interface_Event_event_actuator_msg_out_data data;
    int selection;
}

typedef Interface_Event_event_egse_msg_in_data {
    Interface_Event_event_egse_msg_in_tm tm;
}

typedef Interface_Event_event_egse_msg_out_data {
    Interface_Event_event_egse_msg_out_tc tc;
}

typedef Interface_Event_event_modemanager_msg_in_data {
    Interface_Event_event_modemanager_msg_in_input_none input_none;
    Interface_Event_event_modemanager_msg_in_feedback feedback;
    Interface_Event_event_modemanager_msg_in_reading reading;
    Interface_Event_event_modemanager_msg_in_tc tc;
}

typedef Interface_Event_event_modemanager_msg_out_data {
    Interface_Event_event_modemanager_msg_out_ctrl ctrl;
    Interface_Event_event_modemanager_msg_out_tm tm;
}

typedef Interface_Event_event_sensor_msg_out {
    Interface_Event_event_sensor_msg_out_data data;
    int selection;
}

typedef Modemanager_Event_msg_in_data {
    Modemanager_Event_msg_in_input_none input_none;
    Modemanager_Event_msg_in_feedback feedback;
    Modemanager_Event_msg_in_reading reading;
    Modemanager_Event_msg_in_tc tc;
}

typedef Modemanager_Event_msg_out_data {
    Modemanager_Event_msg_out_ctrl ctrl;
    Modemanager_Event_msg_out_tm tm;
}

typedef Named_Function_Event_event_actuator_msg_in {
    Named_Function_Event_event_actuator_msg_in_data data;
    int selection;
}

typedef Named_Function_Event_event_actuator_msg_out {
    Named_Function_Event_event_actuator_msg_out_data data;
    int selection;
}

typedef Named_Function_Event_event_egse_msg_in_data {
    Named_Function_Event_event_egse_msg_in_tm tm;
}

typedef Named_Function_Event_event_egse_msg_out_data {
    Named_Function_Event_event_egse_msg_out_tc tc;
}

typedef Named_Function_Event_event_modemanager_msg_in_data {
    Named_Function_Event_event_modemanager_msg_in_input_none input_none;
    Named_Function_Event_event_modemanager_msg_in_feedback feedback;
    Named_Function_Event_event_modemanager_msg_in_reading reading;
    Named_Function_Event_event_modemanager_msg_in_tc tc;
}

typedef Named_Function_Event_event_modemanager_msg_out_data {
    Named_Function_Event_event_modemanager_msg_out_ctrl ctrl;
    Named_Function_Event_event_modemanager_msg_out_tm tm;
}

typedef Named_Function_Event_event_sensor_msg_out {
    Named_Function_Event_event_sensor_msg_out_data data;
    int selection;
}

typedef Observable_Event_input_event_event_actuator_msg_in {
    Observable_Event_input_event_event_actuator_msg_in_data data;
    int selection;
}

typedef Observable_Event_input_event_event_actuator_msg_out {
    Observable_Event_input_event_event_actuator_msg_out_data data;
    int selection;
}

typedef Observable_Event_input_event_event_egse_msg_in_data {
    Observable_Event_input_event_event_egse_msg_in_tm tm;
}

typedef Observable_Event_input_event_event_egse_msg_out_data {
    Observable_Event_input_event_event_egse_msg_out_tc tc;
}

typedef Observable_Event_input_event_event_modemanager_msg_in_data {
    Observable_Event_input_event_event_modemanager_msg_in_input_none input_none;
    Observable_Event_input_event_event_modemanager_msg_in_feedback feedback;
    Observable_Event_input_event_event_modemanager_msg_in_reading reading;
    Observable_Event_input_event_event_modemanager_msg_in_tc tc;
}

typedef Observable_Event_input_event_event_modemanager_msg_out_data {
    Observable_Event_input_event_event_modemanager_msg_out_ctrl ctrl;
    Observable_Event_input_event_event_modemanager_msg_out_tm tm;
}

typedef Observable_Event_input_event_event_sensor_msg_out {
    Observable_Event_input_event_event_sensor_msg_out_data data;
    int selection;
}

typedef Observable_Event_output_event_event_actuator_msg_in {
    Observable_Event_output_event_event_actuator_msg_in_data data;
    int selection;
}

typedef Observable_Event_output_event_event_actuator_msg_out {
    Observable_Event_output_event_event_actuator_msg_out_data data;
    int selection;
}

typedef Observable_Event_output_event_event_egse_msg_in_data {
    Observable_Event_output_event_event_egse_msg_in_tm tm;
}

typedef Observable_Event_output_event_event_egse_msg_out_data {
    Observable_Event_output_event_event_egse_msg_out_tc tc;
}

typedef Observable_Event_output_event_event_modemanager_msg_in_data {
    Observable_Event_output_event_event_modemanager_msg_in_input_none input_none;
    Observable_Event_output_event_event_modemanager_msg_in_feedback feedback;
    Observable_Event_output_event_event_modemanager_msg_in_reading reading;
    Observable_Event_output_event_event_modemanager_msg_in_tc tc;
}

typedef Observable_Event_output_event_event_modemanager_msg_out_data {
    Observable_Event_output_event_event_modemanager_msg_out_ctrl ctrl;
    Observable_Event_output_event_event_modemanager_msg_out_tm tm;
}

typedef Observable_Event_output_event_event_sensor_msg_out {
    Observable_Event_output_event_event_sensor_msg_out_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in {
    Observable_Event_unhandled_input_event_actuator_msg_in_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_out {
    Observable_Event_unhandled_input_event_actuator_msg_out_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_egse_msg_in_data {
    Observable_Event_unhandled_input_event_egse_msg_in_tm tm;
}

typedef Observable_Event_unhandled_input_event_egse_msg_out_data {
    Observable_Event_unhandled_input_event_egse_msg_out_tc tc;
}

typedef Observable_Event_unhandled_input_event_modemanager_msg_in_data {
    Observable_Event_unhandled_input_event_modemanager_msg_in_input_none input_none;
    Observable_Event_unhandled_input_event_modemanager_msg_in_feedback feedback;
    Observable_Event_unhandled_input_event_modemanager_msg_in_reading reading;
    Observable_Event_unhandled_input_event_modemanager_msg_in_tc tc;
}

typedef Observable_Event_unhandled_input_event_modemanager_msg_out_data {
    Observable_Event_unhandled_input_event_modemanager_msg_out_ctrl ctrl;
    Observable_Event_unhandled_input_event_modemanager_msg_out_tm tm;
}

typedef Observable_Event_unhandled_input_event_sensor_msg_out {
    Observable_Event_unhandled_input_event_sensor_msg_out_data data;
    int selection;
}

typedef Sensor_Event_msg_out {
    Sensor_Event_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_out {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_egse_msg_in_data {
    System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm tm;
}

typedef System_State_actuator_queue_elem_input_event_event_egse_msg_out_data {
    System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc tc;
}

typedef System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_data {
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_input_none input_none;
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_feedback feedback;
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_reading reading;
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc tc;
}

typedef System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_data {
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_ctrl ctrl;
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm tm;
}

typedef System_State_actuator_queue_elem_input_event_event_sensor_msg_out {
    System_State_actuator_queue_elem_input_event_event_sensor_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_out {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_egse_msg_in_data {
    System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm tm;
}

typedef System_State_actuator_queue_elem_output_event_event_egse_msg_out_data {
    System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc tc;
}

typedef System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_data {
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_input_none input_none;
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_feedback feedback;
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_reading reading;
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc tc;
}

typedef System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_data {
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_ctrl ctrl;
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm tm;
}

typedef System_State_actuator_queue_elem_output_event_event_sensor_msg_out {
    System_State_actuator_queue_elem_output_event_event_sensor_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_data {
    System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm tm;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_data {
    System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc tc;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_data {
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_input_none input_none;
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_feedback feedback;
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_reading reading;
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc tc;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_data {
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl ctrl;
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm tm;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_sensor_msg_out {
    System_State_actuator_queue_elem_unhandled_input_event_sensor_msg_out_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_input_event_event_actuator_msg_in {
    System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_input_event_event_actuator_msg_out {
    System_State_modemanager_queue_elem_input_event_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_input_event_event_egse_msg_in_data {
    System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm tm;
}

typedef System_State_modemanager_queue_elem_input_event_event_egse_msg_out_data {
    System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc tc;
}

typedef System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_data {
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_input_none input_none;
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_feedback feedback;
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_reading reading;
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc tc;
}

typedef System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_data {
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_ctrl ctrl;
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm tm;
}

typedef System_State_modemanager_queue_elem_input_event_event_sensor_msg_out {
    System_State_modemanager_queue_elem_input_event_event_sensor_msg_out_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_output_event_event_actuator_msg_in {
    System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_output_event_event_actuator_msg_out {
    System_State_modemanager_queue_elem_output_event_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_output_event_event_egse_msg_in_data {
    System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm tm;
}

typedef System_State_modemanager_queue_elem_output_event_event_egse_msg_out_data {
    System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc tc;
}

typedef System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_data {
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_input_none input_none;
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_feedback feedback;
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_reading reading;
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc tc;
}

typedef System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_data {
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_ctrl ctrl;
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm tm;
}

typedef System_State_modemanager_queue_elem_output_event_event_sensor_msg_out {
    System_State_modemanager_queue_elem_output_event_event_sensor_msg_out_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in {
    System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_out {
    System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_data {
    System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm tm;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_data {
    System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc tc;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_data {
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_input_none input_none;
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_feedback feedback;
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_reading reading;
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc tc;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_data {
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl ctrl;
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm tm;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_sensor_msg_out {
    System_State_modemanager_queue_elem_unhandled_input_event_sensor_msg_out_data data;
    int selection;
}

typedef Actuator_Event_data {
    Actuator_Event_msg_in msg_in;
    Actuator_Event_msg_out msg_out;
}

typedef Egse_Event_msg_in {
    Egse_Event_msg_in_data data;
    int selection;
}

typedef Egse_Event_msg_out {
    Egse_Event_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_actuator_data {
    Events_Ty_elem_input_event_event_actuator_msg_in msg_in;
    Events_Ty_elem_input_event_event_actuator_msg_out msg_out;
}

typedef Events_Ty_elem_input_event_event_egse_msg_in {
    Events_Ty_elem_input_event_event_egse_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_egse_msg_out {
    Events_Ty_elem_input_event_event_egse_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_modemanager_msg_in {
    Events_Ty_elem_input_event_event_modemanager_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_modemanager_msg_out {
    Events_Ty_elem_input_event_event_modemanager_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_sensor_data {
    Events_Ty_elem_input_event_event_sensor_msg_out msg_out;
}

typedef Events_Ty_elem_output_event_event_actuator_data {
    Events_Ty_elem_output_event_event_actuator_msg_in msg_in;
    Events_Ty_elem_output_event_event_actuator_msg_out msg_out;
}

typedef Events_Ty_elem_output_event_event_egse_msg_in {
    Events_Ty_elem_output_event_event_egse_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_egse_msg_out {
    Events_Ty_elem_output_event_event_egse_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_modemanager_msg_in {
    Events_Ty_elem_output_event_event_modemanager_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_modemanager_msg_out {
    Events_Ty_elem_output_event_event_modemanager_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_sensor_data {
    Events_Ty_elem_output_event_event_sensor_msg_out msg_out;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_data {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in msg_in;
    Events_Ty_elem_unhandled_input_event_actuator_msg_out msg_out;
}

typedef Events_Ty_elem_unhandled_input_event_egse_msg_in {
    Events_Ty_elem_unhandled_input_event_egse_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_egse_msg_out {
    Events_Ty_elem_unhandled_input_event_egse_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_modemanager_msg_in {
    Events_Ty_elem_unhandled_input_event_modemanager_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_modemanager_msg_out {
    Events_Ty_elem_unhandled_input_event_modemanager_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_sensor_data {
    Events_Ty_elem_unhandled_input_event_sensor_msg_out msg_out;
}

typedef Function_Event_actuator_data {
    Function_Event_actuator_msg_in msg_in;
    Function_Event_actuator_msg_out msg_out;
}

typedef Function_Event_egse_msg_in {
    Function_Event_egse_msg_in_data data;
    int selection;
}

typedef Function_Event_egse_msg_out {
    Function_Event_egse_msg_out_data data;
    int selection;
}

typedef Function_Event_modemanager_msg_in {
    Function_Event_modemanager_msg_in_data data;
    int selection;
}

typedef Function_Event_modemanager_msg_out {
    Function_Event_modemanager_msg_out_data data;
    int selection;
}

typedef Function_Event_sensor_data {
    Function_Event_sensor_msg_out msg_out;
}

typedef Interface_Event_event_actuator_data {
    Interface_Event_event_actuator_msg_in msg_in;
    Interface_Event_event_actuator_msg_out msg_out;
}

typedef Interface_Event_event_egse_msg_in {
    Interface_Event_event_egse_msg_in_data data;
    int selection;
}

typedef Interface_Event_event_egse_msg_out {
    Interface_Event_event_egse_msg_out_data data;
    int selection;
}

typedef Interface_Event_event_modemanager_msg_in {
    Interface_Event_event_modemanager_msg_in_data data;
    int selection;
}

typedef Interface_Event_event_modemanager_msg_out {
    Interface_Event_event_modemanager_msg_out_data data;
    int selection;
}

typedef Interface_Event_event_sensor_data {
    Interface_Event_event_sensor_msg_out msg_out;
}

typedef Modemanager_Event_msg_in {
    Modemanager_Event_msg_in_data data;
    int selection;
}

typedef Modemanager_Event_msg_out {
    Modemanager_Event_msg_out_data data;
    int selection;
}

typedef Named_Function_Event_event_actuator_data {
    Named_Function_Event_event_actuator_msg_in msg_in;
    Named_Function_Event_event_actuator_msg_out msg_out;
}

typedef Named_Function_Event_event_egse_msg_in {
    Named_Function_Event_event_egse_msg_in_data data;
    int selection;
}

typedef Named_Function_Event_event_egse_msg_out {
    Named_Function_Event_event_egse_msg_out_data data;
    int selection;
}

typedef Named_Function_Event_event_modemanager_msg_in {
    Named_Function_Event_event_modemanager_msg_in_data data;
    int selection;
}

typedef Named_Function_Event_event_modemanager_msg_out {
    Named_Function_Event_event_modemanager_msg_out_data data;
    int selection;
}

typedef Named_Function_Event_event_sensor_data {
    Named_Function_Event_event_sensor_msg_out msg_out;
}

typedef Observable_Event_input_event_event_actuator_data {
    Observable_Event_input_event_event_actuator_msg_in msg_in;
    Observable_Event_input_event_event_actuator_msg_out msg_out;
}

typedef Observable_Event_input_event_event_egse_msg_in {
    Observable_Event_input_event_event_egse_msg_in_data data;
    int selection;
}

typedef Observable_Event_input_event_event_egse_msg_out {
    Observable_Event_input_event_event_egse_msg_out_data data;
    int selection;
}

typedef Observable_Event_input_event_event_modemanager_msg_in {
    Observable_Event_input_event_event_modemanager_msg_in_data data;
    int selection;
}

typedef Observable_Event_input_event_event_modemanager_msg_out {
    Observable_Event_input_event_event_modemanager_msg_out_data data;
    int selection;
}

typedef Observable_Event_input_event_event_sensor_data {
    Observable_Event_input_event_event_sensor_msg_out msg_out;
}

typedef Observable_Event_output_event_event_actuator_data {
    Observable_Event_output_event_event_actuator_msg_in msg_in;
    Observable_Event_output_event_event_actuator_msg_out msg_out;
}

typedef Observable_Event_output_event_event_egse_msg_in {
    Observable_Event_output_event_event_egse_msg_in_data data;
    int selection;
}

typedef Observable_Event_output_event_event_egse_msg_out {
    Observable_Event_output_event_event_egse_msg_out_data data;
    int selection;
}

typedef Observable_Event_output_event_event_modemanager_msg_in {
    Observable_Event_output_event_event_modemanager_msg_in_data data;
    int selection;
}

typedef Observable_Event_output_event_event_modemanager_msg_out {
    Observable_Event_output_event_event_modemanager_msg_out_data data;
    int selection;
}

typedef Observable_Event_output_event_event_sensor_data {
    Observable_Event_output_event_event_sensor_msg_out msg_out;
}

typedef Observable_Event_unhandled_input_event_actuator_data {
    Observable_Event_unhandled_input_event_actuator_msg_in msg_in;
    Observable_Event_unhandled_input_event_actuator_msg_out msg_out;
}

typedef Observable_Event_unhandled_input_event_egse_msg_in {
    Observable_Event_unhandled_input_event_egse_msg_in_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_egse_msg_out {
    Observable_Event_unhandled_input_event_egse_msg_out_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_modemanager_msg_in {
    Observable_Event_unhandled_input_event_modemanager_msg_in_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_modemanager_msg_out {
    Observable_Event_unhandled_input_event_modemanager_msg_out_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_sensor_data {
    Observable_Event_unhandled_input_event_sensor_msg_out msg_out;
}

typedef Sensor_Event_data {
    Sensor_Event_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_data {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in msg_in;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_input_event_event_egse_msg_in {
    System_State_actuator_queue_elem_input_event_event_egse_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_egse_msg_out {
    System_State_actuator_queue_elem_input_event_event_egse_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_modemanager_msg_in {
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_modemanager_msg_out {
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_sensor_data {
    System_State_actuator_queue_elem_input_event_event_sensor_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_data {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in msg_in;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_output_event_event_egse_msg_in {
    System_State_actuator_queue_elem_output_event_event_egse_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_egse_msg_out {
    System_State_actuator_queue_elem_output_event_event_egse_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_modemanager_msg_in {
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_modemanager_msg_out {
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_sensor_data {
    System_State_actuator_queue_elem_output_event_event_sensor_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_data {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in msg_in;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in {
    System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out {
    System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in {
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out {
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_sensor_data {
    System_State_actuator_queue_elem_unhandled_input_event_sensor_msg_out msg_out;
}

typedef System_State_modemanager_queue_elem_input_event_event_actuator_data {
    System_State_modemanager_queue_elem_input_event_event_actuator_msg_in msg_in;
    System_State_modemanager_queue_elem_input_event_event_actuator_msg_out msg_out;
}

typedef System_State_modemanager_queue_elem_input_event_event_egse_msg_in {
    System_State_modemanager_queue_elem_input_event_event_egse_msg_in_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_input_event_event_egse_msg_out {
    System_State_modemanager_queue_elem_input_event_event_egse_msg_out_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in {
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out {
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_input_event_event_sensor_data {
    System_State_modemanager_queue_elem_input_event_event_sensor_msg_out msg_out;
}

typedef System_State_modemanager_queue_elem_output_event_event_actuator_data {
    System_State_modemanager_queue_elem_output_event_event_actuator_msg_in msg_in;
    System_State_modemanager_queue_elem_output_event_event_actuator_msg_out msg_out;
}

typedef System_State_modemanager_queue_elem_output_event_event_egse_msg_in {
    System_State_modemanager_queue_elem_output_event_event_egse_msg_in_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_output_event_event_egse_msg_out {
    System_State_modemanager_queue_elem_output_event_event_egse_msg_out_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in {
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out {
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_output_event_event_sensor_data {
    System_State_modemanager_queue_elem_output_event_event_sensor_msg_out msg_out;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_actuator_data {
    System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in msg_in;
    System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_out msg_out;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in {
    System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out {
    System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in {
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out {
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_sensor_data {
    System_State_modemanager_queue_elem_unhandled_input_event_sensor_msg_out msg_out;
}

typedef Actuator_Event {
    Actuator_Event_data data;
    int selection;
}

typedef Egse_Event_data {
    Egse_Event_msg_in msg_in;
    Egse_Event_msg_out msg_out;
}

typedef Events_Ty_elem_input_event_event_actuator {
    Events_Ty_elem_input_event_event_actuator_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_egse_data {
    Events_Ty_elem_input_event_event_egse_msg_in msg_in;
    Events_Ty_elem_input_event_event_egse_msg_out msg_out;
}

typedef Events_Ty_elem_input_event_event_modemanager_data {
    Events_Ty_elem_input_event_event_modemanager_msg_in msg_in;
    Events_Ty_elem_input_event_event_modemanager_msg_out msg_out;
}

typedef Events_Ty_elem_input_event_event_sensor {
    Events_Ty_elem_input_event_event_sensor_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_actuator {
    Events_Ty_elem_output_event_event_actuator_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_egse_data {
    Events_Ty_elem_output_event_event_egse_msg_in msg_in;
    Events_Ty_elem_output_event_event_egse_msg_out msg_out;
}

typedef Events_Ty_elem_output_event_event_modemanager_data {
    Events_Ty_elem_output_event_event_modemanager_msg_in msg_in;
    Events_Ty_elem_output_event_event_modemanager_msg_out msg_out;
}

typedef Events_Ty_elem_output_event_event_sensor {
    Events_Ty_elem_output_event_event_sensor_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_actuator {
    Events_Ty_elem_unhandled_input_event_actuator_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_egse_data {
    Events_Ty_elem_unhandled_input_event_egse_msg_in msg_in;
    Events_Ty_elem_unhandled_input_event_egse_msg_out msg_out;
}

typedef Events_Ty_elem_unhandled_input_event_modemanager_data {
    Events_Ty_elem_unhandled_input_event_modemanager_msg_in msg_in;
    Events_Ty_elem_unhandled_input_event_modemanager_msg_out msg_out;
}

typedef Events_Ty_elem_unhandled_input_event_sensor {
    Events_Ty_elem_unhandled_input_event_sensor_data data;
    int selection;
}

typedef Function_Event_actuator {
    Function_Event_actuator_data data;
    int selection;
}

typedef Function_Event_egse_data {
    Function_Event_egse_msg_in msg_in;
    Function_Event_egse_msg_out msg_out;
}

typedef Function_Event_modemanager_data {
    Function_Event_modemanager_msg_in msg_in;
    Function_Event_modemanager_msg_out msg_out;
}

typedef Function_Event_sensor {
    Function_Event_sensor_data data;
    int selection;
}

typedef Interface_Event_event_actuator {
    Interface_Event_event_actuator_data data;
    int selection;
}

typedef Interface_Event_event_egse_data {
    Interface_Event_event_egse_msg_in msg_in;
    Interface_Event_event_egse_msg_out msg_out;
}

typedef Interface_Event_event_modemanager_data {
    Interface_Event_event_modemanager_msg_in msg_in;
    Interface_Event_event_modemanager_msg_out msg_out;
}

typedef Interface_Event_event_sensor {
    Interface_Event_event_sensor_data data;
    int selection;
}

typedef Modemanager_Event_data {
    Modemanager_Event_msg_in msg_in;
    Modemanager_Event_msg_out msg_out;
}

typedef Named_Function_Event_event_actuator {
    Named_Function_Event_event_actuator_data data;
    int selection;
}

typedef Named_Function_Event_event_egse_data {
    Named_Function_Event_event_egse_msg_in msg_in;
    Named_Function_Event_event_egse_msg_out msg_out;
}

typedef Named_Function_Event_event_modemanager_data {
    Named_Function_Event_event_modemanager_msg_in msg_in;
    Named_Function_Event_event_modemanager_msg_out msg_out;
}

typedef Named_Function_Event_event_sensor {
    Named_Function_Event_event_sensor_data data;
    int selection;
}

typedef Observable_Event_input_event_event_actuator {
    Observable_Event_input_event_event_actuator_data data;
    int selection;
}

typedef Observable_Event_input_event_event_egse_data {
    Observable_Event_input_event_event_egse_msg_in msg_in;
    Observable_Event_input_event_event_egse_msg_out msg_out;
}

typedef Observable_Event_input_event_event_modemanager_data {
    Observable_Event_input_event_event_modemanager_msg_in msg_in;
    Observable_Event_input_event_event_modemanager_msg_out msg_out;
}

typedef Observable_Event_input_event_event_sensor {
    Observable_Event_input_event_event_sensor_data data;
    int selection;
}

typedef Observable_Event_output_event_event_actuator {
    Observable_Event_output_event_event_actuator_data data;
    int selection;
}

typedef Observable_Event_output_event_event_egse_data {
    Observable_Event_output_event_event_egse_msg_in msg_in;
    Observable_Event_output_event_event_egse_msg_out msg_out;
}

typedef Observable_Event_output_event_event_modemanager_data {
    Observable_Event_output_event_event_modemanager_msg_in msg_in;
    Observable_Event_output_event_event_modemanager_msg_out msg_out;
}

typedef Observable_Event_output_event_event_sensor {
    Observable_Event_output_event_event_sensor_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_actuator {
    Observable_Event_unhandled_input_event_actuator_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_egse_data {
    Observable_Event_unhandled_input_event_egse_msg_in msg_in;
    Observable_Event_unhandled_input_event_egse_msg_out msg_out;
}

typedef Observable_Event_unhandled_input_event_modemanager_data {
    Observable_Event_unhandled_input_event_modemanager_msg_in msg_in;
    Observable_Event_unhandled_input_event_modemanager_msg_out msg_out;
}

typedef Observable_Event_unhandled_input_event_sensor {
    Observable_Event_unhandled_input_event_sensor_data data;
    int selection;
}

typedef Sensor_Event {
    Sensor_Event_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator {
    System_State_actuator_queue_elem_input_event_event_actuator_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_egse_data {
    System_State_actuator_queue_elem_input_event_event_egse_msg_in msg_in;
    System_State_actuator_queue_elem_input_event_event_egse_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_input_event_event_modemanager_data {
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_in msg_in;
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_input_event_event_sensor {
    System_State_actuator_queue_elem_input_event_event_sensor_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator {
    System_State_actuator_queue_elem_output_event_event_actuator_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_egse_data {
    System_State_actuator_queue_elem_output_event_event_egse_msg_in msg_in;
    System_State_actuator_queue_elem_output_event_event_egse_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_output_event_event_modemanager_data {
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_in msg_in;
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_output_event_event_sensor {
    System_State_actuator_queue_elem_output_event_event_sensor_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_egse_data {
    System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in msg_in;
    System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_modemanager_data {
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in msg_in;
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_sensor {
    System_State_actuator_queue_elem_unhandled_input_event_sensor_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_input_event_event_actuator {
    System_State_modemanager_queue_elem_input_event_event_actuator_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_input_event_event_egse_data {
    System_State_modemanager_queue_elem_input_event_event_egse_msg_in msg_in;
    System_State_modemanager_queue_elem_input_event_event_egse_msg_out msg_out;
}

typedef System_State_modemanager_queue_elem_input_event_event_modemanager_data {
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in msg_in;
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out msg_out;
}

typedef System_State_modemanager_queue_elem_input_event_event_sensor {
    System_State_modemanager_queue_elem_input_event_event_sensor_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_output_event_event_actuator {
    System_State_modemanager_queue_elem_output_event_event_actuator_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_output_event_event_egse_data {
    System_State_modemanager_queue_elem_output_event_event_egse_msg_in msg_in;
    System_State_modemanager_queue_elem_output_event_event_egse_msg_out msg_out;
}

typedef System_State_modemanager_queue_elem_output_event_event_modemanager_data {
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in msg_in;
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out msg_out;
}

typedef System_State_modemanager_queue_elem_output_event_event_sensor {
    System_State_modemanager_queue_elem_output_event_event_sensor_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_actuator {
    System_State_modemanager_queue_elem_unhandled_input_event_actuator_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_egse_data {
    System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in msg_in;
    System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out msg_out;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_modemanager_data {
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in msg_in;
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out msg_out;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_sensor {
    System_State_modemanager_queue_elem_unhandled_input_event_sensor_data data;
    int selection;
}

typedef Egse_Event {
    Egse_Event_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_egse {
    Events_Ty_elem_input_event_event_egse_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_modemanager {
    Events_Ty_elem_input_event_event_modemanager_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_egse {
    Events_Ty_elem_output_event_event_egse_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_modemanager {
    Events_Ty_elem_output_event_event_modemanager_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_egse {
    Events_Ty_elem_unhandled_input_event_egse_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_modemanager {
    Events_Ty_elem_unhandled_input_event_modemanager_data data;
    int selection;
}

typedef Function_Event_egse {
    Function_Event_egse_data data;
    int selection;
}

typedef Function_Event_modemanager {
    Function_Event_modemanager_data data;
    int selection;
}

typedef Interface_Event_event_egse {
    Interface_Event_event_egse_data data;
    int selection;
}

typedef Interface_Event_event_modemanager {
    Interface_Event_event_modemanager_data data;
    int selection;
}

typedef Modemanager_Event {
    Modemanager_Event_data data;
    int selection;
}

typedef Named_Function_Event_event_egse {
    Named_Function_Event_event_egse_data data;
    int selection;
}

typedef Named_Function_Event_event_modemanager {
    Named_Function_Event_event_modemanager_data data;
    int selection;
}

typedef Observable_Event_input_event_event_egse {
    Observable_Event_input_event_event_egse_data data;
    int selection;
}

typedef Observable_Event_input_event_event_modemanager {
    Observable_Event_input_event_event_modemanager_data data;
    int selection;
}

typedef Observable_Event_output_event_event_egse {
    Observable_Event_output_event_event_egse_data data;
    int selection;
}

typedef Observable_Event_output_event_event_modemanager {
    Observable_Event_output_event_event_modemanager_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_egse {
    Observable_Event_unhandled_input_event_egse_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_modemanager {
    Observable_Event_unhandled_input_event_modemanager_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_egse {
    System_State_actuator_queue_elem_input_event_event_egse_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_modemanager {
    System_State_actuator_queue_elem_input_event_event_modemanager_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_egse {
    System_State_actuator_queue_elem_output_event_event_egse_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_modemanager {
    System_State_actuator_queue_elem_output_event_event_modemanager_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_egse {
    System_State_actuator_queue_elem_unhandled_input_event_egse_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_modemanager {
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_input_event_event_egse {
    System_State_modemanager_queue_elem_input_event_event_egse_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_input_event_event_modemanager {
    System_State_modemanager_queue_elem_input_event_event_modemanager_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_output_event_event_egse {
    System_State_modemanager_queue_elem_output_event_event_egse_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_output_event_event_modemanager {
    System_State_modemanager_queue_elem_output_event_event_modemanager_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_egse {
    System_State_modemanager_queue_elem_unhandled_input_event_egse_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_modemanager {
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_data {
    Events_Ty_elem_input_event_event_actuator actuator;
    Events_Ty_elem_input_event_event_egse egse;
    Events_Ty_elem_input_event_event_modemanager modemanager;
    Events_Ty_elem_input_event_event_sensor sensor;
}

typedef Events_Ty_elem_output_event_event_data {
    Events_Ty_elem_output_event_event_actuator actuator;
    Events_Ty_elem_output_event_event_egse egse;
    Events_Ty_elem_output_event_event_modemanager modemanager;
    Events_Ty_elem_output_event_event_sensor sensor;
}

typedef Events_Ty_elem_unhandled_input_event_data {
    Events_Ty_elem_unhandled_input_event_actuator actuator;
    Events_Ty_elem_unhandled_input_event_egse egse;
    Events_Ty_elem_unhandled_input_event_modemanager modemanager;
    Events_Ty_elem_unhandled_input_event_sensor sensor;
}

typedef Function_Event_data {
    Function_Event_actuator actuator;
    Function_Event_egse egse;
    Function_Event_modemanager modemanager;
    Function_Event_sensor sensor;
}

typedef Interface_Event_event_data {
    Interface_Event_event_actuator actuator;
    Interface_Event_event_egse egse;
    Interface_Event_event_modemanager modemanager;
    Interface_Event_event_sensor sensor;
}

typedef Named_Function_Event_event_data {
    Named_Function_Event_event_actuator actuator;
    Named_Function_Event_event_egse egse;
    Named_Function_Event_event_modemanager modemanager;
    Named_Function_Event_event_sensor sensor;
}

typedef Observable_Event_input_event_event_data {
    Observable_Event_input_event_event_actuator actuator;
    Observable_Event_input_event_event_egse egse;
    Observable_Event_input_event_event_modemanager modemanager;
    Observable_Event_input_event_event_sensor sensor;
}

typedef Observable_Event_output_event_event_data {
    Observable_Event_output_event_event_actuator actuator;
    Observable_Event_output_event_event_egse egse;
    Observable_Event_output_event_event_modemanager modemanager;
    Observable_Event_output_event_event_sensor sensor;
}

typedef Observable_Event_unhandled_input_event_data {
    Observable_Event_unhandled_input_event_actuator actuator;
    Observable_Event_unhandled_input_event_egse egse;
    Observable_Event_unhandled_input_event_modemanager modemanager;
    Observable_Event_unhandled_input_event_sensor sensor;
}

typedef System_State_actuator_queue_elem_input_event_event_data {
    System_State_actuator_queue_elem_input_event_event_actuator actuator;
    System_State_actuator_queue_elem_input_event_event_egse egse;
    System_State_actuator_queue_elem_input_event_event_modemanager modemanager;
    System_State_actuator_queue_elem_input_event_event_sensor sensor;
}

typedef System_State_actuator_queue_elem_output_event_event_data {
    System_State_actuator_queue_elem_output_event_event_actuator actuator;
    System_State_actuator_queue_elem_output_event_event_egse egse;
    System_State_actuator_queue_elem_output_event_event_modemanager modemanager;
    System_State_actuator_queue_elem_output_event_event_sensor sensor;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_data {
    System_State_actuator_queue_elem_unhandled_input_event_actuator actuator;
    System_State_actuator_queue_elem_unhandled_input_event_egse egse;
    System_State_actuator_queue_elem_unhandled_input_event_modemanager modemanager;
    System_State_actuator_queue_elem_unhandled_input_event_sensor sensor;
}

typedef System_State_modemanager_queue_elem_input_event_event_data {
    System_State_modemanager_queue_elem_input_event_event_actuator actuator;
    System_State_modemanager_queue_elem_input_event_event_egse egse;
    System_State_modemanager_queue_elem_input_event_event_modemanager modemanager;
    System_State_modemanager_queue_elem_input_event_event_sensor sensor;
}

typedef System_State_modemanager_queue_elem_output_event_event_data {
    System_State_modemanager_queue_elem_output_event_event_actuator actuator;
    System_State_modemanager_queue_elem_output_event_event_egse egse;
    System_State_modemanager_queue_elem_output_event_event_modemanager modemanager;
    System_State_modemanager_queue_elem_output_event_event_sensor sensor;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event_data {
    System_State_modemanager_queue_elem_unhandled_input_event_actuator actuator;
    System_State_modemanager_queue_elem_unhandled_input_event_egse egse;
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager modemanager;
    System_State_modemanager_queue_elem_unhandled_input_event_sensor sensor;
}

typedef Events_Ty_elem_input_event_event {
    Events_Ty_elem_input_event_event_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event {
    Events_Ty_elem_output_event_event_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event {
    Events_Ty_elem_unhandled_input_event_data data;
    int selection;
}

typedef Function_Event {
    Function_Event_data data;
    int selection;
}

typedef Interface_Event_event {
    Interface_Event_event_data data;
    int selection;
}

typedef Named_Function_Event_event {
    Named_Function_Event_event_data data;
    int selection;
}

typedef Observable_Event_input_event_event {
    Observable_Event_input_event_event_data data;
    int selection;
}

typedef Observable_Event_output_event_event {
    Observable_Event_output_event_event_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event {
    Observable_Event_unhandled_input_event_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event {
    System_State_actuator_queue_elem_input_event_event_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event {
    System_State_actuator_queue_elem_output_event_event_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event {
    System_State_actuator_queue_elem_unhandled_input_event_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_input_event_event {
    System_State_modemanager_queue_elem_input_event_event_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_output_event_event {
    System_State_modemanager_queue_elem_output_event_event_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem_unhandled_input_event {
    System_State_modemanager_queue_elem_unhandled_input_event_data data;
    int selection;
}

typedef Events_Ty_elem_input_event {
    Events_Ty_elem_input_event_source source;
    Events_Ty_elem_input_event_dest dest;
    Events_Ty_elem_input_event_event event;
}

typedef Events_Ty_elem_output_event {
    Events_Ty_elem_output_event_source source;
    Events_Ty_elem_output_event_dest dest;
    Events_Ty_elem_output_event_event event;
}

typedef Events_Ty_elem_unhandled_input {
    Events_Ty_elem_unhandled_input_source source;
    Events_Ty_elem_unhandled_input_dest dest;
    Events_Ty_elem_unhandled_input_event event;
}

typedef Interface_Event {
    Interface_Event_source source;
    Interface_Event_dest dest;
    Interface_Event_event event;
}

typedef Named_Function_Event {
    Named_Function_Event_id id;
    Named_Function_Event_event event;
}

typedef Observable_Event_input_event {
    Observable_Event_input_event_source source;
    Observable_Event_input_event_dest dest;
    Observable_Event_input_event_event event;
}

typedef Observable_Event_output_event {
    Observable_Event_output_event_source source;
    Observable_Event_output_event_dest dest;
    Observable_Event_output_event_event event;
}

typedef Observable_Event_unhandled_input {
    Observable_Event_unhandled_input_source source;
    Observable_Event_unhandled_input_dest dest;
    Observable_Event_unhandled_input_event event;
}

typedef System_State_actuator_queue_elem_input_event {
    System_State_actuator_queue_elem_input_event_source source;
    System_State_actuator_queue_elem_input_event_dest dest;
    System_State_actuator_queue_elem_input_event_event event;
}

typedef System_State_actuator_queue_elem_output_event {
    System_State_actuator_queue_elem_output_event_source source;
    System_State_actuator_queue_elem_output_event_dest dest;
    System_State_actuator_queue_elem_output_event_event event;
}

typedef System_State_actuator_queue_elem_unhandled_input {
    System_State_actuator_queue_elem_unhandled_input_source source;
    System_State_actuator_queue_elem_unhandled_input_dest dest;
    System_State_actuator_queue_elem_unhandled_input_event event;
}

typedef System_State_modemanager_queue_elem_input_event {
    System_State_modemanager_queue_elem_input_event_source source;
    System_State_modemanager_queue_elem_input_event_dest dest;
    System_State_modemanager_queue_elem_input_event_event event;
}

typedef System_State_modemanager_queue_elem_output_event {
    System_State_modemanager_queue_elem_output_event_source source;
    System_State_modemanager_queue_elem_output_event_dest dest;
    System_State_modemanager_queue_elem_output_event_event event;
}

typedef System_State_modemanager_queue_elem_unhandled_input {
    System_State_modemanager_queue_elem_unhandled_input_source source;
    System_State_modemanager_queue_elem_unhandled_input_dest dest;
    System_State_modemanager_queue_elem_unhandled_input_event event;
}

typedef Events_Ty_elem_data {
    Events_Ty_elem_no_event no_event;
    Events_Ty_elem_system_startup system_startup;
    Events_Ty_elem_input_event input_event;
    Events_Ty_elem_output_event output_event;
    Events_Ty_elem_unhandled_input unhandled_input;
}

typedef Observable_Event_data {
    Observable_Event_no_event no_event;
    Observable_Event_system_startup system_startup;
    Observable_Event_input_event input_event;
    Observable_Event_output_event output_event;
    Observable_Event_unhandled_input unhandled_input;
}

typedef System_State_actuator_queue_elem_data {
    System_State_actuator_queue_elem_no_event no_event;
    System_State_actuator_queue_elem_system_startup system_startup;
    System_State_actuator_queue_elem_input_event input_event;
    System_State_actuator_queue_elem_output_event output_event;
    System_State_actuator_queue_elem_unhandled_input unhandled_input;
}

typedef System_State_modemanager_queue_elem_data {
    System_State_modemanager_queue_elem_no_event no_event;
    System_State_modemanager_queue_elem_system_startup system_startup;
    System_State_modemanager_queue_elem_input_event input_event;
    System_State_modemanager_queue_elem_output_event output_event;
    System_State_modemanager_queue_elem_unhandled_input unhandled_input;
}

typedef Events_Ty_elem {
    Events_Ty_elem_data data;
    int selection;
}

typedef Observable_Event {
    Observable_Event_data data;
    int selection;
}

typedef System_State_actuator_queue_elem {
    System_State_actuator_queue_elem_data data;
    int selection;
}

typedef System_State_modemanager_queue_elem {
    System_State_modemanager_queue_elem_data data;
    int selection;
}

typedef Events_Ty {
    Events_Ty_elem data[10];
    int length;
}

typedef System_State_actuator_queue {
    System_State_actuator_queue_elem data[2];
    int length;
}

typedef System_State_modemanager_queue {
    System_State_modemanager_queue_elem data[2];
    int length;
}

typedef System_State {
    System_State_timers timers;
    System_State_actuator_queue actuator_queue;
    System_State_modemanager_queue modemanager_queue;
    System_State_actuator actuator;
    System_State_modemanager modemanager;
}

Observable_Event nothing;
inline T_SmallInteger_assign_value(dst, src)
{
    dst = src;
    T_SmallInteger_range_check(dst);
}
inline T_SmallInteger_range_check(T_SmallInteger_vc)
{
    assert(((((T_SmallInteger_vc >= 0) && (T_SmallInteger_vc <= 0)) || ((T_SmallInteger_vc >= 4) && (T_SmallInteger_vc <= 4))) || ((T_SmallInteger_vc >= 10) && (T_SmallInteger_vc <= 10))));
}
inline Egse_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    Egse_tc_cfg_param_a_range_check(dst);
}
inline Egse_tc_cfg_param_a_range_check(Egse_tc_cfg_param_a_vc)
{
    assert(((((Egse_tc_cfg_param_a_vc >= 0) && (Egse_tc_cfg_param_a_vc <= 0)) || ((Egse_tc_cfg_param_a_vc >= 4) && (Egse_tc_cfg_param_a_vc <= 4))) || ((Egse_tc_cfg_param_a_vc >= 10) && (Egse_tc_cfg_param_a_vc <= 10))));
}
inline Egse_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    Egse_tc_cfg_param_b_range_check(dst);
}
inline Egse_tc_cfg_param_b_range_check(Egse_tc_cfg_param_b_vc)
{
    assert(((((Egse_tc_cfg_param_b_vc >= 0) && (Egse_tc_cfg_param_b_vc <= 0)) || ((Egse_tc_cfg_param_b_vc >= 4) && (Egse_tc_cfg_param_b_vc <= 4))) || ((Egse_tc_cfg_param_b_vc >= 10) && (Egse_tc_cfg_param_b_vc <= 10))));
}
inline Egse_tc_cfg_assign_value(dst, src)
{
    Egse_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    Egse_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline Sensor_reading_x_assign_value(dst, src)
{
    dst = src;
    Sensor_reading_x_range_check(dst);
}
inline Sensor_reading_x_range_check(Sensor_reading_x_vc)
{
    assert(((((Sensor_reading_x_vc >= 0) && (Sensor_reading_x_vc <= 0)) || ((Sensor_reading_x_vc >= 4) && (Sensor_reading_x_vc <= 4))) || ((Sensor_reading_x_vc >= 10) && (Sensor_reading_x_vc <= 10))));
}
inline Actuator_States_assign_value(dst, src)
{
    dst = src;
    Actuator_States_range_check(dst);
}
inline Actuator_States_range_check(Actuator_States_vc)
{
    assert(((Actuator_States_vc == Actuator_States_working) || (Actuator_States_vc == Actuator_States_idle)));
}
inline Actuator_Context_state_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_state_range_check(dst);
}
inline Actuator_Context_state_range_check(Actuator_Context_state_vc)
{
    assert(((Actuator_Context_state_vc == Actuator_Context_state_working) || (Actuator_Context_state_vc == Actuator_Context_state_idle)));
}
inline Actuator_Context_init_done_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_init_done_range_check(dst);
}
inline Actuator_Context_init_done_range_check(Actuator_Context_init_done_vc)
{
    assert(true);
}
inline Actuator_Context_sender_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_sender_range_check(dst);
}
inline Actuator_Context_sender_range_check(Actuator_Context_sender_vc)
{
    assert((((((Actuator_Context_sender_vc == Actuator_Context_sender_actuator) || (Actuator_Context_sender_vc == Actuator_Context_sender_egse)) || (Actuator_Context_sender_vc == Actuator_Context_sender_modemanager)) || (Actuator_Context_sender_vc == Actuator_Context_sender_sensor)) || (Actuator_Context_sender_vc == Actuator_Context_sender_env)));
}
inline Actuator_Context_x_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_x_range_check(dst);
}
inline Actuator_Context_x_range_check(Actuator_Context_x_vc)
{
    assert(((Actuator_Context_x_vc >= 0) && (Actuator_Context_x_vc <= 1000000)));
}
inline Actuator_Context_assign_value(dst, src)
{
    Actuator_Context_state_assign_value(dst.state, src.state);
    Actuator_Context_init_done_assign_value(dst.init_done, src.init_done);
    Actuator_Context_sender_assign_value(dst.sender, src.sender);
    Actuator_Context_x_assign_value(dst.x, src.x);
}
inline Modemanager_States_assign_value(dst, src)
{
    dst = src;
    Modemanager_States_range_check(dst);
}
inline Modemanager_States_range_check(Modemanager_States_vc)
{
    assert(((Modemanager_States_vc == Modemanager_States_uninitialized) || (Modemanager_States_vc == Modemanager_States_configured)));
}
inline Modemanager_Context_state_assign_value(dst, src)
{
    dst = src;
    Modemanager_Context_state_range_check(dst);
}
inline Modemanager_Context_state_range_check(Modemanager_Context_state_vc)
{
    assert(((Modemanager_Context_state_vc == Modemanager_Context_state_uninitialized) || (Modemanager_Context_state_vc == Modemanager_Context_state_configured)));
}
inline Modemanager_Context_init_done_assign_value(dst, src)
{
    dst = src;
    Modemanager_Context_init_done_range_check(dst);
}
inline Modemanager_Context_init_done_range_check(Modemanager_Context_init_done_vc)
{
    assert(true);
}
inline Modemanager_Context_sender_assign_value(dst, src)
{
    dst = src;
    Modemanager_Context_sender_range_check(dst);
}
inline Modemanager_Context_sender_range_check(Modemanager_Context_sender_vc)
{
    assert((((((Modemanager_Context_sender_vc == Modemanager_Context_sender_actuator) || (Modemanager_Context_sender_vc == Modemanager_Context_sender_egse)) || (Modemanager_Context_sender_vc == Modemanager_Context_sender_modemanager)) || (Modemanager_Context_sender_vc == Modemanager_Context_sender_sensor)) || (Modemanager_Context_sender_vc == Modemanager_Context_sender_env)));
}
inline Modemanager_Context_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    Modemanager_Context_cfg_param_a_range_check(dst);
}
inline Modemanager_Context_cfg_param_a_range_check(Modemanager_Context_cfg_param_a_vc)
{
    assert(((Modemanager_Context_cfg_param_a_vc >= 0) && (Modemanager_Context_cfg_param_a_vc <= 1000000)));
}
inline Modemanager_Context_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    Modemanager_Context_cfg_param_b_range_check(dst);
}
inline Modemanager_Context_cfg_param_b_range_check(Modemanager_Context_cfg_param_b_vc)
{
    assert(((Modemanager_Context_cfg_param_b_vc >= 0) && (Modemanager_Context_cfg_param_b_vc <= 1000000)));
}
inline Modemanager_Context_cfg_assign_value(dst, src)
{
    Modemanager_Context_cfg_param_a_assign_value(dst.param_a, src.param_a);
    Modemanager_Context_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline Modemanager_Context_xin_assign_value(dst, src)
{
    dst = src;
    Modemanager_Context_xin_range_check(dst);
}
inline Modemanager_Context_xin_range_check(Modemanager_Context_xin_vc)
{
    assert(((Modemanager_Context_xin_vc >= 0) && (Modemanager_Context_xin_vc <= 1000000)));
}
inline Modemanager_Context_xout_assign_value(dst, src)
{
    dst = src;
    Modemanager_Context_xout_range_check(dst);
}
inline Modemanager_Context_xout_range_check(Modemanager_Context_xout_vc)
{
    assert(((Modemanager_Context_xout_vc >= 0) && (Modemanager_Context_xout_vc <= 1000000)));
}
inline Modemanager_Context_xfeedback_assign_value(dst, src)
{
    dst = src;
    Modemanager_Context_xfeedback_range_check(dst);
}
inline Modemanager_Context_xfeedback_range_check(Modemanager_Context_xfeedback_vc)
{
    assert(((Modemanager_Context_xfeedback_vc >= 0) && (Modemanager_Context_xfeedback_vc <= 1000000)));
}
inline Modemanager_Context_rprt_reading_assign_value(dst, src)
{
    dst = src;
    Modemanager_Context_rprt_reading_range_check(dst);
}
inline Modemanager_Context_rprt_reading_range_check(Modemanager_Context_rprt_reading_vc)
{
    assert(((Modemanager_Context_rprt_reading_vc >= 0) && (Modemanager_Context_rprt_reading_vc <= 1000000)));
}
inline Modemanager_Context_rprt_ctrl_assign_value(dst, src)
{
    dst = src;
    Modemanager_Context_rprt_ctrl_range_check(dst);
}
inline Modemanager_Context_rprt_ctrl_range_check(Modemanager_Context_rprt_ctrl_vc)
{
    assert(((Modemanager_Context_rprt_ctrl_vc >= 0) && (Modemanager_Context_rprt_ctrl_vc <= 1000000)));
}
inline Modemanager_Context_rprt_feedback_assign_value(dst, src)
{
    dst = src;
    Modemanager_Context_rprt_feedback_range_check(dst);
}
inline Modemanager_Context_rprt_feedback_range_check(Modemanager_Context_rprt_feedback_vc)
{
    assert(((Modemanager_Context_rprt_feedback_vc >= 0) && (Modemanager_Context_rprt_feedback_vc <= 1000000)));
}
inline Modemanager_Context_rprt_assign_value(dst, src)
{
    Modemanager_Context_rprt_reading_assign_value(dst.reading, src.reading);
    Modemanager_Context_rprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    Modemanager_Context_rprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline Modemanager_Context_assign_value(dst, src)
{
    Modemanager_Context_state_assign_value(dst.state, src.state);
    Modemanager_Context_init_done_assign_value(dst.init_done, src.init_done);
    Modemanager_Context_sender_assign_value(dst.sender, src.sender);
    Modemanager_Context_cfg_assign_value(dst.cfg, src.cfg);
    Modemanager_Context_xin_assign_value(dst.xin, src.xin);
    Modemanager_Context_xout_assign_value(dst.xout, src.xout);
    Modemanager_Context_xfeedback_assign_value(dst.xfeedback, src.xfeedback);
    Modemanager_Context_rprt_assign_value(dst.rprt, src.rprt);
}
inline T_Integer_assign_value(dst, src)
{
    dst = src;
    T_Integer_range_check(dst);
}
inline T_Integer_range_check(T_Integer_vc)
{
    assert(((T_Integer_vc >= 0) && (T_Integer_vc <= 1000000)));
}
inline T_Config_param_a_assign_value(dst, src)
{
    dst = src;
    T_Config_param_a_range_check(dst);
}
inline T_Config_param_a_range_check(T_Config_param_a_vc)
{
    assert(((T_Config_param_a_vc >= 0) && (T_Config_param_a_vc <= 1000000)));
}
inline T_Config_param_b_assign_value(dst, src)
{
    dst = src;
    T_Config_param_b_range_check(dst);
}
inline T_Config_param_b_range_check(T_Config_param_b_vc)
{
    assert(((T_Config_param_b_vc >= 0) && (T_Config_param_b_vc <= 1000000)));
}
inline T_Config_assign_value(dst, src)
{
    T_Config_param_a_assign_value(dst.param_a, src.param_a);
    T_Config_param_b_assign_value(dst.param_b, src.param_b);
}
inline T_Report_reading_assign_value(dst, src)
{
    dst = src;
    T_Report_reading_range_check(dst);
}
inline T_Report_reading_range_check(T_Report_reading_vc)
{
    assert(((T_Report_reading_vc >= 0) && (T_Report_reading_vc <= 1000000)));
}
inline T_Report_ctrl_assign_value(dst, src)
{
    dst = src;
    T_Report_ctrl_range_check(dst);
}
inline T_Report_ctrl_range_check(T_Report_ctrl_vc)
{
    assert(((T_Report_ctrl_vc >= 0) && (T_Report_ctrl_vc <= 1000000)));
}
inline T_Report_feedback_assign_value(dst, src)
{
    dst = src;
    T_Report_feedback_range_check(dst);
}
inline T_Report_feedback_range_check(T_Report_feedback_vc)
{
    assert(((T_Report_feedback_vc >= 0) && (T_Report_feedback_vc <= 1000000)));
}
inline T_Report_assign_value(dst, src)
{
    T_Report_reading_assign_value(dst.reading, src.reading);
    T_Report_ctrl_assign_value(dst.ctrl, src.ctrl);
    T_Report_feedback_assign_value(dst.feedback, src.feedback);
}
inline T_Int32_assign_value(dst, src)
{
    dst = src;
    T_Int32_range_check(dst);
}
inline T_Int32_range_check(T_Int32_vc)
{
    assert(((T_Int32_vc >= -2147483648) && (T_Int32_vc <= 2147483647)));
}
inline T_UInt32_assign_value(dst, src)
{
    dst = src;
    T_UInt32_range_check(dst);
}
inline T_UInt32_range_check(T_UInt32_vc)
{
    assert(((T_UInt32_vc >= 0) && (T_UInt32_vc <= -1)));
}
inline T_Int8_assign_value(dst, src)
{
    dst = src;
    T_Int8_range_check(dst);
}
inline T_Int8_range_check(T_Int8_vc)
{
    assert(((T_Int8_vc >= -128) && (T_Int8_vc <= 127)));
}
inline T_UInt8_assign_value(dst, src)
{
    dst = src;
    T_UInt8_range_check(dst);
}
inline T_UInt8_range_check(T_UInt8_vc)
{
    assert(((T_UInt8_vc >= 0) && (T_UInt8_vc <= 255)));
}
inline T_Boolean_assign_value(dst, src)
{
    dst = src;
    T_Boolean_range_check(dst);
}
inline T_Boolean_range_check(T_Boolean_vc)
{
    assert(true);
}
inline T_Null_Record_assign_value(dst, src)
{
    skip;
}
inline PID_Range_assign_value(dst, src)
{
    dst = src;
    PID_Range_range_check(dst);
}
inline PID_Range_range_check(PID_Range_vc)
{
    assert(((PID_Range_vc >= 0) && (PID_Range_vc <= 4)));
}
inline PID_assign_value(dst, src)
{
    dst = src;
    PID_range_check(dst);
}
inline PID_range_check(PID_vc)
{
    assert((((((PID_vc == PID_actuator) || (PID_vc == PID_egse)) || (PID_vc == PID_modemanager)) || (PID_vc == PID_sensor)) || (PID_vc == PID_env)));
}
inline Actuator_Event_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Actuator_Event_msg_in_ctrl_x_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_ctrl_x_range_check(dst);
}
inline Actuator_Event_msg_in_ctrl_x_range_check(Actuator_Event_msg_in_ctrl_x_vc)
{
    assert(((Actuator_Event_msg_in_ctrl_x_vc >= 0) && (Actuator_Event_msg_in_ctrl_x_vc <= 1000000)));
}
inline Actuator_Event_msg_in_ctrl_assign_value(dst, src)
{
    Actuator_Event_msg_in_ctrl_x_assign_value(dst.x, src.x);
}
inline Actuator_Event_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Actuator_Event_msg_in_input_none_PRESENT);
        Actuator_Event_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Actuator_Event_msg_in_ctrl_PRESENT);
        Actuator_Event_msg_in_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  else;
        skip;
    fi;
}
inline Actuator_event_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Actuator_Event_msg_out_feedback_x_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_out_feedback_x_range_check(dst);
}
inline Actuator_Event_msg_out_feedback_x_range_check(Actuator_Event_msg_out_feedback_x_vc)
{
    assert(((Actuator_Event_msg_out_feedback_x_vc >= 0) && (Actuator_Event_msg_out_feedback_x_vc <= 1000000)));
}
inline Actuator_Event_msg_out_feedback_assign_value(dst, src)
{
    Actuator_Event_msg_out_feedback_x_assign_value(dst.x, src.x);
}
inline Actuator_Event_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Actuator_Event_msg_out_feedback_PRESENT);
        Actuator_Event_msg_out_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  else;
        skip;
    fi;
}
inline Actuator_event_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Actuator_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Actuator_Event_msg_in_PRESENT);
        Actuator_Event_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Actuator_Event_msg_out_PRESENT);
        Actuator_Event_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Actuator_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Egse_Event_msg_in_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    Egse_Event_msg_in_tm_reprt_reading_range_check(dst);
}
inline Egse_Event_msg_in_tm_reprt_reading_range_check(Egse_Event_msg_in_tm_reprt_reading_vc)
{
    assert(((Egse_Event_msg_in_tm_reprt_reading_vc >= 0) && (Egse_Event_msg_in_tm_reprt_reading_vc <= 1000000)));
}
inline Egse_Event_msg_in_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    Egse_Event_msg_in_tm_reprt_ctrl_range_check(dst);
}
inline Egse_Event_msg_in_tm_reprt_ctrl_range_check(Egse_Event_msg_in_tm_reprt_ctrl_vc)
{
    assert(((Egse_Event_msg_in_tm_reprt_ctrl_vc >= 0) && (Egse_Event_msg_in_tm_reprt_ctrl_vc <= 1000000)));
}
inline Egse_Event_msg_in_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    Egse_Event_msg_in_tm_reprt_feedback_range_check(dst);
}
inline Egse_Event_msg_in_tm_reprt_feedback_range_check(Egse_Event_msg_in_tm_reprt_feedback_vc)
{
    assert(((Egse_Event_msg_in_tm_reprt_feedback_vc >= 0) && (Egse_Event_msg_in_tm_reprt_feedback_vc <= 1000000)));
}
inline Egse_Event_msg_in_tm_reprt_assign_value(dst, src)
{
    Egse_Event_msg_in_tm_reprt_reading_assign_value(dst.reading, src.reading);
    Egse_Event_msg_in_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    Egse_Event_msg_in_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline Egse_Event_msg_in_tm_assign_value(dst, src)
{
    Egse_Event_msg_in_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline Egse_Event_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Egse_Event_msg_in_tm_PRESENT);
        Egse_Event_msg_in_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline Egse_event_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Egse_Event_msg_out_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    Egse_Event_msg_out_tc_cfg_param_a_range_check(dst);
}
inline Egse_Event_msg_out_tc_cfg_param_a_range_check(Egse_Event_msg_out_tc_cfg_param_a_vc)
{
    assert(((Egse_Event_msg_out_tc_cfg_param_a_vc >= 0) && (Egse_Event_msg_out_tc_cfg_param_a_vc <= 1000000)));
}
inline Egse_Event_msg_out_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    Egse_Event_msg_out_tc_cfg_param_b_range_check(dst);
}
inline Egse_Event_msg_out_tc_cfg_param_b_range_check(Egse_Event_msg_out_tc_cfg_param_b_vc)
{
    assert(((Egse_Event_msg_out_tc_cfg_param_b_vc >= 0) && (Egse_Event_msg_out_tc_cfg_param_b_vc <= 1000000)));
}
inline Egse_Event_msg_out_tc_cfg_assign_value(dst, src)
{
    Egse_Event_msg_out_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    Egse_Event_msg_out_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline Egse_Event_msg_out_tc_assign_value(dst, src)
{
    Egse_Event_msg_out_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline Egse_Event_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Egse_Event_msg_out_tc_PRESENT);
        Egse_Event_msg_out_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline Egse_event_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Egse_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Egse_Event_msg_in_PRESENT);
        Egse_Event_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Egse_Event_msg_out_PRESENT);
        Egse_Event_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Egse_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Modemanager_Event_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Modemanager_Event_msg_in_feedback_x_assign_value(dst, src)
{
    dst = src;
    Modemanager_Event_msg_in_feedback_x_range_check(dst);
}
inline Modemanager_Event_msg_in_feedback_x_range_check(Modemanager_Event_msg_in_feedback_x_vc)
{
    assert(((Modemanager_Event_msg_in_feedback_x_vc >= 0) && (Modemanager_Event_msg_in_feedback_x_vc <= 1000000)));
}
inline Modemanager_Event_msg_in_feedback_assign_value(dst, src)
{
    Modemanager_Event_msg_in_feedback_x_assign_value(dst.x, src.x);
}
inline Modemanager_Event_msg_in_reading_x_assign_value(dst, src)
{
    dst = src;
    Modemanager_Event_msg_in_reading_x_range_check(dst);
}
inline Modemanager_Event_msg_in_reading_x_range_check(Modemanager_Event_msg_in_reading_x_vc)
{
    assert(((Modemanager_Event_msg_in_reading_x_vc >= 0) && (Modemanager_Event_msg_in_reading_x_vc <= 1000000)));
}
inline Modemanager_Event_msg_in_reading_assign_value(dst, src)
{
    Modemanager_Event_msg_in_reading_x_assign_value(dst.x, src.x);
}
inline Modemanager_Event_msg_in_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    Modemanager_Event_msg_in_tc_cfg_param_a_range_check(dst);
}
inline Modemanager_Event_msg_in_tc_cfg_param_a_range_check(Modemanager_Event_msg_in_tc_cfg_param_a_vc)
{
    assert(((Modemanager_Event_msg_in_tc_cfg_param_a_vc >= 0) && (Modemanager_Event_msg_in_tc_cfg_param_a_vc <= 1000000)));
}
inline Modemanager_Event_msg_in_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    Modemanager_Event_msg_in_tc_cfg_param_b_range_check(dst);
}
inline Modemanager_Event_msg_in_tc_cfg_param_b_range_check(Modemanager_Event_msg_in_tc_cfg_param_b_vc)
{
    assert(((Modemanager_Event_msg_in_tc_cfg_param_b_vc >= 0) && (Modemanager_Event_msg_in_tc_cfg_param_b_vc <= 1000000)));
}
inline Modemanager_Event_msg_in_tc_cfg_assign_value(dst, src)
{
    Modemanager_Event_msg_in_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    Modemanager_Event_msg_in_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline Modemanager_Event_msg_in_tc_assign_value(dst, src)
{
    Modemanager_Event_msg_in_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline Modemanager_Event_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Modemanager_Event_msg_in_input_none_PRESENT);
        Modemanager_Event_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Modemanager_Event_msg_in_feedback_PRESENT);
        Modemanager_Event_msg_in_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  (dst.selection == Modemanager_Event_msg_in_reading_PRESENT);
        Modemanager_Event_msg_in_reading_assign_value(dst.data.reading, src.data.reading);
    ::  (dst.selection == Modemanager_Event_msg_in_tc_PRESENT);
        Modemanager_Event_msg_in_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline Modemanager_event_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Modemanager_Event_msg_out_ctrl_x_assign_value(dst, src)
{
    dst = src;
    Modemanager_Event_msg_out_ctrl_x_range_check(dst);
}
inline Modemanager_Event_msg_out_ctrl_x_range_check(Modemanager_Event_msg_out_ctrl_x_vc)
{
    assert(((Modemanager_Event_msg_out_ctrl_x_vc >= 0) && (Modemanager_Event_msg_out_ctrl_x_vc <= 1000000)));
}
inline Modemanager_Event_msg_out_ctrl_assign_value(dst, src)
{
    Modemanager_Event_msg_out_ctrl_x_assign_value(dst.x, src.x);
}
inline Modemanager_Event_msg_out_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    Modemanager_Event_msg_out_tm_reprt_reading_range_check(dst);
}
inline Modemanager_Event_msg_out_tm_reprt_reading_range_check(Modemanager_Event_msg_out_tm_reprt_reading_vc)
{
    assert(((Modemanager_Event_msg_out_tm_reprt_reading_vc >= 0) && (Modemanager_Event_msg_out_tm_reprt_reading_vc <= 1000000)));
}
inline Modemanager_Event_msg_out_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    Modemanager_Event_msg_out_tm_reprt_ctrl_range_check(dst);
}
inline Modemanager_Event_msg_out_tm_reprt_ctrl_range_check(Modemanager_Event_msg_out_tm_reprt_ctrl_vc)
{
    assert(((Modemanager_Event_msg_out_tm_reprt_ctrl_vc >= 0) && (Modemanager_Event_msg_out_tm_reprt_ctrl_vc <= 1000000)));
}
inline Modemanager_Event_msg_out_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    Modemanager_Event_msg_out_tm_reprt_feedback_range_check(dst);
}
inline Modemanager_Event_msg_out_tm_reprt_feedback_range_check(Modemanager_Event_msg_out_tm_reprt_feedback_vc)
{
    assert(((Modemanager_Event_msg_out_tm_reprt_feedback_vc >= 0) && (Modemanager_Event_msg_out_tm_reprt_feedback_vc <= 1000000)));
}
inline Modemanager_Event_msg_out_tm_reprt_assign_value(dst, src)
{
    Modemanager_Event_msg_out_tm_reprt_reading_assign_value(dst.reading, src.reading);
    Modemanager_Event_msg_out_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    Modemanager_Event_msg_out_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline Modemanager_Event_msg_out_tm_assign_value(dst, src)
{
    Modemanager_Event_msg_out_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline Modemanager_Event_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Modemanager_Event_msg_out_ctrl_PRESENT);
        Modemanager_Event_msg_out_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  (dst.selection == Modemanager_Event_msg_out_tm_PRESENT);
        Modemanager_Event_msg_out_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline Modemanager_event_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Modemanager_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Modemanager_Event_msg_in_PRESENT);
        Modemanager_Event_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Modemanager_Event_msg_out_PRESENT);
        Modemanager_Event_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Modemanager_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Sensor_Event_msg_out_reading_x_assign_value(dst, src)
{
    dst = src;
    Sensor_Event_msg_out_reading_x_range_check(dst);
}
inline Sensor_Event_msg_out_reading_x_range_check(Sensor_Event_msg_out_reading_x_vc)
{
    assert(((Sensor_Event_msg_out_reading_x_vc >= 0) && (Sensor_Event_msg_out_reading_x_vc <= 1000000)));
}
inline Sensor_Event_msg_out_reading_assign_value(dst, src)
{
    Sensor_Event_msg_out_reading_x_assign_value(dst.x, src.x);
}
inline Sensor_Event_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Sensor_Event_msg_out_reading_PRESENT);
        Sensor_Event_msg_out_reading_assign_value(dst.data.reading, src.data.reading);
    ::  else;
        skip;
    fi;
}
inline Sensor_event_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Sensor_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Sensor_Event_msg_out_PRESENT);
        Sensor_Event_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Sensor_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observer_State_Kind_assign_value(dst, src)
{
    dst = src;
    Observer_State_Kind_range_check(dst);
}
inline Observer_State_Kind_range_check(Observer_State_Kind_vc)
{
    assert(((((Observer_State_Kind_vc == Observer_State_Kind_regular_state) || (Observer_State_Kind_vc == Observer_State_Kind_error_state)) || (Observer_State_Kind_vc == Observer_State_Kind_ignore_state)) || (Observer_State_Kind_vc == Observer_State_Kind_success_state)));
}
inline Function_Event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Function_Event_actuator_msg_in_ctrl_x_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_ctrl_x_range_check(dst);
}
inline Function_Event_actuator_msg_in_ctrl_x_range_check(Function_Event_actuator_msg_in_ctrl_x_vc)
{
    assert(((Function_Event_actuator_msg_in_ctrl_x_vc >= 0) && (Function_Event_actuator_msg_in_ctrl_x_vc <= 1000000)));
}
inline Function_Event_actuator_msg_in_ctrl_assign_value(dst, src)
{
    Function_Event_actuator_msg_in_ctrl_x_assign_value(dst.x, src.x);
}
inline Function_Event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_actuator_msg_in_input_none_PRESENT);
        Function_Event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Function_Event_actuator_msg_in_ctrl_PRESENT);
        Function_Event_actuator_msg_in_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  else;
        skip;
    fi;
}
inline Function_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_actuator_msg_out_feedback_x_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_out_feedback_x_range_check(dst);
}
inline Function_Event_actuator_msg_out_feedback_x_range_check(Function_Event_actuator_msg_out_feedback_x_vc)
{
    assert(((Function_Event_actuator_msg_out_feedback_x_vc >= 0) && (Function_Event_actuator_msg_out_feedback_x_vc <= 1000000)));
}
inline Function_Event_actuator_msg_out_feedback_assign_value(dst, src)
{
    Function_Event_actuator_msg_out_feedback_x_assign_value(dst.x, src.x);
}
inline Function_Event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_actuator_msg_out_feedback_PRESENT);
        Function_Event_actuator_msg_out_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  else;
        skip;
    fi;
}
inline Function_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_actuator_msg_in_PRESENT);
        Function_Event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Function_Event_actuator_msg_out_PRESENT);
        Function_Event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Function_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_egse_msg_in_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    Function_Event_egse_msg_in_tm_reprt_reading_range_check(dst);
}
inline Function_Event_egse_msg_in_tm_reprt_reading_range_check(Function_Event_egse_msg_in_tm_reprt_reading_vc)
{
    assert(((Function_Event_egse_msg_in_tm_reprt_reading_vc >= 0) && (Function_Event_egse_msg_in_tm_reprt_reading_vc <= 1000000)));
}
inline Function_Event_egse_msg_in_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    Function_Event_egse_msg_in_tm_reprt_ctrl_range_check(dst);
}
inline Function_Event_egse_msg_in_tm_reprt_ctrl_range_check(Function_Event_egse_msg_in_tm_reprt_ctrl_vc)
{
    assert(((Function_Event_egse_msg_in_tm_reprt_ctrl_vc >= 0) && (Function_Event_egse_msg_in_tm_reprt_ctrl_vc <= 1000000)));
}
inline Function_Event_egse_msg_in_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    Function_Event_egse_msg_in_tm_reprt_feedback_range_check(dst);
}
inline Function_Event_egse_msg_in_tm_reprt_feedback_range_check(Function_Event_egse_msg_in_tm_reprt_feedback_vc)
{
    assert(((Function_Event_egse_msg_in_tm_reprt_feedback_vc >= 0) && (Function_Event_egse_msg_in_tm_reprt_feedback_vc <= 1000000)));
}
inline Function_Event_egse_msg_in_tm_reprt_assign_value(dst, src)
{
    Function_Event_egse_msg_in_tm_reprt_reading_assign_value(dst.reading, src.reading);
    Function_Event_egse_msg_in_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    Function_Event_egse_msg_in_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline Function_Event_egse_msg_in_tm_assign_value(dst, src)
{
    Function_Event_egse_msg_in_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline Function_Event_egse_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_egse_msg_in_tm_PRESENT);
        Function_Event_egse_msg_in_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline Function_event_egse_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_egse_msg_out_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    Function_Event_egse_msg_out_tc_cfg_param_a_range_check(dst);
}
inline Function_Event_egse_msg_out_tc_cfg_param_a_range_check(Function_Event_egse_msg_out_tc_cfg_param_a_vc)
{
    assert(((Function_Event_egse_msg_out_tc_cfg_param_a_vc >= 0) && (Function_Event_egse_msg_out_tc_cfg_param_a_vc <= 1000000)));
}
inline Function_Event_egse_msg_out_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    Function_Event_egse_msg_out_tc_cfg_param_b_range_check(dst);
}
inline Function_Event_egse_msg_out_tc_cfg_param_b_range_check(Function_Event_egse_msg_out_tc_cfg_param_b_vc)
{
    assert(((Function_Event_egse_msg_out_tc_cfg_param_b_vc >= 0) && (Function_Event_egse_msg_out_tc_cfg_param_b_vc <= 1000000)));
}
inline Function_Event_egse_msg_out_tc_cfg_assign_value(dst, src)
{
    Function_Event_egse_msg_out_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    Function_Event_egse_msg_out_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline Function_Event_egse_msg_out_tc_assign_value(dst, src)
{
    Function_Event_egse_msg_out_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline Function_Event_egse_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_egse_msg_out_tc_PRESENT);
        Function_Event_egse_msg_out_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline Function_event_egse_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_egse_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_egse_msg_in_PRESENT);
        Function_Event_egse_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Function_Event_egse_msg_out_PRESENT);
        Function_Event_egse_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Function_event_egse_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_modemanager_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Function_Event_modemanager_msg_in_feedback_x_assign_value(dst, src)
{
    dst = src;
    Function_Event_modemanager_msg_in_feedback_x_range_check(dst);
}
inline Function_Event_modemanager_msg_in_feedback_x_range_check(Function_Event_modemanager_msg_in_feedback_x_vc)
{
    assert(((Function_Event_modemanager_msg_in_feedback_x_vc >= 0) && (Function_Event_modemanager_msg_in_feedback_x_vc <= 1000000)));
}
inline Function_Event_modemanager_msg_in_feedback_assign_value(dst, src)
{
    Function_Event_modemanager_msg_in_feedback_x_assign_value(dst.x, src.x);
}
inline Function_Event_modemanager_msg_in_reading_x_assign_value(dst, src)
{
    dst = src;
    Function_Event_modemanager_msg_in_reading_x_range_check(dst);
}
inline Function_Event_modemanager_msg_in_reading_x_range_check(Function_Event_modemanager_msg_in_reading_x_vc)
{
    assert(((Function_Event_modemanager_msg_in_reading_x_vc >= 0) && (Function_Event_modemanager_msg_in_reading_x_vc <= 1000000)));
}
inline Function_Event_modemanager_msg_in_reading_assign_value(dst, src)
{
    Function_Event_modemanager_msg_in_reading_x_assign_value(dst.x, src.x);
}
inline Function_Event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    Function_Event_modemanager_msg_in_tc_cfg_param_a_range_check(dst);
}
inline Function_Event_modemanager_msg_in_tc_cfg_param_a_range_check(Function_Event_modemanager_msg_in_tc_cfg_param_a_vc)
{
    assert(((Function_Event_modemanager_msg_in_tc_cfg_param_a_vc >= 0) && (Function_Event_modemanager_msg_in_tc_cfg_param_a_vc <= 1000000)));
}
inline Function_Event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    Function_Event_modemanager_msg_in_tc_cfg_param_b_range_check(dst);
}
inline Function_Event_modemanager_msg_in_tc_cfg_param_b_range_check(Function_Event_modemanager_msg_in_tc_cfg_param_b_vc)
{
    assert(((Function_Event_modemanager_msg_in_tc_cfg_param_b_vc >= 0) && (Function_Event_modemanager_msg_in_tc_cfg_param_b_vc <= 1000000)));
}
inline Function_Event_modemanager_msg_in_tc_cfg_assign_value(dst, src)
{
    Function_Event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    Function_Event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline Function_Event_modemanager_msg_in_tc_assign_value(dst, src)
{
    Function_Event_modemanager_msg_in_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline Function_Event_modemanager_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_modemanager_msg_in_input_none_PRESENT);
        Function_Event_modemanager_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Function_Event_modemanager_msg_in_feedback_PRESENT);
        Function_Event_modemanager_msg_in_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  (dst.selection == Function_Event_modemanager_msg_in_reading_PRESENT);
        Function_Event_modemanager_msg_in_reading_assign_value(dst.data.reading, src.data.reading);
    ::  (dst.selection == Function_Event_modemanager_msg_in_tc_PRESENT);
        Function_Event_modemanager_msg_in_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline Function_event_modemanager_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_modemanager_msg_out_ctrl_x_assign_value(dst, src)
{
    dst = src;
    Function_Event_modemanager_msg_out_ctrl_x_range_check(dst);
}
inline Function_Event_modemanager_msg_out_ctrl_x_range_check(Function_Event_modemanager_msg_out_ctrl_x_vc)
{
    assert(((Function_Event_modemanager_msg_out_ctrl_x_vc >= 0) && (Function_Event_modemanager_msg_out_ctrl_x_vc <= 1000000)));
}
inline Function_Event_modemanager_msg_out_ctrl_assign_value(dst, src)
{
    Function_Event_modemanager_msg_out_ctrl_x_assign_value(dst.x, src.x);
}
inline Function_Event_modemanager_msg_out_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    Function_Event_modemanager_msg_out_tm_reprt_reading_range_check(dst);
}
inline Function_Event_modemanager_msg_out_tm_reprt_reading_range_check(Function_Event_modemanager_msg_out_tm_reprt_reading_vc)
{
    assert(((Function_Event_modemanager_msg_out_tm_reprt_reading_vc >= 0) && (Function_Event_modemanager_msg_out_tm_reprt_reading_vc <= 1000000)));
}
inline Function_Event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    Function_Event_modemanager_msg_out_tm_reprt_ctrl_range_check(dst);
}
inline Function_Event_modemanager_msg_out_tm_reprt_ctrl_range_check(Function_Event_modemanager_msg_out_tm_reprt_ctrl_vc)
{
    assert(((Function_Event_modemanager_msg_out_tm_reprt_ctrl_vc >= 0) && (Function_Event_modemanager_msg_out_tm_reprt_ctrl_vc <= 1000000)));
}
inline Function_Event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    Function_Event_modemanager_msg_out_tm_reprt_feedback_range_check(dst);
}
inline Function_Event_modemanager_msg_out_tm_reprt_feedback_range_check(Function_Event_modemanager_msg_out_tm_reprt_feedback_vc)
{
    assert(((Function_Event_modemanager_msg_out_tm_reprt_feedback_vc >= 0) && (Function_Event_modemanager_msg_out_tm_reprt_feedback_vc <= 1000000)));
}
inline Function_Event_modemanager_msg_out_tm_reprt_assign_value(dst, src)
{
    Function_Event_modemanager_msg_out_tm_reprt_reading_assign_value(dst.reading, src.reading);
    Function_Event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    Function_Event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline Function_Event_modemanager_msg_out_tm_assign_value(dst, src)
{
    Function_Event_modemanager_msg_out_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline Function_Event_modemanager_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_modemanager_msg_out_ctrl_PRESENT);
        Function_Event_modemanager_msg_out_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  (dst.selection == Function_Event_modemanager_msg_out_tm_PRESENT);
        Function_Event_modemanager_msg_out_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline Function_event_modemanager_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_modemanager_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_modemanager_msg_in_PRESENT);
        Function_Event_modemanager_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Function_Event_modemanager_msg_out_PRESENT);
        Function_Event_modemanager_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Function_event_modemanager_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_sensor_msg_out_reading_x_assign_value(dst, src)
{
    dst = src;
    Function_Event_sensor_msg_out_reading_x_range_check(dst);
}
inline Function_Event_sensor_msg_out_reading_x_range_check(Function_Event_sensor_msg_out_reading_x_vc)
{
    assert(((Function_Event_sensor_msg_out_reading_x_vc >= 0) && (Function_Event_sensor_msg_out_reading_x_vc <= 1000000)));
}
inline Function_Event_sensor_msg_out_reading_assign_value(dst, src)
{
    Function_Event_sensor_msg_out_reading_x_assign_value(dst.x, src.x);
}
inline Function_Event_sensor_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_sensor_msg_out_reading_PRESENT);
        Function_Event_sensor_msg_out_reading_assign_value(dst.data.reading, src.data.reading);
    ::  else;
        skip;
    fi;
}
inline Function_event_sensor_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_sensor_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_sensor_msg_out_PRESENT);
        Function_Event_sensor_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Function_event_sensor_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_actuator_PRESENT);
        Function_Event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Function_Event_egse_PRESENT);
        Function_Event_egse_assign_value(dst.data.egse, src.data.egse);
    ::  (dst.selection == Function_Event_modemanager_PRESENT);
        Function_Event_modemanager_assign_value(dst.data.modemanager, src.data.modemanager);
    ::  (dst.selection == Function_Event_sensor_PRESENT);
        Function_Event_sensor_assign_value(dst.data.sensor, src.data.sensor);
    ::  else;
        skip;
    fi;
}
inline Function_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_id_assign_value(dst, src)
{
    Named_Function_Event_id_size_check(src.length);
    int i;
    for(i : 0 .. (src.length - 1))
    {
        dst.data[i] = src.data[i];
    }
    for(i : src.length .. 79)
    {
        dst.data[i] = 0;
    }
    dst.length = src.length;
}
inline Named_Function_Event_id_size_check(Named_Function_Event_id_sc)
{
    assert(((Named_Function_Event_id_sc >= 1) && (Named_Function_Event_id_sc <= 80)));
}
inline Named_Function_Event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Named_Function_Event_event_actuator_msg_in_ctrl_x_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_ctrl_x_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_ctrl_x_range_check(Named_Function_Event_event_actuator_msg_in_ctrl_x_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_ctrl_x_vc >= 0) && (Named_Function_Event_event_actuator_msg_in_ctrl_x_vc <= 1000000)));
}
inline Named_Function_Event_event_actuator_msg_in_ctrl_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_in_ctrl_x_assign_value(dst.x, src.x);
}
inline Named_Function_Event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_input_none_PRESENT);
        Named_Function_Event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_ctrl_PRESENT);
        Named_Function_Event_event_actuator_msg_in_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_actuator_msg_out_feedback_x_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_out_feedback_x_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_out_feedback_x_range_check(Named_Function_Event_event_actuator_msg_out_feedback_x_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_out_feedback_x_vc >= 0) && (Named_Function_Event_event_actuator_msg_out_feedback_x_vc <= 1000000)));
}
inline Named_Function_Event_event_actuator_msg_out_feedback_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_out_feedback_x_assign_value(dst.x, src.x);
}
inline Named_Function_Event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_out_feedback_PRESENT);
        Named_Function_Event_event_actuator_msg_out_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_PRESENT);
        Named_Function_Event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_out_PRESENT);
        Named_Function_Event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_egse_msg_in_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_egse_msg_in_tm_reprt_reading_range_check(dst);
}
inline Named_Function_Event_event_egse_msg_in_tm_reprt_reading_range_check(Named_Function_Event_event_egse_msg_in_tm_reprt_reading_vc)
{
    assert(((Named_Function_Event_event_egse_msg_in_tm_reprt_reading_vc >= 0) && (Named_Function_Event_event_egse_msg_in_tm_reprt_reading_vc <= 1000000)));
}
inline Named_Function_Event_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_egse_msg_in_tm_reprt_ctrl_range_check(dst);
}
inline Named_Function_Event_event_egse_msg_in_tm_reprt_ctrl_range_check(Named_Function_Event_event_egse_msg_in_tm_reprt_ctrl_vc)
{
    assert(((Named_Function_Event_event_egse_msg_in_tm_reprt_ctrl_vc >= 0) && (Named_Function_Event_event_egse_msg_in_tm_reprt_ctrl_vc <= 1000000)));
}
inline Named_Function_Event_event_egse_msg_in_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_egse_msg_in_tm_reprt_feedback_range_check(dst);
}
inline Named_Function_Event_event_egse_msg_in_tm_reprt_feedback_range_check(Named_Function_Event_event_egse_msg_in_tm_reprt_feedback_vc)
{
    assert(((Named_Function_Event_event_egse_msg_in_tm_reprt_feedback_vc >= 0) && (Named_Function_Event_event_egse_msg_in_tm_reprt_feedback_vc <= 1000000)));
}
inline Named_Function_Event_event_egse_msg_in_tm_reprt_assign_value(dst, src)
{
    Named_Function_Event_event_egse_msg_in_tm_reprt_reading_assign_value(dst.reading, src.reading);
    Named_Function_Event_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    Named_Function_Event_event_egse_msg_in_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline Named_Function_Event_event_egse_msg_in_tm_assign_value(dst, src)
{
    Named_Function_Event_event_egse_msg_in_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline Named_Function_Event_event_egse_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_egse_msg_in_tm_PRESENT);
        Named_Function_Event_event_egse_msg_in_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_egse_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_egse_msg_out_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_egse_msg_out_tc_cfg_param_a_range_check(dst);
}
inline Named_Function_Event_event_egse_msg_out_tc_cfg_param_a_range_check(Named_Function_Event_event_egse_msg_out_tc_cfg_param_a_vc)
{
    assert(((Named_Function_Event_event_egse_msg_out_tc_cfg_param_a_vc >= 0) && (Named_Function_Event_event_egse_msg_out_tc_cfg_param_a_vc <= 1000000)));
}
inline Named_Function_Event_event_egse_msg_out_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_egse_msg_out_tc_cfg_param_b_range_check(dst);
}
inline Named_Function_Event_event_egse_msg_out_tc_cfg_param_b_range_check(Named_Function_Event_event_egse_msg_out_tc_cfg_param_b_vc)
{
    assert(((Named_Function_Event_event_egse_msg_out_tc_cfg_param_b_vc >= 0) && (Named_Function_Event_event_egse_msg_out_tc_cfg_param_b_vc <= 1000000)));
}
inline Named_Function_Event_event_egse_msg_out_tc_cfg_assign_value(dst, src)
{
    Named_Function_Event_event_egse_msg_out_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    Named_Function_Event_event_egse_msg_out_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline Named_Function_Event_event_egse_msg_out_tc_assign_value(dst, src)
{
    Named_Function_Event_event_egse_msg_out_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline Named_Function_Event_event_egse_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_egse_msg_out_tc_PRESENT);
        Named_Function_Event_event_egse_msg_out_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_egse_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_egse_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_egse_msg_in_PRESENT);
        Named_Function_Event_event_egse_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Named_Function_Event_event_egse_msg_out_PRESENT);
        Named_Function_Event_event_egse_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_egse_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_modemanager_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Named_Function_Event_event_modemanager_msg_in_feedback_x_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_modemanager_msg_in_feedback_x_range_check(dst);
}
inline Named_Function_Event_event_modemanager_msg_in_feedback_x_range_check(Named_Function_Event_event_modemanager_msg_in_feedback_x_vc)
{
    assert(((Named_Function_Event_event_modemanager_msg_in_feedback_x_vc >= 0) && (Named_Function_Event_event_modemanager_msg_in_feedback_x_vc <= 1000000)));
}
inline Named_Function_Event_event_modemanager_msg_in_feedback_assign_value(dst, src)
{
    Named_Function_Event_event_modemanager_msg_in_feedback_x_assign_value(dst.x, src.x);
}
inline Named_Function_Event_event_modemanager_msg_in_reading_x_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_modemanager_msg_in_reading_x_range_check(dst);
}
inline Named_Function_Event_event_modemanager_msg_in_reading_x_range_check(Named_Function_Event_event_modemanager_msg_in_reading_x_vc)
{
    assert(((Named_Function_Event_event_modemanager_msg_in_reading_x_vc >= 0) && (Named_Function_Event_event_modemanager_msg_in_reading_x_vc <= 1000000)));
}
inline Named_Function_Event_event_modemanager_msg_in_reading_assign_value(dst, src)
{
    Named_Function_Event_event_modemanager_msg_in_reading_x_assign_value(dst.x, src.x);
}
inline Named_Function_Event_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_modemanager_msg_in_tc_cfg_param_a_range_check(dst);
}
inline Named_Function_Event_event_modemanager_msg_in_tc_cfg_param_a_range_check(Named_Function_Event_event_modemanager_msg_in_tc_cfg_param_a_vc)
{
    assert(((Named_Function_Event_event_modemanager_msg_in_tc_cfg_param_a_vc >= 0) && (Named_Function_Event_event_modemanager_msg_in_tc_cfg_param_a_vc <= 1000000)));
}
inline Named_Function_Event_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_modemanager_msg_in_tc_cfg_param_b_range_check(dst);
}
inline Named_Function_Event_event_modemanager_msg_in_tc_cfg_param_b_range_check(Named_Function_Event_event_modemanager_msg_in_tc_cfg_param_b_vc)
{
    assert(((Named_Function_Event_event_modemanager_msg_in_tc_cfg_param_b_vc >= 0) && (Named_Function_Event_event_modemanager_msg_in_tc_cfg_param_b_vc <= 1000000)));
}
inline Named_Function_Event_event_modemanager_msg_in_tc_cfg_assign_value(dst, src)
{
    Named_Function_Event_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    Named_Function_Event_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline Named_Function_Event_event_modemanager_msg_in_tc_assign_value(dst, src)
{
    Named_Function_Event_event_modemanager_msg_in_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline Named_Function_Event_event_modemanager_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_modemanager_msg_in_input_none_PRESENT);
        Named_Function_Event_event_modemanager_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Named_Function_Event_event_modemanager_msg_in_feedback_PRESENT);
        Named_Function_Event_event_modemanager_msg_in_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  (dst.selection == Named_Function_Event_event_modemanager_msg_in_reading_PRESENT);
        Named_Function_Event_event_modemanager_msg_in_reading_assign_value(dst.data.reading, src.data.reading);
    ::  (dst.selection == Named_Function_Event_event_modemanager_msg_in_tc_PRESENT);
        Named_Function_Event_event_modemanager_msg_in_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_modemanager_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_modemanager_msg_out_ctrl_x_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_modemanager_msg_out_ctrl_x_range_check(dst);
}
inline Named_Function_Event_event_modemanager_msg_out_ctrl_x_range_check(Named_Function_Event_event_modemanager_msg_out_ctrl_x_vc)
{
    assert(((Named_Function_Event_event_modemanager_msg_out_ctrl_x_vc >= 0) && (Named_Function_Event_event_modemanager_msg_out_ctrl_x_vc <= 1000000)));
}
inline Named_Function_Event_event_modemanager_msg_out_ctrl_assign_value(dst, src)
{
    Named_Function_Event_event_modemanager_msg_out_ctrl_x_assign_value(dst.x, src.x);
}
inline Named_Function_Event_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_modemanager_msg_out_tm_reprt_reading_range_check(dst);
}
inline Named_Function_Event_event_modemanager_msg_out_tm_reprt_reading_range_check(Named_Function_Event_event_modemanager_msg_out_tm_reprt_reading_vc)
{
    assert(((Named_Function_Event_event_modemanager_msg_out_tm_reprt_reading_vc >= 0) && (Named_Function_Event_event_modemanager_msg_out_tm_reprt_reading_vc <= 1000000)));
}
inline Named_Function_Event_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_modemanager_msg_out_tm_reprt_ctrl_range_check(dst);
}
inline Named_Function_Event_event_modemanager_msg_out_tm_reprt_ctrl_range_check(Named_Function_Event_event_modemanager_msg_out_tm_reprt_ctrl_vc)
{
    assert(((Named_Function_Event_event_modemanager_msg_out_tm_reprt_ctrl_vc >= 0) && (Named_Function_Event_event_modemanager_msg_out_tm_reprt_ctrl_vc <= 1000000)));
}
inline Named_Function_Event_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_modemanager_msg_out_tm_reprt_feedback_range_check(dst);
}
inline Named_Function_Event_event_modemanager_msg_out_tm_reprt_feedback_range_check(Named_Function_Event_event_modemanager_msg_out_tm_reprt_feedback_vc)
{
    assert(((Named_Function_Event_event_modemanager_msg_out_tm_reprt_feedback_vc >= 0) && (Named_Function_Event_event_modemanager_msg_out_tm_reprt_feedback_vc <= 1000000)));
}
inline Named_Function_Event_event_modemanager_msg_out_tm_reprt_assign_value(dst, src)
{
    Named_Function_Event_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst.reading, src.reading);
    Named_Function_Event_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    Named_Function_Event_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline Named_Function_Event_event_modemanager_msg_out_tm_assign_value(dst, src)
{
    Named_Function_Event_event_modemanager_msg_out_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline Named_Function_Event_event_modemanager_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_modemanager_msg_out_ctrl_PRESENT);
        Named_Function_Event_event_modemanager_msg_out_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  (dst.selection == Named_Function_Event_event_modemanager_msg_out_tm_PRESENT);
        Named_Function_Event_event_modemanager_msg_out_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_modemanager_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_modemanager_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_modemanager_msg_in_PRESENT);
        Named_Function_Event_event_modemanager_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Named_Function_Event_event_modemanager_msg_out_PRESENT);
        Named_Function_Event_event_modemanager_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_modemanager_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_sensor_msg_out_reading_x_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_sensor_msg_out_reading_x_range_check(dst);
}
inline Named_Function_Event_event_sensor_msg_out_reading_x_range_check(Named_Function_Event_event_sensor_msg_out_reading_x_vc)
{
    assert(((Named_Function_Event_event_sensor_msg_out_reading_x_vc >= 0) && (Named_Function_Event_event_sensor_msg_out_reading_x_vc <= 1000000)));
}
inline Named_Function_Event_event_sensor_msg_out_reading_assign_value(dst, src)
{
    Named_Function_Event_event_sensor_msg_out_reading_x_assign_value(dst.x, src.x);
}
inline Named_Function_Event_event_sensor_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_sensor_msg_out_reading_PRESENT);
        Named_Function_Event_event_sensor_msg_out_reading_assign_value(dst.data.reading, src.data.reading);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_sensor_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_sensor_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_sensor_msg_out_PRESENT);
        Named_Function_Event_event_sensor_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_sensor_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_actuator_PRESENT);
        Named_Function_Event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Named_Function_Event_event_egse_PRESENT);
        Named_Function_Event_event_egse_assign_value(dst.data.egse, src.data.egse);
    ::  (dst.selection == Named_Function_Event_event_modemanager_PRESENT);
        Named_Function_Event_event_modemanager_assign_value(dst.data.modemanager, src.data.modemanager);
    ::  (dst.selection == Named_Function_Event_event_sensor_PRESENT);
        Named_Function_Event_event_sensor_assign_value(dst.data.sensor, src.data.sensor);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_assign_value(dst, src)
{
    Named_Function_Event_id_assign_value(dst.id, src.id);
    Named_Function_Event_event_assign_value(dst.event, src.event);
}
inline Interface_Event_source_assign_value(dst, src)
{
    dst = src;
    Interface_Event_source_range_check(dst);
}
inline Interface_Event_source_range_check(Interface_Event_source_vc)
{
    assert((((((Interface_Event_source_vc == Interface_Event_source_actuator) || (Interface_Event_source_vc == Interface_Event_source_egse)) || (Interface_Event_source_vc == Interface_Event_source_modemanager)) || (Interface_Event_source_vc == Interface_Event_source_sensor)) || (Interface_Event_source_vc == Interface_Event_source_env)));
}
inline Interface_Event_dest_assign_value(dst, src)
{
    dst = src;
    Interface_Event_dest_range_check(dst);
}
inline Interface_Event_dest_range_check(Interface_Event_dest_vc)
{
    assert((((((Interface_Event_dest_vc == Interface_Event_dest_actuator) || (Interface_Event_dest_vc == Interface_Event_dest_egse)) || (Interface_Event_dest_vc == Interface_Event_dest_modemanager)) || (Interface_Event_dest_vc == Interface_Event_dest_sensor)) || (Interface_Event_dest_vc == Interface_Event_dest_env)));
}
inline Interface_Event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Interface_Event_event_actuator_msg_in_ctrl_x_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_ctrl_x_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_ctrl_x_range_check(Interface_Event_event_actuator_msg_in_ctrl_x_vc)
{
    assert(((Interface_Event_event_actuator_msg_in_ctrl_x_vc >= 0) && (Interface_Event_event_actuator_msg_in_ctrl_x_vc <= 1000000)));
}
inline Interface_Event_event_actuator_msg_in_ctrl_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_in_ctrl_x_assign_value(dst.x, src.x);
}
inline Interface_Event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_input_none_PRESENT);
        Interface_Event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_ctrl_PRESENT);
        Interface_Event_event_actuator_msg_in_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_actuator_msg_out_feedback_x_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_out_feedback_x_range_check(dst);
}
inline Interface_Event_event_actuator_msg_out_feedback_x_range_check(Interface_Event_event_actuator_msg_out_feedback_x_vc)
{
    assert(((Interface_Event_event_actuator_msg_out_feedback_x_vc >= 0) && (Interface_Event_event_actuator_msg_out_feedback_x_vc <= 1000000)));
}
inline Interface_Event_event_actuator_msg_out_feedback_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_out_feedback_x_assign_value(dst.x, src.x);
}
inline Interface_Event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_actuator_msg_out_feedback_PRESENT);
        Interface_Event_event_actuator_msg_out_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_PRESENT);
        Interface_Event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Interface_Event_event_actuator_msg_out_PRESENT);
        Interface_Event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_egse_msg_in_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_egse_msg_in_tm_reprt_reading_range_check(dst);
}
inline Interface_Event_event_egse_msg_in_tm_reprt_reading_range_check(Interface_Event_event_egse_msg_in_tm_reprt_reading_vc)
{
    assert(((Interface_Event_event_egse_msg_in_tm_reprt_reading_vc >= 0) && (Interface_Event_event_egse_msg_in_tm_reprt_reading_vc <= 1000000)));
}
inline Interface_Event_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_egse_msg_in_tm_reprt_ctrl_range_check(dst);
}
inline Interface_Event_event_egse_msg_in_tm_reprt_ctrl_range_check(Interface_Event_event_egse_msg_in_tm_reprt_ctrl_vc)
{
    assert(((Interface_Event_event_egse_msg_in_tm_reprt_ctrl_vc >= 0) && (Interface_Event_event_egse_msg_in_tm_reprt_ctrl_vc <= 1000000)));
}
inline Interface_Event_event_egse_msg_in_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_egse_msg_in_tm_reprt_feedback_range_check(dst);
}
inline Interface_Event_event_egse_msg_in_tm_reprt_feedback_range_check(Interface_Event_event_egse_msg_in_tm_reprt_feedback_vc)
{
    assert(((Interface_Event_event_egse_msg_in_tm_reprt_feedback_vc >= 0) && (Interface_Event_event_egse_msg_in_tm_reprt_feedback_vc <= 1000000)));
}
inline Interface_Event_event_egse_msg_in_tm_reprt_assign_value(dst, src)
{
    Interface_Event_event_egse_msg_in_tm_reprt_reading_assign_value(dst.reading, src.reading);
    Interface_Event_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    Interface_Event_event_egse_msg_in_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline Interface_Event_event_egse_msg_in_tm_assign_value(dst, src)
{
    Interface_Event_event_egse_msg_in_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline Interface_Event_event_egse_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_egse_msg_in_tm_PRESENT);
        Interface_Event_event_egse_msg_in_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_egse_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_egse_msg_out_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_egse_msg_out_tc_cfg_param_a_range_check(dst);
}
inline Interface_Event_event_egse_msg_out_tc_cfg_param_a_range_check(Interface_Event_event_egse_msg_out_tc_cfg_param_a_vc)
{
    assert(((Interface_Event_event_egse_msg_out_tc_cfg_param_a_vc >= 0) && (Interface_Event_event_egse_msg_out_tc_cfg_param_a_vc <= 1000000)));
}
inline Interface_Event_event_egse_msg_out_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_egse_msg_out_tc_cfg_param_b_range_check(dst);
}
inline Interface_Event_event_egse_msg_out_tc_cfg_param_b_range_check(Interface_Event_event_egse_msg_out_tc_cfg_param_b_vc)
{
    assert(((Interface_Event_event_egse_msg_out_tc_cfg_param_b_vc >= 0) && (Interface_Event_event_egse_msg_out_tc_cfg_param_b_vc <= 1000000)));
}
inline Interface_Event_event_egse_msg_out_tc_cfg_assign_value(dst, src)
{
    Interface_Event_event_egse_msg_out_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    Interface_Event_event_egse_msg_out_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline Interface_Event_event_egse_msg_out_tc_assign_value(dst, src)
{
    Interface_Event_event_egse_msg_out_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline Interface_Event_event_egse_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_egse_msg_out_tc_PRESENT);
        Interface_Event_event_egse_msg_out_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_egse_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_egse_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_egse_msg_in_PRESENT);
        Interface_Event_event_egse_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Interface_Event_event_egse_msg_out_PRESENT);
        Interface_Event_event_egse_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_egse_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_modemanager_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Interface_Event_event_modemanager_msg_in_feedback_x_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_modemanager_msg_in_feedback_x_range_check(dst);
}
inline Interface_Event_event_modemanager_msg_in_feedback_x_range_check(Interface_Event_event_modemanager_msg_in_feedback_x_vc)
{
    assert(((Interface_Event_event_modemanager_msg_in_feedback_x_vc >= 0) && (Interface_Event_event_modemanager_msg_in_feedback_x_vc <= 1000000)));
}
inline Interface_Event_event_modemanager_msg_in_feedback_assign_value(dst, src)
{
    Interface_Event_event_modemanager_msg_in_feedback_x_assign_value(dst.x, src.x);
}
inline Interface_Event_event_modemanager_msg_in_reading_x_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_modemanager_msg_in_reading_x_range_check(dst);
}
inline Interface_Event_event_modemanager_msg_in_reading_x_range_check(Interface_Event_event_modemanager_msg_in_reading_x_vc)
{
    assert(((Interface_Event_event_modemanager_msg_in_reading_x_vc >= 0) && (Interface_Event_event_modemanager_msg_in_reading_x_vc <= 1000000)));
}
inline Interface_Event_event_modemanager_msg_in_reading_assign_value(dst, src)
{
    Interface_Event_event_modemanager_msg_in_reading_x_assign_value(dst.x, src.x);
}
inline Interface_Event_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_modemanager_msg_in_tc_cfg_param_a_range_check(dst);
}
inline Interface_Event_event_modemanager_msg_in_tc_cfg_param_a_range_check(Interface_Event_event_modemanager_msg_in_tc_cfg_param_a_vc)
{
    assert(((Interface_Event_event_modemanager_msg_in_tc_cfg_param_a_vc >= 0) && (Interface_Event_event_modemanager_msg_in_tc_cfg_param_a_vc <= 1000000)));
}
inline Interface_Event_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_modemanager_msg_in_tc_cfg_param_b_range_check(dst);
}
inline Interface_Event_event_modemanager_msg_in_tc_cfg_param_b_range_check(Interface_Event_event_modemanager_msg_in_tc_cfg_param_b_vc)
{
    assert(((Interface_Event_event_modemanager_msg_in_tc_cfg_param_b_vc >= 0) && (Interface_Event_event_modemanager_msg_in_tc_cfg_param_b_vc <= 1000000)));
}
inline Interface_Event_event_modemanager_msg_in_tc_cfg_assign_value(dst, src)
{
    Interface_Event_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    Interface_Event_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline Interface_Event_event_modemanager_msg_in_tc_assign_value(dst, src)
{
    Interface_Event_event_modemanager_msg_in_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline Interface_Event_event_modemanager_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_modemanager_msg_in_input_none_PRESENT);
        Interface_Event_event_modemanager_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Interface_Event_event_modemanager_msg_in_feedback_PRESENT);
        Interface_Event_event_modemanager_msg_in_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  (dst.selection == Interface_Event_event_modemanager_msg_in_reading_PRESENT);
        Interface_Event_event_modemanager_msg_in_reading_assign_value(dst.data.reading, src.data.reading);
    ::  (dst.selection == Interface_Event_event_modemanager_msg_in_tc_PRESENT);
        Interface_Event_event_modemanager_msg_in_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_modemanager_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_modemanager_msg_out_ctrl_x_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_modemanager_msg_out_ctrl_x_range_check(dst);
}
inline Interface_Event_event_modemanager_msg_out_ctrl_x_range_check(Interface_Event_event_modemanager_msg_out_ctrl_x_vc)
{
    assert(((Interface_Event_event_modemanager_msg_out_ctrl_x_vc >= 0) && (Interface_Event_event_modemanager_msg_out_ctrl_x_vc <= 1000000)));
}
inline Interface_Event_event_modemanager_msg_out_ctrl_assign_value(dst, src)
{
    Interface_Event_event_modemanager_msg_out_ctrl_x_assign_value(dst.x, src.x);
}
inline Interface_Event_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_modemanager_msg_out_tm_reprt_reading_range_check(dst);
}
inline Interface_Event_event_modemanager_msg_out_tm_reprt_reading_range_check(Interface_Event_event_modemanager_msg_out_tm_reprt_reading_vc)
{
    assert(((Interface_Event_event_modemanager_msg_out_tm_reprt_reading_vc >= 0) && (Interface_Event_event_modemanager_msg_out_tm_reprt_reading_vc <= 1000000)));
}
inline Interface_Event_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_modemanager_msg_out_tm_reprt_ctrl_range_check(dst);
}
inline Interface_Event_event_modemanager_msg_out_tm_reprt_ctrl_range_check(Interface_Event_event_modemanager_msg_out_tm_reprt_ctrl_vc)
{
    assert(((Interface_Event_event_modemanager_msg_out_tm_reprt_ctrl_vc >= 0) && (Interface_Event_event_modemanager_msg_out_tm_reprt_ctrl_vc <= 1000000)));
}
inline Interface_Event_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_modemanager_msg_out_tm_reprt_feedback_range_check(dst);
}
inline Interface_Event_event_modemanager_msg_out_tm_reprt_feedback_range_check(Interface_Event_event_modemanager_msg_out_tm_reprt_feedback_vc)
{
    assert(((Interface_Event_event_modemanager_msg_out_tm_reprt_feedback_vc >= 0) && (Interface_Event_event_modemanager_msg_out_tm_reprt_feedback_vc <= 1000000)));
}
inline Interface_Event_event_modemanager_msg_out_tm_reprt_assign_value(dst, src)
{
    Interface_Event_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst.reading, src.reading);
    Interface_Event_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    Interface_Event_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline Interface_Event_event_modemanager_msg_out_tm_assign_value(dst, src)
{
    Interface_Event_event_modemanager_msg_out_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline Interface_Event_event_modemanager_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_modemanager_msg_out_ctrl_PRESENT);
        Interface_Event_event_modemanager_msg_out_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  (dst.selection == Interface_Event_event_modemanager_msg_out_tm_PRESENT);
        Interface_Event_event_modemanager_msg_out_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_modemanager_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_modemanager_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_modemanager_msg_in_PRESENT);
        Interface_Event_event_modemanager_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Interface_Event_event_modemanager_msg_out_PRESENT);
        Interface_Event_event_modemanager_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_modemanager_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_sensor_msg_out_reading_x_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_sensor_msg_out_reading_x_range_check(dst);
}
inline Interface_Event_event_sensor_msg_out_reading_x_range_check(Interface_Event_event_sensor_msg_out_reading_x_vc)
{
    assert(((Interface_Event_event_sensor_msg_out_reading_x_vc >= 0) && (Interface_Event_event_sensor_msg_out_reading_x_vc <= 1000000)));
}
inline Interface_Event_event_sensor_msg_out_reading_assign_value(dst, src)
{
    Interface_Event_event_sensor_msg_out_reading_x_assign_value(dst.x, src.x);
}
inline Interface_Event_event_sensor_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_sensor_msg_out_reading_PRESENT);
        Interface_Event_event_sensor_msg_out_reading_assign_value(dst.data.reading, src.data.reading);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_sensor_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_sensor_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_sensor_msg_out_PRESENT);
        Interface_Event_event_sensor_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_sensor_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_actuator_PRESENT);
        Interface_Event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Interface_Event_event_egse_PRESENT);
        Interface_Event_event_egse_assign_value(dst.data.egse, src.data.egse);
    ::  (dst.selection == Interface_Event_event_modemanager_PRESENT);
        Interface_Event_event_modemanager_assign_value(dst.data.modemanager, src.data.modemanager);
    ::  (dst.selection == Interface_Event_event_sensor_PRESENT);
        Interface_Event_event_sensor_assign_value(dst.data.sensor, src.data.sensor);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_assign_value(dst, src)
{
    Interface_Event_source_assign_value(dst.source, src.source);
    Interface_Event_dest_assign_value(dst.dest, src.dest);
    Interface_Event_event_assign_value(dst.event, src.event);
}
inline Observable_Event_no_event_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_system_startup_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_input_event_source_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_source_range_check(dst);
}
inline Observable_Event_input_event_source_range_check(Observable_Event_input_event_source_vc)
{
    assert((((((Observable_Event_input_event_source_vc == Observable_Event_input_event_source_actuator) || (Observable_Event_input_event_source_vc == Observable_Event_input_event_source_egse)) || (Observable_Event_input_event_source_vc == Observable_Event_input_event_source_modemanager)) || (Observable_Event_input_event_source_vc == Observable_Event_input_event_source_sensor)) || (Observable_Event_input_event_source_vc == Observable_Event_input_event_source_env)));
}
inline Observable_Event_input_event_dest_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_dest_range_check(dst);
}
inline Observable_Event_input_event_dest_range_check(Observable_Event_input_event_dest_vc)
{
    assert((((((Observable_Event_input_event_dest_vc == Observable_Event_input_event_dest_actuator) || (Observable_Event_input_event_dest_vc == Observable_Event_input_event_dest_egse)) || (Observable_Event_input_event_dest_vc == Observable_Event_input_event_dest_modemanager)) || (Observable_Event_input_event_dest_vc == Observable_Event_input_event_dest_sensor)) || (Observable_Event_input_event_dest_vc == Observable_Event_input_event_dest_env)));
}
inline Observable_Event_input_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_input_event_event_actuator_msg_in_ctrl_x_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_ctrl_x_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_ctrl_x_range_check(Observable_Event_input_event_event_actuator_msg_in_ctrl_x_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_ctrl_x_vc >= 0) && (Observable_Event_input_event_event_actuator_msg_in_ctrl_x_vc <= 1000000)));
}
inline Observable_Event_input_event_event_actuator_msg_in_ctrl_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_in_ctrl_x_assign_value(dst.x, src.x);
}
inline Observable_Event_input_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_input_none_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_ctrl_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_actuator_msg_out_feedback_x_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_out_feedback_x_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_out_feedback_x_range_check(Observable_Event_input_event_event_actuator_msg_out_feedback_x_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_out_feedback_x_vc >= 0) && (Observable_Event_input_event_event_actuator_msg_out_feedback_x_vc <= 1000000)));
}
inline Observable_Event_input_event_event_actuator_msg_out_feedback_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_out_feedback_x_assign_value(dst.x, src.x);
}
inline Observable_Event_input_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_out_feedback_PRESENT);
        Observable_Event_input_event_event_actuator_msg_out_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_out_PRESENT);
        Observable_Event_input_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_egse_msg_in_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_egse_msg_in_tm_reprt_reading_range_check(dst);
}
inline Observable_Event_input_event_event_egse_msg_in_tm_reprt_reading_range_check(Observable_Event_input_event_event_egse_msg_in_tm_reprt_reading_vc)
{
    assert(((Observable_Event_input_event_event_egse_msg_in_tm_reprt_reading_vc >= 0) && (Observable_Event_input_event_event_egse_msg_in_tm_reprt_reading_vc <= 1000000)));
}
inline Observable_Event_input_event_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_egse_msg_in_tm_reprt_ctrl_range_check(dst);
}
inline Observable_Event_input_event_event_egse_msg_in_tm_reprt_ctrl_range_check(Observable_Event_input_event_event_egse_msg_in_tm_reprt_ctrl_vc)
{
    assert(((Observable_Event_input_event_event_egse_msg_in_tm_reprt_ctrl_vc >= 0) && (Observable_Event_input_event_event_egse_msg_in_tm_reprt_ctrl_vc <= 1000000)));
}
inline Observable_Event_input_event_event_egse_msg_in_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_egse_msg_in_tm_reprt_feedback_range_check(dst);
}
inline Observable_Event_input_event_event_egse_msg_in_tm_reprt_feedback_range_check(Observable_Event_input_event_event_egse_msg_in_tm_reprt_feedback_vc)
{
    assert(((Observable_Event_input_event_event_egse_msg_in_tm_reprt_feedback_vc >= 0) && (Observable_Event_input_event_event_egse_msg_in_tm_reprt_feedback_vc <= 1000000)));
}
inline Observable_Event_input_event_event_egse_msg_in_tm_reprt_assign_value(dst, src)
{
    Observable_Event_input_event_event_egse_msg_in_tm_reprt_reading_assign_value(dst.reading, src.reading);
    Observable_Event_input_event_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    Observable_Event_input_event_event_egse_msg_in_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline Observable_Event_input_event_event_egse_msg_in_tm_assign_value(dst, src)
{
    Observable_Event_input_event_event_egse_msg_in_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline Observable_Event_input_event_event_egse_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_egse_msg_in_tm_PRESENT);
        Observable_Event_input_event_event_egse_msg_in_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_egse_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_egse_msg_out_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_egse_msg_out_tc_cfg_param_a_range_check(dst);
}
inline Observable_Event_input_event_event_egse_msg_out_tc_cfg_param_a_range_check(Observable_Event_input_event_event_egse_msg_out_tc_cfg_param_a_vc)
{
    assert(((Observable_Event_input_event_event_egse_msg_out_tc_cfg_param_a_vc >= 0) && (Observable_Event_input_event_event_egse_msg_out_tc_cfg_param_a_vc <= 1000000)));
}
inline Observable_Event_input_event_event_egse_msg_out_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_egse_msg_out_tc_cfg_param_b_range_check(dst);
}
inline Observable_Event_input_event_event_egse_msg_out_tc_cfg_param_b_range_check(Observable_Event_input_event_event_egse_msg_out_tc_cfg_param_b_vc)
{
    assert(((Observable_Event_input_event_event_egse_msg_out_tc_cfg_param_b_vc >= 0) && (Observable_Event_input_event_event_egse_msg_out_tc_cfg_param_b_vc <= 1000000)));
}
inline Observable_Event_input_event_event_egse_msg_out_tc_cfg_assign_value(dst, src)
{
    Observable_Event_input_event_event_egse_msg_out_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    Observable_Event_input_event_event_egse_msg_out_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline Observable_Event_input_event_event_egse_msg_out_tc_assign_value(dst, src)
{
    Observable_Event_input_event_event_egse_msg_out_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline Observable_Event_input_event_event_egse_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_egse_msg_out_tc_PRESENT);
        Observable_Event_input_event_event_egse_msg_out_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_egse_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_egse_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_egse_msg_in_PRESENT);
        Observable_Event_input_event_event_egse_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_input_event_event_egse_msg_out_PRESENT);
        Observable_Event_input_event_event_egse_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_egse_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_modemanager_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_input_event_event_modemanager_msg_in_feedback_x_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_modemanager_msg_in_feedback_x_range_check(dst);
}
inline Observable_Event_input_event_event_modemanager_msg_in_feedback_x_range_check(Observable_Event_input_event_event_modemanager_msg_in_feedback_x_vc)
{
    assert(((Observable_Event_input_event_event_modemanager_msg_in_feedback_x_vc >= 0) && (Observable_Event_input_event_event_modemanager_msg_in_feedback_x_vc <= 1000000)));
}
inline Observable_Event_input_event_event_modemanager_msg_in_feedback_assign_value(dst, src)
{
    Observable_Event_input_event_event_modemanager_msg_in_feedback_x_assign_value(dst.x, src.x);
}
inline Observable_Event_input_event_event_modemanager_msg_in_reading_x_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_modemanager_msg_in_reading_x_range_check(dst);
}
inline Observable_Event_input_event_event_modemanager_msg_in_reading_x_range_check(Observable_Event_input_event_event_modemanager_msg_in_reading_x_vc)
{
    assert(((Observable_Event_input_event_event_modemanager_msg_in_reading_x_vc >= 0) && (Observable_Event_input_event_event_modemanager_msg_in_reading_x_vc <= 1000000)));
}
inline Observable_Event_input_event_event_modemanager_msg_in_reading_assign_value(dst, src)
{
    Observable_Event_input_event_event_modemanager_msg_in_reading_x_assign_value(dst.x, src.x);
}
inline Observable_Event_input_event_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_modemanager_msg_in_tc_cfg_param_a_range_check(dst);
}
inline Observable_Event_input_event_event_modemanager_msg_in_tc_cfg_param_a_range_check(Observable_Event_input_event_event_modemanager_msg_in_tc_cfg_param_a_vc)
{
    assert(((Observable_Event_input_event_event_modemanager_msg_in_tc_cfg_param_a_vc >= 0) && (Observable_Event_input_event_event_modemanager_msg_in_tc_cfg_param_a_vc <= 1000000)));
}
inline Observable_Event_input_event_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_modemanager_msg_in_tc_cfg_param_b_range_check(dst);
}
inline Observable_Event_input_event_event_modemanager_msg_in_tc_cfg_param_b_range_check(Observable_Event_input_event_event_modemanager_msg_in_tc_cfg_param_b_vc)
{
    assert(((Observable_Event_input_event_event_modemanager_msg_in_tc_cfg_param_b_vc >= 0) && (Observable_Event_input_event_event_modemanager_msg_in_tc_cfg_param_b_vc <= 1000000)));
}
inline Observable_Event_input_event_event_modemanager_msg_in_tc_cfg_assign_value(dst, src)
{
    Observable_Event_input_event_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    Observable_Event_input_event_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline Observable_Event_input_event_event_modemanager_msg_in_tc_assign_value(dst, src)
{
    Observable_Event_input_event_event_modemanager_msg_in_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline Observable_Event_input_event_event_modemanager_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_modemanager_msg_in_input_none_PRESENT);
        Observable_Event_input_event_event_modemanager_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_input_event_event_modemanager_msg_in_feedback_PRESENT);
        Observable_Event_input_event_event_modemanager_msg_in_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  (dst.selection == Observable_Event_input_event_event_modemanager_msg_in_reading_PRESENT);
        Observable_Event_input_event_event_modemanager_msg_in_reading_assign_value(dst.data.reading, src.data.reading);
    ::  (dst.selection == Observable_Event_input_event_event_modemanager_msg_in_tc_PRESENT);
        Observable_Event_input_event_event_modemanager_msg_in_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_modemanager_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_modemanager_msg_out_ctrl_x_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_modemanager_msg_out_ctrl_x_range_check(dst);
}
inline Observable_Event_input_event_event_modemanager_msg_out_ctrl_x_range_check(Observable_Event_input_event_event_modemanager_msg_out_ctrl_x_vc)
{
    assert(((Observable_Event_input_event_event_modemanager_msg_out_ctrl_x_vc >= 0) && (Observable_Event_input_event_event_modemanager_msg_out_ctrl_x_vc <= 1000000)));
}
inline Observable_Event_input_event_event_modemanager_msg_out_ctrl_assign_value(dst, src)
{
    Observable_Event_input_event_event_modemanager_msg_out_ctrl_x_assign_value(dst.x, src.x);
}
inline Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_reading_range_check(dst);
}
inline Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_reading_range_check(Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_reading_vc)
{
    assert(((Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_reading_vc >= 0) && (Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_reading_vc <= 1000000)));
}
inline Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_ctrl_range_check(dst);
}
inline Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_ctrl_range_check(Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_ctrl_vc)
{
    assert(((Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_ctrl_vc >= 0) && (Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_ctrl_vc <= 1000000)));
}
inline Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_feedback_range_check(dst);
}
inline Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_feedback_range_check(Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_feedback_vc)
{
    assert(((Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_feedback_vc >= 0) && (Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_feedback_vc <= 1000000)));
}
inline Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_assign_value(dst, src)
{
    Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst.reading, src.reading);
    Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline Observable_Event_input_event_event_modemanager_msg_out_tm_assign_value(dst, src)
{
    Observable_Event_input_event_event_modemanager_msg_out_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline Observable_Event_input_event_event_modemanager_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_modemanager_msg_out_ctrl_PRESENT);
        Observable_Event_input_event_event_modemanager_msg_out_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  (dst.selection == Observable_Event_input_event_event_modemanager_msg_out_tm_PRESENT);
        Observable_Event_input_event_event_modemanager_msg_out_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_modemanager_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_modemanager_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_modemanager_msg_in_PRESENT);
        Observable_Event_input_event_event_modemanager_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_input_event_event_modemanager_msg_out_PRESENT);
        Observable_Event_input_event_event_modemanager_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_modemanager_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_sensor_msg_out_reading_x_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_sensor_msg_out_reading_x_range_check(dst);
}
inline Observable_Event_input_event_event_sensor_msg_out_reading_x_range_check(Observable_Event_input_event_event_sensor_msg_out_reading_x_vc)
{
    assert(((Observable_Event_input_event_event_sensor_msg_out_reading_x_vc >= 0) && (Observable_Event_input_event_event_sensor_msg_out_reading_x_vc <= 1000000)));
}
inline Observable_Event_input_event_event_sensor_msg_out_reading_assign_value(dst, src)
{
    Observable_Event_input_event_event_sensor_msg_out_reading_x_assign_value(dst.x, src.x);
}
inline Observable_Event_input_event_event_sensor_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_sensor_msg_out_reading_PRESENT);
        Observable_Event_input_event_event_sensor_msg_out_reading_assign_value(dst.data.reading, src.data.reading);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_sensor_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_sensor_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_sensor_msg_out_PRESENT);
        Observable_Event_input_event_event_sensor_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_sensor_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_actuator_PRESENT);
        Observable_Event_input_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Observable_Event_input_event_event_egse_PRESENT);
        Observable_Event_input_event_event_egse_assign_value(dst.data.egse, src.data.egse);
    ::  (dst.selection == Observable_Event_input_event_event_modemanager_PRESENT);
        Observable_Event_input_event_event_modemanager_assign_value(dst.data.modemanager, src.data.modemanager);
    ::  (dst.selection == Observable_Event_input_event_event_sensor_PRESENT);
        Observable_Event_input_event_event_sensor_assign_value(dst.data.sensor, src.data.sensor);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_assign_value(dst, src)
{
    Observable_Event_input_event_source_assign_value(dst.source, src.source);
    Observable_Event_input_event_dest_assign_value(dst.dest, src.dest);
    Observable_Event_input_event_event_assign_value(dst.event, src.event);
}
inline Observable_Event_output_event_source_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_source_range_check(dst);
}
inline Observable_Event_output_event_source_range_check(Observable_Event_output_event_source_vc)
{
    assert((((((Observable_Event_output_event_source_vc == Observable_Event_output_event_source_actuator) || (Observable_Event_output_event_source_vc == Observable_Event_output_event_source_egse)) || (Observable_Event_output_event_source_vc == Observable_Event_output_event_source_modemanager)) || (Observable_Event_output_event_source_vc == Observable_Event_output_event_source_sensor)) || (Observable_Event_output_event_source_vc == Observable_Event_output_event_source_env)));
}
inline Observable_Event_output_event_dest_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_dest_range_check(dst);
}
inline Observable_Event_output_event_dest_range_check(Observable_Event_output_event_dest_vc)
{
    assert((((((Observable_Event_output_event_dest_vc == Observable_Event_output_event_dest_actuator) || (Observable_Event_output_event_dest_vc == Observable_Event_output_event_dest_egse)) || (Observable_Event_output_event_dest_vc == Observable_Event_output_event_dest_modemanager)) || (Observable_Event_output_event_dest_vc == Observable_Event_output_event_dest_sensor)) || (Observable_Event_output_event_dest_vc == Observable_Event_output_event_dest_env)));
}
inline Observable_Event_output_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_output_event_event_actuator_msg_in_ctrl_x_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_ctrl_x_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_ctrl_x_range_check(Observable_Event_output_event_event_actuator_msg_in_ctrl_x_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_ctrl_x_vc >= 0) && (Observable_Event_output_event_event_actuator_msg_in_ctrl_x_vc <= 1000000)));
}
inline Observable_Event_output_event_event_actuator_msg_in_ctrl_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_in_ctrl_x_assign_value(dst.x, src.x);
}
inline Observable_Event_output_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_input_none_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_ctrl_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_actuator_msg_out_feedback_x_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_out_feedback_x_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_out_feedback_x_range_check(Observable_Event_output_event_event_actuator_msg_out_feedback_x_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_out_feedback_x_vc >= 0) && (Observable_Event_output_event_event_actuator_msg_out_feedback_x_vc <= 1000000)));
}
inline Observable_Event_output_event_event_actuator_msg_out_feedback_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_out_feedback_x_assign_value(dst.x, src.x);
}
inline Observable_Event_output_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_out_feedback_PRESENT);
        Observable_Event_output_event_event_actuator_msg_out_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_out_PRESENT);
        Observable_Event_output_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_egse_msg_in_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_egse_msg_in_tm_reprt_reading_range_check(dst);
}
inline Observable_Event_output_event_event_egse_msg_in_tm_reprt_reading_range_check(Observable_Event_output_event_event_egse_msg_in_tm_reprt_reading_vc)
{
    assert(((Observable_Event_output_event_event_egse_msg_in_tm_reprt_reading_vc >= 0) && (Observable_Event_output_event_event_egse_msg_in_tm_reprt_reading_vc <= 1000000)));
}
inline Observable_Event_output_event_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_egse_msg_in_tm_reprt_ctrl_range_check(dst);
}
inline Observable_Event_output_event_event_egse_msg_in_tm_reprt_ctrl_range_check(Observable_Event_output_event_event_egse_msg_in_tm_reprt_ctrl_vc)
{
    assert(((Observable_Event_output_event_event_egse_msg_in_tm_reprt_ctrl_vc >= 0) && (Observable_Event_output_event_event_egse_msg_in_tm_reprt_ctrl_vc <= 1000000)));
}
inline Observable_Event_output_event_event_egse_msg_in_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_egse_msg_in_tm_reprt_feedback_range_check(dst);
}
inline Observable_Event_output_event_event_egse_msg_in_tm_reprt_feedback_range_check(Observable_Event_output_event_event_egse_msg_in_tm_reprt_feedback_vc)
{
    assert(((Observable_Event_output_event_event_egse_msg_in_tm_reprt_feedback_vc >= 0) && (Observable_Event_output_event_event_egse_msg_in_tm_reprt_feedback_vc <= 1000000)));
}
inline Observable_Event_output_event_event_egse_msg_in_tm_reprt_assign_value(dst, src)
{
    Observable_Event_output_event_event_egse_msg_in_tm_reprt_reading_assign_value(dst.reading, src.reading);
    Observable_Event_output_event_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    Observable_Event_output_event_event_egse_msg_in_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline Observable_Event_output_event_event_egse_msg_in_tm_assign_value(dst, src)
{
    Observable_Event_output_event_event_egse_msg_in_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline Observable_Event_output_event_event_egse_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_egse_msg_in_tm_PRESENT);
        Observable_Event_output_event_event_egse_msg_in_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_egse_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_egse_msg_out_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_egse_msg_out_tc_cfg_param_a_range_check(dst);
}
inline Observable_Event_output_event_event_egse_msg_out_tc_cfg_param_a_range_check(Observable_Event_output_event_event_egse_msg_out_tc_cfg_param_a_vc)
{
    assert(((Observable_Event_output_event_event_egse_msg_out_tc_cfg_param_a_vc >= 0) && (Observable_Event_output_event_event_egse_msg_out_tc_cfg_param_a_vc <= 1000000)));
}
inline Observable_Event_output_event_event_egse_msg_out_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_egse_msg_out_tc_cfg_param_b_range_check(dst);
}
inline Observable_Event_output_event_event_egse_msg_out_tc_cfg_param_b_range_check(Observable_Event_output_event_event_egse_msg_out_tc_cfg_param_b_vc)
{
    assert(((Observable_Event_output_event_event_egse_msg_out_tc_cfg_param_b_vc >= 0) && (Observable_Event_output_event_event_egse_msg_out_tc_cfg_param_b_vc <= 1000000)));
}
inline Observable_Event_output_event_event_egse_msg_out_tc_cfg_assign_value(dst, src)
{
    Observable_Event_output_event_event_egse_msg_out_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    Observable_Event_output_event_event_egse_msg_out_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline Observable_Event_output_event_event_egse_msg_out_tc_assign_value(dst, src)
{
    Observable_Event_output_event_event_egse_msg_out_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline Observable_Event_output_event_event_egse_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_egse_msg_out_tc_PRESENT);
        Observable_Event_output_event_event_egse_msg_out_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_egse_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_egse_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_egse_msg_in_PRESENT);
        Observable_Event_output_event_event_egse_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_output_event_event_egse_msg_out_PRESENT);
        Observable_Event_output_event_event_egse_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_egse_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_modemanager_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_output_event_event_modemanager_msg_in_feedback_x_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_modemanager_msg_in_feedback_x_range_check(dst);
}
inline Observable_Event_output_event_event_modemanager_msg_in_feedback_x_range_check(Observable_Event_output_event_event_modemanager_msg_in_feedback_x_vc)
{
    assert(((Observable_Event_output_event_event_modemanager_msg_in_feedback_x_vc >= 0) && (Observable_Event_output_event_event_modemanager_msg_in_feedback_x_vc <= 1000000)));
}
inline Observable_Event_output_event_event_modemanager_msg_in_feedback_assign_value(dst, src)
{
    Observable_Event_output_event_event_modemanager_msg_in_feedback_x_assign_value(dst.x, src.x);
}
inline Observable_Event_output_event_event_modemanager_msg_in_reading_x_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_modemanager_msg_in_reading_x_range_check(dst);
}
inline Observable_Event_output_event_event_modemanager_msg_in_reading_x_range_check(Observable_Event_output_event_event_modemanager_msg_in_reading_x_vc)
{
    assert(((Observable_Event_output_event_event_modemanager_msg_in_reading_x_vc >= 0) && (Observable_Event_output_event_event_modemanager_msg_in_reading_x_vc <= 1000000)));
}
inline Observable_Event_output_event_event_modemanager_msg_in_reading_assign_value(dst, src)
{
    Observable_Event_output_event_event_modemanager_msg_in_reading_x_assign_value(dst.x, src.x);
}
inline Observable_Event_output_event_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_modemanager_msg_in_tc_cfg_param_a_range_check(dst);
}
inline Observable_Event_output_event_event_modemanager_msg_in_tc_cfg_param_a_range_check(Observable_Event_output_event_event_modemanager_msg_in_tc_cfg_param_a_vc)
{
    assert(((Observable_Event_output_event_event_modemanager_msg_in_tc_cfg_param_a_vc >= 0) && (Observable_Event_output_event_event_modemanager_msg_in_tc_cfg_param_a_vc <= 1000000)));
}
inline Observable_Event_output_event_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_modemanager_msg_in_tc_cfg_param_b_range_check(dst);
}
inline Observable_Event_output_event_event_modemanager_msg_in_tc_cfg_param_b_range_check(Observable_Event_output_event_event_modemanager_msg_in_tc_cfg_param_b_vc)
{
    assert(((Observable_Event_output_event_event_modemanager_msg_in_tc_cfg_param_b_vc >= 0) && (Observable_Event_output_event_event_modemanager_msg_in_tc_cfg_param_b_vc <= 1000000)));
}
inline Observable_Event_output_event_event_modemanager_msg_in_tc_cfg_assign_value(dst, src)
{
    Observable_Event_output_event_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    Observable_Event_output_event_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline Observable_Event_output_event_event_modemanager_msg_in_tc_assign_value(dst, src)
{
    Observable_Event_output_event_event_modemanager_msg_in_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline Observable_Event_output_event_event_modemanager_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_modemanager_msg_in_input_none_PRESENT);
        Observable_Event_output_event_event_modemanager_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_output_event_event_modemanager_msg_in_feedback_PRESENT);
        Observable_Event_output_event_event_modemanager_msg_in_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  (dst.selection == Observable_Event_output_event_event_modemanager_msg_in_reading_PRESENT);
        Observable_Event_output_event_event_modemanager_msg_in_reading_assign_value(dst.data.reading, src.data.reading);
    ::  (dst.selection == Observable_Event_output_event_event_modemanager_msg_in_tc_PRESENT);
        Observable_Event_output_event_event_modemanager_msg_in_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_modemanager_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_modemanager_msg_out_ctrl_x_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_modemanager_msg_out_ctrl_x_range_check(dst);
}
inline Observable_Event_output_event_event_modemanager_msg_out_ctrl_x_range_check(Observable_Event_output_event_event_modemanager_msg_out_ctrl_x_vc)
{
    assert(((Observable_Event_output_event_event_modemanager_msg_out_ctrl_x_vc >= 0) && (Observable_Event_output_event_event_modemanager_msg_out_ctrl_x_vc <= 1000000)));
}
inline Observable_Event_output_event_event_modemanager_msg_out_ctrl_assign_value(dst, src)
{
    Observable_Event_output_event_event_modemanager_msg_out_ctrl_x_assign_value(dst.x, src.x);
}
inline Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_reading_range_check(dst);
}
inline Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_reading_range_check(Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_reading_vc)
{
    assert(((Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_reading_vc >= 0) && (Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_reading_vc <= 1000000)));
}
inline Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_ctrl_range_check(dst);
}
inline Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_ctrl_range_check(Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_ctrl_vc)
{
    assert(((Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_ctrl_vc >= 0) && (Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_ctrl_vc <= 1000000)));
}
inline Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_feedback_range_check(dst);
}
inline Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_feedback_range_check(Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_feedback_vc)
{
    assert(((Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_feedback_vc >= 0) && (Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_feedback_vc <= 1000000)));
}
inline Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_assign_value(dst, src)
{
    Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst.reading, src.reading);
    Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline Observable_Event_output_event_event_modemanager_msg_out_tm_assign_value(dst, src)
{
    Observable_Event_output_event_event_modemanager_msg_out_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline Observable_Event_output_event_event_modemanager_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_modemanager_msg_out_ctrl_PRESENT);
        Observable_Event_output_event_event_modemanager_msg_out_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  (dst.selection == Observable_Event_output_event_event_modemanager_msg_out_tm_PRESENT);
        Observable_Event_output_event_event_modemanager_msg_out_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_modemanager_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_modemanager_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_modemanager_msg_in_PRESENT);
        Observable_Event_output_event_event_modemanager_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_output_event_event_modemanager_msg_out_PRESENT);
        Observable_Event_output_event_event_modemanager_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_modemanager_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_sensor_msg_out_reading_x_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_sensor_msg_out_reading_x_range_check(dst);
}
inline Observable_Event_output_event_event_sensor_msg_out_reading_x_range_check(Observable_Event_output_event_event_sensor_msg_out_reading_x_vc)
{
    assert(((Observable_Event_output_event_event_sensor_msg_out_reading_x_vc >= 0) && (Observable_Event_output_event_event_sensor_msg_out_reading_x_vc <= 1000000)));
}
inline Observable_Event_output_event_event_sensor_msg_out_reading_assign_value(dst, src)
{
    Observable_Event_output_event_event_sensor_msg_out_reading_x_assign_value(dst.x, src.x);
}
inline Observable_Event_output_event_event_sensor_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_sensor_msg_out_reading_PRESENT);
        Observable_Event_output_event_event_sensor_msg_out_reading_assign_value(dst.data.reading, src.data.reading);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_sensor_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_sensor_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_sensor_msg_out_PRESENT);
        Observable_Event_output_event_event_sensor_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_sensor_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_actuator_PRESENT);
        Observable_Event_output_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Observable_Event_output_event_event_egse_PRESENT);
        Observable_Event_output_event_event_egse_assign_value(dst.data.egse, src.data.egse);
    ::  (dst.selection == Observable_Event_output_event_event_modemanager_PRESENT);
        Observable_Event_output_event_event_modemanager_assign_value(dst.data.modemanager, src.data.modemanager);
    ::  (dst.selection == Observable_Event_output_event_event_sensor_PRESENT);
        Observable_Event_output_event_event_sensor_assign_value(dst.data.sensor, src.data.sensor);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_assign_value(dst, src)
{
    Observable_Event_output_event_source_assign_value(dst.source, src.source);
    Observable_Event_output_event_dest_assign_value(dst.dest, src.dest);
    Observable_Event_output_event_event_assign_value(dst.event, src.event);
}
inline Observable_Event_unhandled_input_source_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_source_range_check(dst);
}
inline Observable_Event_unhandled_input_source_range_check(Observable_Event_unhandled_input_source_vc)
{
    assert((((((Observable_Event_unhandled_input_source_vc == Observable_Event_unhandled_input_source_actuator) || (Observable_Event_unhandled_input_source_vc == Observable_Event_unhandled_input_source_egse)) || (Observable_Event_unhandled_input_source_vc == Observable_Event_unhandled_input_source_modemanager)) || (Observable_Event_unhandled_input_source_vc == Observable_Event_unhandled_input_source_sensor)) || (Observable_Event_unhandled_input_source_vc == Observable_Event_unhandled_input_source_env)));
}
inline Observable_Event_unhandled_input_dest_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_dest_range_check(dst);
}
inline Observable_Event_unhandled_input_dest_range_check(Observable_Event_unhandled_input_dest_vc)
{
    assert((((((Observable_Event_unhandled_input_dest_vc == Observable_Event_unhandled_input_dest_actuator) || (Observable_Event_unhandled_input_dest_vc == Observable_Event_unhandled_input_dest_egse)) || (Observable_Event_unhandled_input_dest_vc == Observable_Event_unhandled_input_dest_modemanager)) || (Observable_Event_unhandled_input_dest_vc == Observable_Event_unhandled_input_dest_sensor)) || (Observable_Event_unhandled_input_dest_vc == Observable_Event_unhandled_input_dest_env)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_ctrl_x_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_ctrl_x_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_ctrl_x_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_ctrl_x_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_ctrl_x_vc >= 0) && (Observable_Event_unhandled_input_event_actuator_msg_in_ctrl_x_vc <= 1000000)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_ctrl_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_in_ctrl_x_assign_value(dst.x, src.x);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_input_none_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_ctrl_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_actuator_msg_out_feedback_x_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_out_feedback_x_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_out_feedback_x_range_check(Observable_Event_unhandled_input_event_actuator_msg_out_feedback_x_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_out_feedback_x_vc >= 0) && (Observable_Event_unhandled_input_event_actuator_msg_out_feedback_x_vc <= 1000000)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_out_feedback_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_out_feedback_x_assign_value(dst.x, src.x);
}
inline Observable_Event_unhandled_input_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_out_feedback_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_out_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_out_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_reading_range_check(dst);
}
inline Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_reading_range_check(Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_reading_vc)
{
    assert(((Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_reading_vc >= 0) && (Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_reading_vc <= 1000000)));
}
inline Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_range_check(dst);
}
inline Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_range_check(Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_vc)
{
    assert(((Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_vc >= 0) && (Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_vc <= 1000000)));
}
inline Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_feedback_range_check(dst);
}
inline Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_feedback_range_check(Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_feedback_vc)
{
    assert(((Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_feedback_vc >= 0) && (Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_feedback_vc <= 1000000)));
}
inline Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_reading_assign_value(dst.reading, src.reading);
    Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline Observable_Event_unhandled_input_event_egse_msg_in_tm_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_egse_msg_in_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline Observable_Event_unhandled_input_event_egse_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_egse_msg_in_tm_PRESENT);
        Observable_Event_unhandled_input_event_egse_msg_in_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_egse_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_egse_msg_out_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_egse_msg_out_tc_cfg_param_a_range_check(dst);
}
inline Observable_Event_unhandled_input_event_egse_msg_out_tc_cfg_param_a_range_check(Observable_Event_unhandled_input_event_egse_msg_out_tc_cfg_param_a_vc)
{
    assert(((Observable_Event_unhandled_input_event_egse_msg_out_tc_cfg_param_a_vc >= 0) && (Observable_Event_unhandled_input_event_egse_msg_out_tc_cfg_param_a_vc <= 1000000)));
}
inline Observable_Event_unhandled_input_event_egse_msg_out_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_egse_msg_out_tc_cfg_param_b_range_check(dst);
}
inline Observable_Event_unhandled_input_event_egse_msg_out_tc_cfg_param_b_range_check(Observable_Event_unhandled_input_event_egse_msg_out_tc_cfg_param_b_vc)
{
    assert(((Observable_Event_unhandled_input_event_egse_msg_out_tc_cfg_param_b_vc >= 0) && (Observable_Event_unhandled_input_event_egse_msg_out_tc_cfg_param_b_vc <= 1000000)));
}
inline Observable_Event_unhandled_input_event_egse_msg_out_tc_cfg_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_egse_msg_out_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    Observable_Event_unhandled_input_event_egse_msg_out_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline Observable_Event_unhandled_input_event_egse_msg_out_tc_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_egse_msg_out_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline Observable_Event_unhandled_input_event_egse_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_egse_msg_out_tc_PRESENT);
        Observable_Event_unhandled_input_event_egse_msg_out_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_egse_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_egse_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_egse_msg_in_PRESENT);
        Observable_Event_unhandled_input_event_egse_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_unhandled_input_event_egse_msg_out_PRESENT);
        Observable_Event_unhandled_input_event_egse_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_egse_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_modemanager_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_unhandled_input_event_modemanager_msg_in_feedback_x_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_modemanager_msg_in_feedback_x_range_check(dst);
}
inline Observable_Event_unhandled_input_event_modemanager_msg_in_feedback_x_range_check(Observable_Event_unhandled_input_event_modemanager_msg_in_feedback_x_vc)
{
    assert(((Observable_Event_unhandled_input_event_modemanager_msg_in_feedback_x_vc >= 0) && (Observable_Event_unhandled_input_event_modemanager_msg_in_feedback_x_vc <= 1000000)));
}
inline Observable_Event_unhandled_input_event_modemanager_msg_in_feedback_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_modemanager_msg_in_feedback_x_assign_value(dst.x, src.x);
}
inline Observable_Event_unhandled_input_event_modemanager_msg_in_reading_x_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_modemanager_msg_in_reading_x_range_check(dst);
}
inline Observable_Event_unhandled_input_event_modemanager_msg_in_reading_x_range_check(Observable_Event_unhandled_input_event_modemanager_msg_in_reading_x_vc)
{
    assert(((Observable_Event_unhandled_input_event_modemanager_msg_in_reading_x_vc >= 0) && (Observable_Event_unhandled_input_event_modemanager_msg_in_reading_x_vc <= 1000000)));
}
inline Observable_Event_unhandled_input_event_modemanager_msg_in_reading_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_modemanager_msg_in_reading_x_assign_value(dst.x, src.x);
}
inline Observable_Event_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_range_check(dst);
}
inline Observable_Event_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_range_check(Observable_Event_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_vc)
{
    assert(((Observable_Event_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_vc >= 0) && (Observable_Event_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_vc <= 1000000)));
}
inline Observable_Event_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_range_check(dst);
}
inline Observable_Event_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_range_check(Observable_Event_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_vc)
{
    assert(((Observable_Event_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_vc >= 0) && (Observable_Event_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_vc <= 1000000)));
}
inline Observable_Event_unhandled_input_event_modemanager_msg_in_tc_cfg_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    Observable_Event_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline Observable_Event_unhandled_input_event_modemanager_msg_in_tc_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_modemanager_msg_in_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline Observable_Event_unhandled_input_event_modemanager_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_modemanager_msg_in_input_none_PRESENT);
        Observable_Event_unhandled_input_event_modemanager_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_unhandled_input_event_modemanager_msg_in_feedback_PRESENT);
        Observable_Event_unhandled_input_event_modemanager_msg_in_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  (dst.selection == Observable_Event_unhandled_input_event_modemanager_msg_in_reading_PRESENT);
        Observable_Event_unhandled_input_event_modemanager_msg_in_reading_assign_value(dst.data.reading, src.data.reading);
    ::  (dst.selection == Observable_Event_unhandled_input_event_modemanager_msg_in_tc_PRESENT);
        Observable_Event_unhandled_input_event_modemanager_msg_in_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_modemanager_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_modemanager_msg_out_ctrl_x_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_modemanager_msg_out_ctrl_x_range_check(dst);
}
inline Observable_Event_unhandled_input_event_modemanager_msg_out_ctrl_x_range_check(Observable_Event_unhandled_input_event_modemanager_msg_out_ctrl_x_vc)
{
    assert(((Observable_Event_unhandled_input_event_modemanager_msg_out_ctrl_x_vc >= 0) && (Observable_Event_unhandled_input_event_modemanager_msg_out_ctrl_x_vc <= 1000000)));
}
inline Observable_Event_unhandled_input_event_modemanager_msg_out_ctrl_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_modemanager_msg_out_ctrl_x_assign_value(dst.x, src.x);
}
inline Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_range_check(dst);
}
inline Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_range_check(Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_vc)
{
    assert(((Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_vc >= 0) && (Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_vc <= 1000000)));
}
inline Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_range_check(dst);
}
inline Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_range_check(Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_vc)
{
    assert(((Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_vc >= 0) && (Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_vc <= 1000000)));
}
inline Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_range_check(dst);
}
inline Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_range_check(Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_vc)
{
    assert(((Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_vc >= 0) && (Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_vc <= 1000000)));
}
inline Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst.reading, src.reading);
    Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline Observable_Event_unhandled_input_event_modemanager_msg_out_tm_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_modemanager_msg_out_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline Observable_Event_unhandled_input_event_modemanager_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_modemanager_msg_out_ctrl_PRESENT);
        Observable_Event_unhandled_input_event_modemanager_msg_out_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  (dst.selection == Observable_Event_unhandled_input_event_modemanager_msg_out_tm_PRESENT);
        Observable_Event_unhandled_input_event_modemanager_msg_out_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_modemanager_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_modemanager_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_modemanager_msg_in_PRESENT);
        Observable_Event_unhandled_input_event_modemanager_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_unhandled_input_event_modemanager_msg_out_PRESENT);
        Observable_Event_unhandled_input_event_modemanager_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_modemanager_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_sensor_msg_out_reading_x_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_sensor_msg_out_reading_x_range_check(dst);
}
inline Observable_Event_unhandled_input_event_sensor_msg_out_reading_x_range_check(Observable_Event_unhandled_input_event_sensor_msg_out_reading_x_vc)
{
    assert(((Observable_Event_unhandled_input_event_sensor_msg_out_reading_x_vc >= 0) && (Observable_Event_unhandled_input_event_sensor_msg_out_reading_x_vc <= 1000000)));
}
inline Observable_Event_unhandled_input_event_sensor_msg_out_reading_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_sensor_msg_out_reading_x_assign_value(dst.x, src.x);
}
inline Observable_Event_unhandled_input_event_sensor_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_sensor_msg_out_reading_PRESENT);
        Observable_Event_unhandled_input_event_sensor_msg_out_reading_assign_value(dst.data.reading, src.data.reading);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_sensor_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_sensor_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_sensor_msg_out_PRESENT);
        Observable_Event_unhandled_input_event_sensor_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_sensor_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_PRESENT);
        Observable_Event_unhandled_input_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Observable_Event_unhandled_input_event_egse_PRESENT);
        Observable_Event_unhandled_input_event_egse_assign_value(dst.data.egse, src.data.egse);
    ::  (dst.selection == Observable_Event_unhandled_input_event_modemanager_PRESENT);
        Observable_Event_unhandled_input_event_modemanager_assign_value(dst.data.modemanager, src.data.modemanager);
    ::  (dst.selection == Observable_Event_unhandled_input_event_sensor_PRESENT);
        Observable_Event_unhandled_input_event_sensor_assign_value(dst.data.sensor, src.data.sensor);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_assign_value(dst, src)
{
    Observable_Event_unhandled_input_source_assign_value(dst.source, src.source);
    Observable_Event_unhandled_input_dest_assign_value(dst.dest, src.dest);
    Observable_Event_unhandled_input_event_assign_value(dst.event, src.event);
}
inline Observable_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_no_event_PRESENT);
        Observable_Event_no_event_assign_value(dst.data.no_event, src.data.no_event);
    ::  (dst.selection == Observable_Event_system_startup_PRESENT);
        Observable_Event_system_startup_assign_value(dst.data.system_startup, src.data.system_startup);
    ::  (dst.selection == Observable_Event_input_event_PRESENT);
        Observable_Event_input_event_assign_value(dst.data.input_event, src.data.input_event);
    ::  (dst.selection == Observable_Event_output_event_PRESENT);
        Observable_Event_output_event_assign_value(dst.data.output_event, src.data.output_event);
    ::  (dst.selection == Observable_Event_unhandled_input_PRESENT);
        Observable_Event_unhandled_input_assign_value(dst.data.unhandled_input, src.data.unhandled_input);
    ::  else;
        skip;
    fi;
}
inline Observable_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_no_event_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_system_startup_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_input_event_source_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_source_range_check(dst);
}
inline Events_Ty_elem_input_event_source_range_check(Events_Ty_elem_input_event_source_vc)
{
    assert((((((Events_Ty_elem_input_event_source_vc == Events_Ty_elem_input_event_source_actuator) || (Events_Ty_elem_input_event_source_vc == Events_Ty_elem_input_event_source_egse)) || (Events_Ty_elem_input_event_source_vc == Events_Ty_elem_input_event_source_modemanager)) || (Events_Ty_elem_input_event_source_vc == Events_Ty_elem_input_event_source_sensor)) || (Events_Ty_elem_input_event_source_vc == Events_Ty_elem_input_event_source_env)));
}
inline Events_Ty_elem_input_event_dest_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_dest_range_check(dst);
}
inline Events_Ty_elem_input_event_dest_range_check(Events_Ty_elem_input_event_dest_vc)
{
    assert((((((Events_Ty_elem_input_event_dest_vc == Events_Ty_elem_input_event_dest_actuator) || (Events_Ty_elem_input_event_dest_vc == Events_Ty_elem_input_event_dest_egse)) || (Events_Ty_elem_input_event_dest_vc == Events_Ty_elem_input_event_dest_modemanager)) || (Events_Ty_elem_input_event_dest_vc == Events_Ty_elem_input_event_dest_sensor)) || (Events_Ty_elem_input_event_dest_vc == Events_Ty_elem_input_event_dest_env)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_ctrl_x_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_ctrl_x_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_ctrl_x_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_ctrl_x_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_ctrl_x_vc >= 0) && (Events_Ty_elem_input_event_event_actuator_msg_in_ctrl_x_vc <= 1000000)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_ctrl_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_in_ctrl_x_assign_value(dst.x, src.x);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_input_none_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_ctrl_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_actuator_msg_out_feedback_x_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_out_feedback_x_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_out_feedback_x_range_check(Events_Ty_elem_input_event_event_actuator_msg_out_feedback_x_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_out_feedback_x_vc >= 0) && (Events_Ty_elem_input_event_event_actuator_msg_out_feedback_x_vc <= 1000000)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_out_feedback_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_out_feedback_x_assign_value(dst.x, src.x);
}
inline Events_Ty_elem_input_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_out_feedback_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_out_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_out_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_reading_range_check(dst);
}
inline Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_reading_range_check(Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_reading_vc)
{
    assert(((Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_reading_vc >= 0) && (Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_reading_vc <= 1000000)));
}
inline Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_ctrl_range_check(dst);
}
inline Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_ctrl_range_check(Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_ctrl_vc)
{
    assert(((Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_ctrl_vc >= 0) && (Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_ctrl_vc <= 1000000)));
}
inline Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_feedback_range_check(dst);
}
inline Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_feedback_range_check(Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_feedback_vc)
{
    assert(((Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_feedback_vc >= 0) && (Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_feedback_vc <= 1000000)));
}
inline Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_reading_assign_value(dst.reading, src.reading);
    Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline Events_Ty_elem_input_event_event_egse_msg_in_tm_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_egse_msg_in_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline Events_Ty_elem_input_event_event_egse_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_egse_msg_in_tm_PRESENT);
        Events_Ty_elem_input_event_event_egse_msg_in_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_egse_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_egse_msg_out_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_egse_msg_out_tc_cfg_param_a_range_check(dst);
}
inline Events_Ty_elem_input_event_event_egse_msg_out_tc_cfg_param_a_range_check(Events_Ty_elem_input_event_event_egse_msg_out_tc_cfg_param_a_vc)
{
    assert(((Events_Ty_elem_input_event_event_egse_msg_out_tc_cfg_param_a_vc >= 0) && (Events_Ty_elem_input_event_event_egse_msg_out_tc_cfg_param_a_vc <= 1000000)));
}
inline Events_Ty_elem_input_event_event_egse_msg_out_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_egse_msg_out_tc_cfg_param_b_range_check(dst);
}
inline Events_Ty_elem_input_event_event_egse_msg_out_tc_cfg_param_b_range_check(Events_Ty_elem_input_event_event_egse_msg_out_tc_cfg_param_b_vc)
{
    assert(((Events_Ty_elem_input_event_event_egse_msg_out_tc_cfg_param_b_vc >= 0) && (Events_Ty_elem_input_event_event_egse_msg_out_tc_cfg_param_b_vc <= 1000000)));
}
inline Events_Ty_elem_input_event_event_egse_msg_out_tc_cfg_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_egse_msg_out_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    Events_Ty_elem_input_event_event_egse_msg_out_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline Events_Ty_elem_input_event_event_egse_msg_out_tc_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_egse_msg_out_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline Events_Ty_elem_input_event_event_egse_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_egse_msg_out_tc_PRESENT);
        Events_Ty_elem_input_event_event_egse_msg_out_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_egse_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_egse_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_egse_msg_in_PRESENT);
        Events_Ty_elem_input_event_event_egse_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_input_event_event_egse_msg_out_PRESENT);
        Events_Ty_elem_input_event_event_egse_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_egse_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_modemanager_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_input_event_event_modemanager_msg_in_feedback_x_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_modemanager_msg_in_feedback_x_range_check(dst);
}
inline Events_Ty_elem_input_event_event_modemanager_msg_in_feedback_x_range_check(Events_Ty_elem_input_event_event_modemanager_msg_in_feedback_x_vc)
{
    assert(((Events_Ty_elem_input_event_event_modemanager_msg_in_feedback_x_vc >= 0) && (Events_Ty_elem_input_event_event_modemanager_msg_in_feedback_x_vc <= 1000000)));
}
inline Events_Ty_elem_input_event_event_modemanager_msg_in_feedback_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_modemanager_msg_in_feedback_x_assign_value(dst.x, src.x);
}
inline Events_Ty_elem_input_event_event_modemanager_msg_in_reading_x_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_modemanager_msg_in_reading_x_range_check(dst);
}
inline Events_Ty_elem_input_event_event_modemanager_msg_in_reading_x_range_check(Events_Ty_elem_input_event_event_modemanager_msg_in_reading_x_vc)
{
    assert(((Events_Ty_elem_input_event_event_modemanager_msg_in_reading_x_vc >= 0) && (Events_Ty_elem_input_event_event_modemanager_msg_in_reading_x_vc <= 1000000)));
}
inline Events_Ty_elem_input_event_event_modemanager_msg_in_reading_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_modemanager_msg_in_reading_x_assign_value(dst.x, src.x);
}
inline Events_Ty_elem_input_event_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_modemanager_msg_in_tc_cfg_param_a_range_check(dst);
}
inline Events_Ty_elem_input_event_event_modemanager_msg_in_tc_cfg_param_a_range_check(Events_Ty_elem_input_event_event_modemanager_msg_in_tc_cfg_param_a_vc)
{
    assert(((Events_Ty_elem_input_event_event_modemanager_msg_in_tc_cfg_param_a_vc >= 0) && (Events_Ty_elem_input_event_event_modemanager_msg_in_tc_cfg_param_a_vc <= 1000000)));
}
inline Events_Ty_elem_input_event_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_modemanager_msg_in_tc_cfg_param_b_range_check(dst);
}
inline Events_Ty_elem_input_event_event_modemanager_msg_in_tc_cfg_param_b_range_check(Events_Ty_elem_input_event_event_modemanager_msg_in_tc_cfg_param_b_vc)
{
    assert(((Events_Ty_elem_input_event_event_modemanager_msg_in_tc_cfg_param_b_vc >= 0) && (Events_Ty_elem_input_event_event_modemanager_msg_in_tc_cfg_param_b_vc <= 1000000)));
}
inline Events_Ty_elem_input_event_event_modemanager_msg_in_tc_cfg_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    Events_Ty_elem_input_event_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline Events_Ty_elem_input_event_event_modemanager_msg_in_tc_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_modemanager_msg_in_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline Events_Ty_elem_input_event_event_modemanager_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_modemanager_msg_in_input_none_PRESENT);
        Events_Ty_elem_input_event_event_modemanager_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_input_event_event_modemanager_msg_in_feedback_PRESENT);
        Events_Ty_elem_input_event_event_modemanager_msg_in_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  (dst.selection == Events_Ty_elem_input_event_event_modemanager_msg_in_reading_PRESENT);
        Events_Ty_elem_input_event_event_modemanager_msg_in_reading_assign_value(dst.data.reading, src.data.reading);
    ::  (dst.selection == Events_Ty_elem_input_event_event_modemanager_msg_in_tc_PRESENT);
        Events_Ty_elem_input_event_event_modemanager_msg_in_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_modemanager_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_modemanager_msg_out_ctrl_x_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_modemanager_msg_out_ctrl_x_range_check(dst);
}
inline Events_Ty_elem_input_event_event_modemanager_msg_out_ctrl_x_range_check(Events_Ty_elem_input_event_event_modemanager_msg_out_ctrl_x_vc)
{
    assert(((Events_Ty_elem_input_event_event_modemanager_msg_out_ctrl_x_vc >= 0) && (Events_Ty_elem_input_event_event_modemanager_msg_out_ctrl_x_vc <= 1000000)));
}
inline Events_Ty_elem_input_event_event_modemanager_msg_out_ctrl_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_modemanager_msg_out_ctrl_x_assign_value(dst.x, src.x);
}
inline Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_reading_range_check(dst);
}
inline Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_reading_range_check(Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_reading_vc)
{
    assert(((Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_reading_vc >= 0) && (Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_reading_vc <= 1000000)));
}
inline Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_ctrl_range_check(dst);
}
inline Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_ctrl_range_check(Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_ctrl_vc)
{
    assert(((Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_ctrl_vc >= 0) && (Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_ctrl_vc <= 1000000)));
}
inline Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_feedback_range_check(dst);
}
inline Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_feedback_range_check(Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_feedback_vc)
{
    assert(((Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_feedback_vc >= 0) && (Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_feedback_vc <= 1000000)));
}
inline Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst.reading, src.reading);
    Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline Events_Ty_elem_input_event_event_modemanager_msg_out_tm_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_modemanager_msg_out_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline Events_Ty_elem_input_event_event_modemanager_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_modemanager_msg_out_ctrl_PRESENT);
        Events_Ty_elem_input_event_event_modemanager_msg_out_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  (dst.selection == Events_Ty_elem_input_event_event_modemanager_msg_out_tm_PRESENT);
        Events_Ty_elem_input_event_event_modemanager_msg_out_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_modemanager_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_modemanager_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_modemanager_msg_in_PRESENT);
        Events_Ty_elem_input_event_event_modemanager_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_input_event_event_modemanager_msg_out_PRESENT);
        Events_Ty_elem_input_event_event_modemanager_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_modemanager_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_sensor_msg_out_reading_x_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_sensor_msg_out_reading_x_range_check(dst);
}
inline Events_Ty_elem_input_event_event_sensor_msg_out_reading_x_range_check(Events_Ty_elem_input_event_event_sensor_msg_out_reading_x_vc)
{
    assert(((Events_Ty_elem_input_event_event_sensor_msg_out_reading_x_vc >= 0) && (Events_Ty_elem_input_event_event_sensor_msg_out_reading_x_vc <= 1000000)));
}
inline Events_Ty_elem_input_event_event_sensor_msg_out_reading_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_sensor_msg_out_reading_x_assign_value(dst.x, src.x);
}
inline Events_Ty_elem_input_event_event_sensor_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_sensor_msg_out_reading_PRESENT);
        Events_Ty_elem_input_event_event_sensor_msg_out_reading_assign_value(dst.data.reading, src.data.reading);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_sensor_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_sensor_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_sensor_msg_out_PRESENT);
        Events_Ty_elem_input_event_event_sensor_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_sensor_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_PRESENT);
        Events_Ty_elem_input_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Events_Ty_elem_input_event_event_egse_PRESENT);
        Events_Ty_elem_input_event_event_egse_assign_value(dst.data.egse, src.data.egse);
    ::  (dst.selection == Events_Ty_elem_input_event_event_modemanager_PRESENT);
        Events_Ty_elem_input_event_event_modemanager_assign_value(dst.data.modemanager, src.data.modemanager);
    ::  (dst.selection == Events_Ty_elem_input_event_event_sensor_PRESENT);
        Events_Ty_elem_input_event_event_sensor_assign_value(dst.data.sensor, src.data.sensor);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_assign_value(dst, src)
{
    Events_Ty_elem_input_event_source_assign_value(dst.source, src.source);
    Events_Ty_elem_input_event_dest_assign_value(dst.dest, src.dest);
    Events_Ty_elem_input_event_event_assign_value(dst.event, src.event);
}
inline Events_Ty_elem_output_event_source_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_source_range_check(dst);
}
inline Events_Ty_elem_output_event_source_range_check(Events_Ty_elem_output_event_source_vc)
{
    assert((((((Events_Ty_elem_output_event_source_vc == Events_Ty_elem_output_event_source_actuator) || (Events_Ty_elem_output_event_source_vc == Events_Ty_elem_output_event_source_egse)) || (Events_Ty_elem_output_event_source_vc == Events_Ty_elem_output_event_source_modemanager)) || (Events_Ty_elem_output_event_source_vc == Events_Ty_elem_output_event_source_sensor)) || (Events_Ty_elem_output_event_source_vc == Events_Ty_elem_output_event_source_env)));
}
inline Events_Ty_elem_output_event_dest_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_dest_range_check(dst);
}
inline Events_Ty_elem_output_event_dest_range_check(Events_Ty_elem_output_event_dest_vc)
{
    assert((((((Events_Ty_elem_output_event_dest_vc == Events_Ty_elem_output_event_dest_actuator) || (Events_Ty_elem_output_event_dest_vc == Events_Ty_elem_output_event_dest_egse)) || (Events_Ty_elem_output_event_dest_vc == Events_Ty_elem_output_event_dest_modemanager)) || (Events_Ty_elem_output_event_dest_vc == Events_Ty_elem_output_event_dest_sensor)) || (Events_Ty_elem_output_event_dest_vc == Events_Ty_elem_output_event_dest_env)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_ctrl_x_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_ctrl_x_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_ctrl_x_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_ctrl_x_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_ctrl_x_vc >= 0) && (Events_Ty_elem_output_event_event_actuator_msg_in_ctrl_x_vc <= 1000000)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_ctrl_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_in_ctrl_x_assign_value(dst.x, src.x);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_input_none_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_ctrl_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_actuator_msg_out_feedback_x_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_out_feedback_x_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_out_feedback_x_range_check(Events_Ty_elem_output_event_event_actuator_msg_out_feedback_x_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_out_feedback_x_vc >= 0) && (Events_Ty_elem_output_event_event_actuator_msg_out_feedback_x_vc <= 1000000)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_out_feedback_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_out_feedback_x_assign_value(dst.x, src.x);
}
inline Events_Ty_elem_output_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_out_feedback_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_out_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_out_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_reading_range_check(dst);
}
inline Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_reading_range_check(Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_reading_vc)
{
    assert(((Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_reading_vc >= 0) && (Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_reading_vc <= 1000000)));
}
inline Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_ctrl_range_check(dst);
}
inline Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_ctrl_range_check(Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_ctrl_vc)
{
    assert(((Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_ctrl_vc >= 0) && (Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_ctrl_vc <= 1000000)));
}
inline Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_feedback_range_check(dst);
}
inline Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_feedback_range_check(Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_feedback_vc)
{
    assert(((Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_feedback_vc >= 0) && (Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_feedback_vc <= 1000000)));
}
inline Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_reading_assign_value(dst.reading, src.reading);
    Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline Events_Ty_elem_output_event_event_egse_msg_in_tm_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_egse_msg_in_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline Events_Ty_elem_output_event_event_egse_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_egse_msg_in_tm_PRESENT);
        Events_Ty_elem_output_event_event_egse_msg_in_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_egse_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_egse_msg_out_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_egse_msg_out_tc_cfg_param_a_range_check(dst);
}
inline Events_Ty_elem_output_event_event_egse_msg_out_tc_cfg_param_a_range_check(Events_Ty_elem_output_event_event_egse_msg_out_tc_cfg_param_a_vc)
{
    assert(((Events_Ty_elem_output_event_event_egse_msg_out_tc_cfg_param_a_vc >= 0) && (Events_Ty_elem_output_event_event_egse_msg_out_tc_cfg_param_a_vc <= 1000000)));
}
inline Events_Ty_elem_output_event_event_egse_msg_out_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_egse_msg_out_tc_cfg_param_b_range_check(dst);
}
inline Events_Ty_elem_output_event_event_egse_msg_out_tc_cfg_param_b_range_check(Events_Ty_elem_output_event_event_egse_msg_out_tc_cfg_param_b_vc)
{
    assert(((Events_Ty_elem_output_event_event_egse_msg_out_tc_cfg_param_b_vc >= 0) && (Events_Ty_elem_output_event_event_egse_msg_out_tc_cfg_param_b_vc <= 1000000)));
}
inline Events_Ty_elem_output_event_event_egse_msg_out_tc_cfg_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_egse_msg_out_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    Events_Ty_elem_output_event_event_egse_msg_out_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline Events_Ty_elem_output_event_event_egse_msg_out_tc_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_egse_msg_out_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline Events_Ty_elem_output_event_event_egse_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_egse_msg_out_tc_PRESENT);
        Events_Ty_elem_output_event_event_egse_msg_out_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_egse_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_egse_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_egse_msg_in_PRESENT);
        Events_Ty_elem_output_event_event_egse_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_output_event_event_egse_msg_out_PRESENT);
        Events_Ty_elem_output_event_event_egse_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_egse_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_modemanager_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_output_event_event_modemanager_msg_in_feedback_x_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_modemanager_msg_in_feedback_x_range_check(dst);
}
inline Events_Ty_elem_output_event_event_modemanager_msg_in_feedback_x_range_check(Events_Ty_elem_output_event_event_modemanager_msg_in_feedback_x_vc)
{
    assert(((Events_Ty_elem_output_event_event_modemanager_msg_in_feedback_x_vc >= 0) && (Events_Ty_elem_output_event_event_modemanager_msg_in_feedback_x_vc <= 1000000)));
}
inline Events_Ty_elem_output_event_event_modemanager_msg_in_feedback_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_modemanager_msg_in_feedback_x_assign_value(dst.x, src.x);
}
inline Events_Ty_elem_output_event_event_modemanager_msg_in_reading_x_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_modemanager_msg_in_reading_x_range_check(dst);
}
inline Events_Ty_elem_output_event_event_modemanager_msg_in_reading_x_range_check(Events_Ty_elem_output_event_event_modemanager_msg_in_reading_x_vc)
{
    assert(((Events_Ty_elem_output_event_event_modemanager_msg_in_reading_x_vc >= 0) && (Events_Ty_elem_output_event_event_modemanager_msg_in_reading_x_vc <= 1000000)));
}
inline Events_Ty_elem_output_event_event_modemanager_msg_in_reading_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_modemanager_msg_in_reading_x_assign_value(dst.x, src.x);
}
inline Events_Ty_elem_output_event_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_modemanager_msg_in_tc_cfg_param_a_range_check(dst);
}
inline Events_Ty_elem_output_event_event_modemanager_msg_in_tc_cfg_param_a_range_check(Events_Ty_elem_output_event_event_modemanager_msg_in_tc_cfg_param_a_vc)
{
    assert(((Events_Ty_elem_output_event_event_modemanager_msg_in_tc_cfg_param_a_vc >= 0) && (Events_Ty_elem_output_event_event_modemanager_msg_in_tc_cfg_param_a_vc <= 1000000)));
}
inline Events_Ty_elem_output_event_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_modemanager_msg_in_tc_cfg_param_b_range_check(dst);
}
inline Events_Ty_elem_output_event_event_modemanager_msg_in_tc_cfg_param_b_range_check(Events_Ty_elem_output_event_event_modemanager_msg_in_tc_cfg_param_b_vc)
{
    assert(((Events_Ty_elem_output_event_event_modemanager_msg_in_tc_cfg_param_b_vc >= 0) && (Events_Ty_elem_output_event_event_modemanager_msg_in_tc_cfg_param_b_vc <= 1000000)));
}
inline Events_Ty_elem_output_event_event_modemanager_msg_in_tc_cfg_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    Events_Ty_elem_output_event_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline Events_Ty_elem_output_event_event_modemanager_msg_in_tc_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_modemanager_msg_in_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline Events_Ty_elem_output_event_event_modemanager_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_modemanager_msg_in_input_none_PRESENT);
        Events_Ty_elem_output_event_event_modemanager_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_output_event_event_modemanager_msg_in_feedback_PRESENT);
        Events_Ty_elem_output_event_event_modemanager_msg_in_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  (dst.selection == Events_Ty_elem_output_event_event_modemanager_msg_in_reading_PRESENT);
        Events_Ty_elem_output_event_event_modemanager_msg_in_reading_assign_value(dst.data.reading, src.data.reading);
    ::  (dst.selection == Events_Ty_elem_output_event_event_modemanager_msg_in_tc_PRESENT);
        Events_Ty_elem_output_event_event_modemanager_msg_in_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_modemanager_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_modemanager_msg_out_ctrl_x_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_modemanager_msg_out_ctrl_x_range_check(dst);
}
inline Events_Ty_elem_output_event_event_modemanager_msg_out_ctrl_x_range_check(Events_Ty_elem_output_event_event_modemanager_msg_out_ctrl_x_vc)
{
    assert(((Events_Ty_elem_output_event_event_modemanager_msg_out_ctrl_x_vc >= 0) && (Events_Ty_elem_output_event_event_modemanager_msg_out_ctrl_x_vc <= 1000000)));
}
inline Events_Ty_elem_output_event_event_modemanager_msg_out_ctrl_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_modemanager_msg_out_ctrl_x_assign_value(dst.x, src.x);
}
inline Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_reading_range_check(dst);
}
inline Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_reading_range_check(Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_reading_vc)
{
    assert(((Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_reading_vc >= 0) && (Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_reading_vc <= 1000000)));
}
inline Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_ctrl_range_check(dst);
}
inline Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_ctrl_range_check(Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_ctrl_vc)
{
    assert(((Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_ctrl_vc >= 0) && (Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_ctrl_vc <= 1000000)));
}
inline Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_feedback_range_check(dst);
}
inline Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_feedback_range_check(Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_feedback_vc)
{
    assert(((Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_feedback_vc >= 0) && (Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_feedback_vc <= 1000000)));
}
inline Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst.reading, src.reading);
    Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline Events_Ty_elem_output_event_event_modemanager_msg_out_tm_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_modemanager_msg_out_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline Events_Ty_elem_output_event_event_modemanager_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_modemanager_msg_out_ctrl_PRESENT);
        Events_Ty_elem_output_event_event_modemanager_msg_out_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  (dst.selection == Events_Ty_elem_output_event_event_modemanager_msg_out_tm_PRESENT);
        Events_Ty_elem_output_event_event_modemanager_msg_out_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_modemanager_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_modemanager_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_modemanager_msg_in_PRESENT);
        Events_Ty_elem_output_event_event_modemanager_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_output_event_event_modemanager_msg_out_PRESENT);
        Events_Ty_elem_output_event_event_modemanager_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_modemanager_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_sensor_msg_out_reading_x_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_sensor_msg_out_reading_x_range_check(dst);
}
inline Events_Ty_elem_output_event_event_sensor_msg_out_reading_x_range_check(Events_Ty_elem_output_event_event_sensor_msg_out_reading_x_vc)
{
    assert(((Events_Ty_elem_output_event_event_sensor_msg_out_reading_x_vc >= 0) && (Events_Ty_elem_output_event_event_sensor_msg_out_reading_x_vc <= 1000000)));
}
inline Events_Ty_elem_output_event_event_sensor_msg_out_reading_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_sensor_msg_out_reading_x_assign_value(dst.x, src.x);
}
inline Events_Ty_elem_output_event_event_sensor_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_sensor_msg_out_reading_PRESENT);
        Events_Ty_elem_output_event_event_sensor_msg_out_reading_assign_value(dst.data.reading, src.data.reading);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_sensor_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_sensor_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_sensor_msg_out_PRESENT);
        Events_Ty_elem_output_event_event_sensor_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_sensor_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_PRESENT);
        Events_Ty_elem_output_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Events_Ty_elem_output_event_event_egse_PRESENT);
        Events_Ty_elem_output_event_event_egse_assign_value(dst.data.egse, src.data.egse);
    ::  (dst.selection == Events_Ty_elem_output_event_event_modemanager_PRESENT);
        Events_Ty_elem_output_event_event_modemanager_assign_value(dst.data.modemanager, src.data.modemanager);
    ::  (dst.selection == Events_Ty_elem_output_event_event_sensor_PRESENT);
        Events_Ty_elem_output_event_event_sensor_assign_value(dst.data.sensor, src.data.sensor);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_assign_value(dst, src)
{
    Events_Ty_elem_output_event_source_assign_value(dst.source, src.source);
    Events_Ty_elem_output_event_dest_assign_value(dst.dest, src.dest);
    Events_Ty_elem_output_event_event_assign_value(dst.event, src.event);
}
inline Events_Ty_elem_unhandled_input_source_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_source_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_source_range_check(Events_Ty_elem_unhandled_input_source_vc)
{
    assert((((((Events_Ty_elem_unhandled_input_source_vc == Events_Ty_elem_unhandled_input_source_actuator) || (Events_Ty_elem_unhandled_input_source_vc == Events_Ty_elem_unhandled_input_source_egse)) || (Events_Ty_elem_unhandled_input_source_vc == Events_Ty_elem_unhandled_input_source_modemanager)) || (Events_Ty_elem_unhandled_input_source_vc == Events_Ty_elem_unhandled_input_source_sensor)) || (Events_Ty_elem_unhandled_input_source_vc == Events_Ty_elem_unhandled_input_source_env)));
}
inline Events_Ty_elem_unhandled_input_dest_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_dest_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_dest_range_check(Events_Ty_elem_unhandled_input_dest_vc)
{
    assert((((((Events_Ty_elem_unhandled_input_dest_vc == Events_Ty_elem_unhandled_input_dest_actuator) || (Events_Ty_elem_unhandled_input_dest_vc == Events_Ty_elem_unhandled_input_dest_egse)) || (Events_Ty_elem_unhandled_input_dest_vc == Events_Ty_elem_unhandled_input_dest_modemanager)) || (Events_Ty_elem_unhandled_input_dest_vc == Events_Ty_elem_unhandled_input_dest_sensor)) || (Events_Ty_elem_unhandled_input_dest_vc == Events_Ty_elem_unhandled_input_dest_env)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_ctrl_x_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_ctrl_x_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_ctrl_x_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_ctrl_x_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_ctrl_x_vc >= 0) && (Events_Ty_elem_unhandled_input_event_actuator_msg_in_ctrl_x_vc <= 1000000)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_ctrl_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_ctrl_x_assign_value(dst.x, src.x);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_ctrl_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_out_feedback_x_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_feedback_x_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_out_feedback_x_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_out_feedback_x_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_out_feedback_x_vc >= 0) && (Events_Ty_elem_unhandled_input_event_actuator_msg_out_feedback_x_vc <= 1000000)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_out_feedback_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_feedback_x_assign_value(dst.x, src.x);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_out_feedback_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_out_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_out_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_reading_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_reading_range_check(Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_reading_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_reading_vc >= 0) && (Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_reading_vc <= 1000000)));
}
inline Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_range_check(Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_vc >= 0) && (Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_vc <= 1000000)));
}
inline Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_feedback_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_feedback_range_check(Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_feedback_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_feedback_vc >= 0) && (Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_feedback_vc <= 1000000)));
}
inline Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_reading_assign_value(dst.reading, src.reading);
    Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline Events_Ty_elem_unhandled_input_event_egse_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_PRESENT);
        Events_Ty_elem_unhandled_input_event_egse_msg_in_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_egse_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_a_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_a_range_check(Events_Ty_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_a_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_a_vc >= 0) && (Events_Ty_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_a_vc <= 1000000)));
}
inline Events_Ty_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_b_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_b_range_check(Events_Ty_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_b_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_b_vc >= 0) && (Events_Ty_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_b_vc <= 1000000)));
}
inline Events_Ty_elem_unhandled_input_event_egse_msg_out_tc_cfg_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    Events_Ty_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline Events_Ty_elem_unhandled_input_event_egse_msg_out_tc_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_egse_msg_out_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline Events_Ty_elem_unhandled_input_event_egse_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_egse_msg_out_tc_PRESENT);
        Events_Ty_elem_unhandled_input_event_egse_msg_out_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_egse_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_egse_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_egse_msg_in_PRESENT);
        Events_Ty_elem_unhandled_input_event_egse_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_egse_msg_out_PRESENT);
        Events_Ty_elem_unhandled_input_event_egse_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_egse_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_modemanager_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_unhandled_input_event_modemanager_msg_in_feedback_x_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_modemanager_msg_in_feedback_x_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_modemanager_msg_in_feedback_x_range_check(Events_Ty_elem_unhandled_input_event_modemanager_msg_in_feedback_x_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_modemanager_msg_in_feedback_x_vc >= 0) && (Events_Ty_elem_unhandled_input_event_modemanager_msg_in_feedback_x_vc <= 1000000)));
}
inline Events_Ty_elem_unhandled_input_event_modemanager_msg_in_feedback_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_modemanager_msg_in_feedback_x_assign_value(dst.x, src.x);
}
inline Events_Ty_elem_unhandled_input_event_modemanager_msg_in_reading_x_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_modemanager_msg_in_reading_x_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_modemanager_msg_in_reading_x_range_check(Events_Ty_elem_unhandled_input_event_modemanager_msg_in_reading_x_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_modemanager_msg_in_reading_x_vc >= 0) && (Events_Ty_elem_unhandled_input_event_modemanager_msg_in_reading_x_vc <= 1000000)));
}
inline Events_Ty_elem_unhandled_input_event_modemanager_msg_in_reading_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_modemanager_msg_in_reading_x_assign_value(dst.x, src.x);
}
inline Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_range_check(Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_vc >= 0) && (Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_vc <= 1000000)));
}
inline Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_range_check(Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_vc >= 0) && (Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_vc <= 1000000)));
}
inline Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline Events_Ty_elem_unhandled_input_event_modemanager_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_modemanager_msg_in_input_none_PRESENT);
        Events_Ty_elem_unhandled_input_event_modemanager_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_modemanager_msg_in_feedback_PRESENT);
        Events_Ty_elem_unhandled_input_event_modemanager_msg_in_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_modemanager_msg_in_reading_PRESENT);
        Events_Ty_elem_unhandled_input_event_modemanager_msg_in_reading_assign_value(dst.data.reading, src.data.reading);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc_PRESENT);
        Events_Ty_elem_unhandled_input_event_modemanager_msg_in_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_modemanager_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_modemanager_msg_out_ctrl_x_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_modemanager_msg_out_ctrl_x_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_modemanager_msg_out_ctrl_x_range_check(Events_Ty_elem_unhandled_input_event_modemanager_msg_out_ctrl_x_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_modemanager_msg_out_ctrl_x_vc >= 0) && (Events_Ty_elem_unhandled_input_event_modemanager_msg_out_ctrl_x_vc <= 1000000)));
}
inline Events_Ty_elem_unhandled_input_event_modemanager_msg_out_ctrl_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_modemanager_msg_out_ctrl_x_assign_value(dst.x, src.x);
}
inline Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_range_check(Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_vc >= 0) && (Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_vc <= 1000000)));
}
inline Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_range_check(Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_vc >= 0) && (Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_vc <= 1000000)));
}
inline Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_range_check(Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_vc >= 0) && (Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_vc <= 1000000)));
}
inline Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst.reading, src.reading);
    Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline Events_Ty_elem_unhandled_input_event_modemanager_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_modemanager_msg_out_ctrl_PRESENT);
        Events_Ty_elem_unhandled_input_event_modemanager_msg_out_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_PRESENT);
        Events_Ty_elem_unhandled_input_event_modemanager_msg_out_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_modemanager_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_modemanager_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_modemanager_msg_in_PRESENT);
        Events_Ty_elem_unhandled_input_event_modemanager_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_modemanager_msg_out_PRESENT);
        Events_Ty_elem_unhandled_input_event_modemanager_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_modemanager_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_sensor_msg_out_reading_x_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_sensor_msg_out_reading_x_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_sensor_msg_out_reading_x_range_check(Events_Ty_elem_unhandled_input_event_sensor_msg_out_reading_x_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_sensor_msg_out_reading_x_vc >= 0) && (Events_Ty_elem_unhandled_input_event_sensor_msg_out_reading_x_vc <= 1000000)));
}
inline Events_Ty_elem_unhandled_input_event_sensor_msg_out_reading_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_sensor_msg_out_reading_x_assign_value(dst.x, src.x);
}
inline Events_Ty_elem_unhandled_input_event_sensor_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_sensor_msg_out_reading_PRESENT);
        Events_Ty_elem_unhandled_input_event_sensor_msg_out_reading_assign_value(dst.data.reading, src.data.reading);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_sensor_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_sensor_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_sensor_msg_out_PRESENT);
        Events_Ty_elem_unhandled_input_event_sensor_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_sensor_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_egse_PRESENT);
        Events_Ty_elem_unhandled_input_event_egse_assign_value(dst.data.egse, src.data.egse);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_modemanager_PRESENT);
        Events_Ty_elem_unhandled_input_event_modemanager_assign_value(dst.data.modemanager, src.data.modemanager);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_sensor_PRESENT);
        Events_Ty_elem_unhandled_input_event_sensor_assign_value(dst.data.sensor, src.data.sensor);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_source_assign_value(dst.source, src.source);
    Events_Ty_elem_unhandled_input_dest_assign_value(dst.dest, src.dest);
    Events_Ty_elem_unhandled_input_event_assign_value(dst.event, src.event);
}
inline Events_Ty_elem_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_no_event_PRESENT);
        Events_Ty_elem_no_event_assign_value(dst.data.no_event, src.data.no_event);
    ::  (dst.selection == Events_Ty_elem_system_startup_PRESENT);
        Events_Ty_elem_system_startup_assign_value(dst.data.system_startup, src.data.system_startup);
    ::  (dst.selection == Events_Ty_elem_input_event_PRESENT);
        Events_Ty_elem_input_event_assign_value(dst.data.input_event, src.data.input_event);
    ::  (dst.selection == Events_Ty_elem_output_event_PRESENT);
        Events_Ty_elem_output_event_assign_value(dst.data.output_event, src.data.output_event);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_PRESENT);
        Events_Ty_elem_unhandled_input_assign_value(dst.data.unhandled_input, src.data.unhandled_input);
    ::  else;
        skip;
    fi;
}
inline Events_Ty_elem_init_value(dst)
{
    skip;
}
inline Events_ty_elem_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_assign_value(dst, src)
{
    int i;
    for(i : 0 .. (src.length - 1))
    {
        Events_Ty_elem_assign_value(dst.data[i], src.data[i]);
    }
    for(i : src.length .. 9)
    {
        Events_Ty_elem_init_value(dst.data[i]);
    }
    dst.length = src.length;
}
inline Events_Ty_size_check(Events_Ty_sc)
{
    assert(((Events_Ty_sc >= 0) && (Events_Ty_sc <= 10)));
}
inline System_State_timers_actuator_assign_value(dst, src)
{
    skip;
}
inline System_State_timers_modemanager_assign_value(dst, src)
{
    skip;
}
inline System_State_timers_dummy_entry_assign_value(dst, src)
{
    skip;
}
inline System_State_timers_assign_value(dst, src)
{
    System_State_timers_actuator_assign_value(dst.actuator, src.actuator);
    System_State_timers_modemanager_assign_value(dst.modemanager, src.modemanager);
    System_State_timers_dummy_entry_assign_value(dst.dummy_entry, src.dummy_entry);
}
inline System_State_actuator_queue_elem_no_event_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_system_startup_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_input_event_source_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_source_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_source_range_check(System_State_actuator_queue_elem_input_event_source_vc)
{
    assert((((((System_State_actuator_queue_elem_input_event_source_vc == System_State_actuator_queue_elem_input_event_source_actuator) || (System_State_actuator_queue_elem_input_event_source_vc == System_State_actuator_queue_elem_input_event_source_egse)) || (System_State_actuator_queue_elem_input_event_source_vc == System_State_actuator_queue_elem_input_event_source_modemanager)) || (System_State_actuator_queue_elem_input_event_source_vc == System_State_actuator_queue_elem_input_event_source_sensor)) || (System_State_actuator_queue_elem_input_event_source_vc == System_State_actuator_queue_elem_input_event_source_env)));
}
inline System_State_actuator_queue_elem_input_event_dest_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_dest_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_dest_range_check(System_State_actuator_queue_elem_input_event_dest_vc)
{
    assert((((((System_State_actuator_queue_elem_input_event_dest_vc == System_State_actuator_queue_elem_input_event_dest_actuator) || (System_State_actuator_queue_elem_input_event_dest_vc == System_State_actuator_queue_elem_input_event_dest_egse)) || (System_State_actuator_queue_elem_input_event_dest_vc == System_State_actuator_queue_elem_input_event_dest_modemanager)) || (System_State_actuator_queue_elem_input_event_dest_vc == System_State_actuator_queue_elem_input_event_dest_sensor)) || (System_State_actuator_queue_elem_input_event_dest_vc == System_State_actuator_queue_elem_input_event_dest_env)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ctrl_x_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ctrl_x_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ctrl_x_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ctrl_x_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ctrl_x_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ctrl_x_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ctrl_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ctrl_x_assign_value(dst.x, src.x);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ctrl_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_out_feedback_x_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_feedback_x_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_out_feedback_x_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_out_feedback_x_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_out_feedback_x_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_out_feedback_x_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_out_feedback_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_feedback_x_assign_value(dst.x, src.x);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_out_feedback_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_out_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_out_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_reading_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_reading_range_check(System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_reading_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_reading_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_reading_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_ctrl_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_ctrl_range_check(System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_ctrl_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_ctrl_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_ctrl_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_feedback_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_feedback_range_check(System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_feedback_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_feedback_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_feedback_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_reading_assign_value(dst.reading, src.reading);
    System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline System_State_actuator_queue_elem_input_event_event_egse_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_PRESENT);
        System_State_actuator_queue_elem_input_event_event_egse_msg_in_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_egse_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_a_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_a_range_check(System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_a_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_a_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_a_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_b_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_b_range_check(System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_b_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_b_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_b_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc_cfg_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline System_State_actuator_queue_elem_input_event_event_egse_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc_PRESENT);
        System_State_actuator_queue_elem_input_event_event_egse_msg_out_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_egse_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_egse_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_egse_msg_in_PRESENT);
        System_State_actuator_queue_elem_input_event_event_egse_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_egse_msg_out_PRESENT);
        System_State_actuator_queue_elem_input_event_event_egse_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_egse_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_feedback_x_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_feedback_x_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_feedback_x_range_check(System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_feedback_x_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_feedback_x_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_feedback_x_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_feedback_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_feedback_x_assign_value(dst.x, src.x);
}
inline System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_reading_x_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_reading_x_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_reading_x_range_check(System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_reading_x_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_reading_x_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_reading_x_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_reading_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_reading_x_assign_value(dst.x, src.x);
}
inline System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_a_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_a_range_check(System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_a_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_a_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_a_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_b_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_b_range_check(System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_b_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_b_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_b_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_feedback_PRESENT);
        System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_reading_PRESENT);
        System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_reading_assign_value(dst.data.reading, src.data.reading);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc_PRESENT);
        System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_modemanager_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_ctrl_x_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_ctrl_x_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_ctrl_x_range_check(System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_ctrl_x_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_ctrl_x_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_ctrl_x_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_ctrl_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_ctrl_x_assign_value(dst.x, src.x);
}
inline System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_reading_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_reading_range_check(System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_reading_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_reading_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_reading_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_ctrl_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_ctrl_range_check(System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_ctrl_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_ctrl_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_ctrl_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_feedback_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_feedback_range_check(System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_feedback_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_feedback_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_feedback_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst.reading, src.reading);
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_ctrl_PRESENT);
        System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_PRESENT);
        System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_modemanager_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_modemanager_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_PRESENT);
        System_State_actuator_queue_elem_input_event_event_modemanager_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_PRESENT);
        System_State_actuator_queue_elem_input_event_event_modemanager_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_modemanager_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_sensor_msg_out_reading_x_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_sensor_msg_out_reading_x_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_sensor_msg_out_reading_x_range_check(System_State_actuator_queue_elem_input_event_event_sensor_msg_out_reading_x_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_sensor_msg_out_reading_x_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_sensor_msg_out_reading_x_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_input_event_event_sensor_msg_out_reading_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_sensor_msg_out_reading_x_assign_value(dst.x, src.x);
}
inline System_State_actuator_queue_elem_input_event_event_sensor_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_sensor_msg_out_reading_PRESENT);
        System_State_actuator_queue_elem_input_event_event_sensor_msg_out_reading_assign_value(dst.data.reading, src.data.reading);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_sensor_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_sensor_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_sensor_msg_out_PRESENT);
        System_State_actuator_queue_elem_input_event_event_sensor_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_sensor_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_egse_PRESENT);
        System_State_actuator_queue_elem_input_event_event_egse_assign_value(dst.data.egse, src.data.egse);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_modemanager_PRESENT);
        System_State_actuator_queue_elem_input_event_event_modemanager_assign_value(dst.data.modemanager, src.data.modemanager);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_sensor_PRESENT);
        System_State_actuator_queue_elem_input_event_event_sensor_assign_value(dst.data.sensor, src.data.sensor);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_source_assign_value(dst.source, src.source);
    System_State_actuator_queue_elem_input_event_dest_assign_value(dst.dest, src.dest);
    System_State_actuator_queue_elem_input_event_event_assign_value(dst.event, src.event);
}
inline System_State_actuator_queue_elem_output_event_source_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_source_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_source_range_check(System_State_actuator_queue_elem_output_event_source_vc)
{
    assert((((((System_State_actuator_queue_elem_output_event_source_vc == System_State_actuator_queue_elem_output_event_source_actuator) || (System_State_actuator_queue_elem_output_event_source_vc == System_State_actuator_queue_elem_output_event_source_egse)) || (System_State_actuator_queue_elem_output_event_source_vc == System_State_actuator_queue_elem_output_event_source_modemanager)) || (System_State_actuator_queue_elem_output_event_source_vc == System_State_actuator_queue_elem_output_event_source_sensor)) || (System_State_actuator_queue_elem_output_event_source_vc == System_State_actuator_queue_elem_output_event_source_env)));
}
inline System_State_actuator_queue_elem_output_event_dest_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_dest_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_dest_range_check(System_State_actuator_queue_elem_output_event_dest_vc)
{
    assert((((((System_State_actuator_queue_elem_output_event_dest_vc == System_State_actuator_queue_elem_output_event_dest_actuator) || (System_State_actuator_queue_elem_output_event_dest_vc == System_State_actuator_queue_elem_output_event_dest_egse)) || (System_State_actuator_queue_elem_output_event_dest_vc == System_State_actuator_queue_elem_output_event_dest_modemanager)) || (System_State_actuator_queue_elem_output_event_dest_vc == System_State_actuator_queue_elem_output_event_dest_sensor)) || (System_State_actuator_queue_elem_output_event_dest_vc == System_State_actuator_queue_elem_output_event_dest_env)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ctrl_x_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ctrl_x_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ctrl_x_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ctrl_x_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ctrl_x_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ctrl_x_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ctrl_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ctrl_x_assign_value(dst.x, src.x);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ctrl_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_out_feedback_x_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_feedback_x_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_out_feedback_x_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_out_feedback_x_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_out_feedback_x_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_out_feedback_x_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_out_feedback_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_feedback_x_assign_value(dst.x, src.x);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_out_feedback_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_out_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_out_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_reading_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_reading_range_check(System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_reading_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_reading_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_reading_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_ctrl_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_ctrl_range_check(System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_ctrl_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_ctrl_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_ctrl_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_feedback_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_feedback_range_check(System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_feedback_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_feedback_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_feedback_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_reading_assign_value(dst.reading, src.reading);
    System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline System_State_actuator_queue_elem_output_event_event_egse_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_PRESENT);
        System_State_actuator_queue_elem_output_event_event_egse_msg_in_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_egse_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_a_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_a_range_check(System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_a_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_a_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_a_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_b_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_b_range_check(System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_b_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_b_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_b_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc_cfg_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline System_State_actuator_queue_elem_output_event_event_egse_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc_PRESENT);
        System_State_actuator_queue_elem_output_event_event_egse_msg_out_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_egse_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_egse_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_egse_msg_in_PRESENT);
        System_State_actuator_queue_elem_output_event_event_egse_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_egse_msg_out_PRESENT);
        System_State_actuator_queue_elem_output_event_event_egse_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_egse_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_feedback_x_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_feedback_x_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_feedback_x_range_check(System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_feedback_x_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_feedback_x_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_feedback_x_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_feedback_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_feedback_x_assign_value(dst.x, src.x);
}
inline System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_reading_x_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_reading_x_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_reading_x_range_check(System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_reading_x_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_reading_x_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_reading_x_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_reading_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_reading_x_assign_value(dst.x, src.x);
}
inline System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_a_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_a_range_check(System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_a_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_a_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_a_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_b_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_b_range_check(System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_b_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_b_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_b_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_feedback_PRESENT);
        System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_reading_PRESENT);
        System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_reading_assign_value(dst.data.reading, src.data.reading);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc_PRESENT);
        System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_modemanager_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_ctrl_x_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_ctrl_x_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_ctrl_x_range_check(System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_ctrl_x_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_ctrl_x_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_ctrl_x_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_ctrl_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_ctrl_x_assign_value(dst.x, src.x);
}
inline System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_reading_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_reading_range_check(System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_reading_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_reading_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_reading_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_ctrl_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_ctrl_range_check(System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_ctrl_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_ctrl_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_ctrl_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_feedback_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_feedback_range_check(System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_feedback_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_feedback_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_feedback_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst.reading, src.reading);
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_ctrl_PRESENT);
        System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_PRESENT);
        System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_modemanager_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_modemanager_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_PRESENT);
        System_State_actuator_queue_elem_output_event_event_modemanager_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_PRESENT);
        System_State_actuator_queue_elem_output_event_event_modemanager_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_modemanager_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_sensor_msg_out_reading_x_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_sensor_msg_out_reading_x_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_sensor_msg_out_reading_x_range_check(System_State_actuator_queue_elem_output_event_event_sensor_msg_out_reading_x_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_sensor_msg_out_reading_x_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_sensor_msg_out_reading_x_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_output_event_event_sensor_msg_out_reading_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_sensor_msg_out_reading_x_assign_value(dst.x, src.x);
}
inline System_State_actuator_queue_elem_output_event_event_sensor_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_sensor_msg_out_reading_PRESENT);
        System_State_actuator_queue_elem_output_event_event_sensor_msg_out_reading_assign_value(dst.data.reading, src.data.reading);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_sensor_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_sensor_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_sensor_msg_out_PRESENT);
        System_State_actuator_queue_elem_output_event_event_sensor_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_sensor_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_egse_PRESENT);
        System_State_actuator_queue_elem_output_event_event_egse_assign_value(dst.data.egse, src.data.egse);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_modemanager_PRESENT);
        System_State_actuator_queue_elem_output_event_event_modemanager_assign_value(dst.data.modemanager, src.data.modemanager);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_sensor_PRESENT);
        System_State_actuator_queue_elem_output_event_event_sensor_assign_value(dst.data.sensor, src.data.sensor);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_source_assign_value(dst.source, src.source);
    System_State_actuator_queue_elem_output_event_dest_assign_value(dst.dest, src.dest);
    System_State_actuator_queue_elem_output_event_event_assign_value(dst.event, src.event);
}
inline System_State_actuator_queue_elem_unhandled_input_source_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_source_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_source_range_check(System_State_actuator_queue_elem_unhandled_input_source_vc)
{
    assert((((((System_State_actuator_queue_elem_unhandled_input_source_vc == System_State_actuator_queue_elem_unhandled_input_source_actuator) || (System_State_actuator_queue_elem_unhandled_input_source_vc == System_State_actuator_queue_elem_unhandled_input_source_egse)) || (System_State_actuator_queue_elem_unhandled_input_source_vc == System_State_actuator_queue_elem_unhandled_input_source_modemanager)) || (System_State_actuator_queue_elem_unhandled_input_source_vc == System_State_actuator_queue_elem_unhandled_input_source_sensor)) || (System_State_actuator_queue_elem_unhandled_input_source_vc == System_State_actuator_queue_elem_unhandled_input_source_env)));
}
inline System_State_actuator_queue_elem_unhandled_input_dest_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_dest_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_dest_range_check(System_State_actuator_queue_elem_unhandled_input_dest_vc)
{
    assert((((((System_State_actuator_queue_elem_unhandled_input_dest_vc == System_State_actuator_queue_elem_unhandled_input_dest_actuator) || (System_State_actuator_queue_elem_unhandled_input_dest_vc == System_State_actuator_queue_elem_unhandled_input_dest_egse)) || (System_State_actuator_queue_elem_unhandled_input_dest_vc == System_State_actuator_queue_elem_unhandled_input_dest_modemanager)) || (System_State_actuator_queue_elem_unhandled_input_dest_vc == System_State_actuator_queue_elem_unhandled_input_dest_sensor)) || (System_State_actuator_queue_elem_unhandled_input_dest_vc == System_State_actuator_queue_elem_unhandled_input_dest_env)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ctrl_x_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ctrl_x_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ctrl_x_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ctrl_x_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ctrl_x_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ctrl_x_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ctrl_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ctrl_x_assign_value(dst.x, src.x);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ctrl_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_feedback_x_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_feedback_x_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_feedback_x_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_feedback_x_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_feedback_x_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_feedback_x_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_feedback_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_feedback_x_assign_value(dst.x, src.x);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_feedback_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_reading_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_reading_range_check(System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_reading_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_reading_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_reading_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_range_check(System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_feedback_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_feedback_range_check(System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_feedback_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_feedback_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_feedback_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_reading_assign_value(dst.reading, src.reading);
    System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_egse_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_a_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_a_range_check(System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_a_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_a_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_a_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_b_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_b_range_check(System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_b_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_b_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_b_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_egse_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_egse_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_egse_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_egse_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_egse_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_feedback_x_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_feedback_x_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_feedback_x_range_check(System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_feedback_x_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_feedback_x_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_feedback_x_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_feedback_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_feedback_x_assign_value(dst.x, src.x);
}
inline System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_reading_x_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_reading_x_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_reading_x_range_check(System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_reading_x_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_reading_x_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_reading_x_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_reading_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_reading_x_assign_value(dst.x, src.x);
}
inline System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_range_check(System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_range_check(System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_feedback_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_reading_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_reading_assign_value(dst.data.reading, src.data.reading);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl_x_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl_x_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl_x_range_check(System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl_x_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl_x_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl_x_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl_x_assign_value(dst.x, src.x);
}
inline System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_range_check(System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_range_check(System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_range_check(System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst.reading, src.reading);
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_modemanager_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_modemanager_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_modemanager_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_sensor_msg_out_reading_x_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_sensor_msg_out_reading_x_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_sensor_msg_out_reading_x_range_check(System_State_actuator_queue_elem_unhandled_input_event_sensor_msg_out_reading_x_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_sensor_msg_out_reading_x_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_sensor_msg_out_reading_x_vc <= 1000000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_sensor_msg_out_reading_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_sensor_msg_out_reading_x_assign_value(dst.x, src.x);
}
inline System_State_actuator_queue_elem_unhandled_input_event_sensor_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_sensor_msg_out_reading_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_sensor_msg_out_reading_assign_value(dst.data.reading, src.data.reading);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_sensor_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_sensor_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_sensor_msg_out_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_sensor_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_sensor_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_egse_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_egse_assign_value(dst.data.egse, src.data.egse);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_modemanager_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_modemanager_assign_value(dst.data.modemanager, src.data.modemanager);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_sensor_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_sensor_assign_value(dst.data.sensor, src.data.sensor);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_source_assign_value(dst.source, src.source);
    System_State_actuator_queue_elem_unhandled_input_dest_assign_value(dst.dest, src.dest);
    System_State_actuator_queue_elem_unhandled_input_event_assign_value(dst.event, src.event);
}
inline System_State_actuator_queue_elem_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_no_event_PRESENT);
        System_State_actuator_queue_elem_no_event_assign_value(dst.data.no_event, src.data.no_event);
    ::  (dst.selection == System_State_actuator_queue_elem_system_startup_PRESENT);
        System_State_actuator_queue_elem_system_startup_assign_value(dst.data.system_startup, src.data.system_startup);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_PRESENT);
        System_State_actuator_queue_elem_input_event_assign_value(dst.data.input_event, src.data.input_event);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_PRESENT);
        System_State_actuator_queue_elem_output_event_assign_value(dst.data.output_event, src.data.output_event);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_assign_value(dst.data.unhandled_input, src.data.unhandled_input);
    ::  else;
        skip;
    fi;
}
inline System_State_actuator_queue_elem_init_value(dst)
{
    skip;
}
inline System_state_actuator_queue_elem_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_assign_value(dst, src)
{
    int i;
    for(i : 0 .. (src.length - 1))
    {
        System_State_actuator_queue_elem_assign_value(dst.data[i], src.data[i]);
    }
    for(i : src.length .. 1)
    {
        System_State_actuator_queue_elem_init_value(dst.data[i]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_size_check(System_State_actuator_queue_sc)
{
    assert(((System_State_actuator_queue_sc >= 0) && (System_State_actuator_queue_sc <= 2)));
}
inline System_State_modemanager_queue_elem_no_event_assign_value(dst, src)
{
    skip;
}
inline System_State_modemanager_queue_elem_system_startup_assign_value(dst, src)
{
    skip;
}
inline System_State_modemanager_queue_elem_input_event_source_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_input_event_source_range_check(dst);
}
inline System_State_modemanager_queue_elem_input_event_source_range_check(System_State_modemanager_queue_elem_input_event_source_vc)
{
    assert((((((System_State_modemanager_queue_elem_input_event_source_vc == System_State_modemanager_queue_elem_input_event_source_actuator) || (System_State_modemanager_queue_elem_input_event_source_vc == System_State_modemanager_queue_elem_input_event_source_egse)) || (System_State_modemanager_queue_elem_input_event_source_vc == System_State_modemanager_queue_elem_input_event_source_modemanager)) || (System_State_modemanager_queue_elem_input_event_source_vc == System_State_modemanager_queue_elem_input_event_source_sensor)) || (System_State_modemanager_queue_elem_input_event_source_vc == System_State_modemanager_queue_elem_input_event_source_env)));
}
inline System_State_modemanager_queue_elem_input_event_dest_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_input_event_dest_range_check(dst);
}
inline System_State_modemanager_queue_elem_input_event_dest_range_check(System_State_modemanager_queue_elem_input_event_dest_vc)
{
    assert((((((System_State_modemanager_queue_elem_input_event_dest_vc == System_State_modemanager_queue_elem_input_event_dest_actuator) || (System_State_modemanager_queue_elem_input_event_dest_vc == System_State_modemanager_queue_elem_input_event_dest_egse)) || (System_State_modemanager_queue_elem_input_event_dest_vc == System_State_modemanager_queue_elem_input_event_dest_modemanager)) || (System_State_modemanager_queue_elem_input_event_dest_vc == System_State_modemanager_queue_elem_input_event_dest_sensor)) || (System_State_modemanager_queue_elem_input_event_dest_vc == System_State_modemanager_queue_elem_input_event_dest_env)));
}
inline System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_ctrl_x_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_ctrl_x_range_check(dst);
}
inline System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_ctrl_x_range_check(System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_ctrl_x_vc)
{
    assert(((System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_ctrl_x_vc >= 0) && (System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_ctrl_x_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_ctrl_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_ctrl_x_assign_value(dst.x, src.x);
}
inline System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_input_none_PRESENT);
        System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_ctrl_PRESENT);
        System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_input_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_input_event_event_actuator_msg_out_feedback_x_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_input_event_event_actuator_msg_out_feedback_x_range_check(dst);
}
inline System_State_modemanager_queue_elem_input_event_event_actuator_msg_out_feedback_x_range_check(System_State_modemanager_queue_elem_input_event_event_actuator_msg_out_feedback_x_vc)
{
    assert(((System_State_modemanager_queue_elem_input_event_event_actuator_msg_out_feedback_x_vc >= 0) && (System_State_modemanager_queue_elem_input_event_event_actuator_msg_out_feedback_x_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_input_event_event_actuator_msg_out_feedback_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_input_event_event_actuator_msg_out_feedback_x_assign_value(dst.x, src.x);
}
inline System_State_modemanager_queue_elem_input_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_input_event_event_actuator_msg_out_feedback_PRESENT);
        System_State_modemanager_queue_elem_input_event_event_actuator_msg_out_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_input_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_input_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_PRESENT);
        System_State_modemanager_queue_elem_input_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_modemanager_queue_elem_input_event_event_actuator_msg_out_PRESENT);
        System_State_modemanager_queue_elem_input_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_input_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_reading_range_check(dst);
}
inline System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_reading_range_check(System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_reading_vc)
{
    assert(((System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_reading_vc >= 0) && (System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_reading_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_ctrl_range_check(dst);
}
inline System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_ctrl_range_check(System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_ctrl_vc)
{
    assert(((System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_ctrl_vc >= 0) && (System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_ctrl_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_feedback_range_check(dst);
}
inline System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_feedback_range_check(System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_feedback_vc)
{
    assert(((System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_feedback_vc >= 0) && (System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_feedback_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_reading_assign_value(dst.reading, src.reading);
    System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline System_State_modemanager_queue_elem_input_event_event_egse_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_PRESENT);
        System_State_modemanager_queue_elem_input_event_event_egse_msg_in_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_input_event_event_egse_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_a_range_check(dst);
}
inline System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_a_range_check(System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_a_vc)
{
    assert(((System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_a_vc >= 0) && (System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_a_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_b_range_check(dst);
}
inline System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_b_range_check(System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_b_vc)
{
    assert(((System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_b_vc >= 0) && (System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_b_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc_cfg_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline System_State_modemanager_queue_elem_input_event_event_egse_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc_PRESENT);
        System_State_modemanager_queue_elem_input_event_event_egse_msg_out_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_input_event_event_egse_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_input_event_event_egse_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_input_event_event_egse_msg_in_PRESENT);
        System_State_modemanager_queue_elem_input_event_event_egse_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_modemanager_queue_elem_input_event_event_egse_msg_out_PRESENT);
        System_State_modemanager_queue_elem_input_event_event_egse_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_input_event_event_egse_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_feedback_x_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_feedback_x_range_check(dst);
}
inline System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_feedback_x_range_check(System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_feedback_x_vc)
{
    assert(((System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_feedback_x_vc >= 0) && (System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_feedback_x_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_feedback_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_feedback_x_assign_value(dst.x, src.x);
}
inline System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_reading_x_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_reading_x_range_check(dst);
}
inline System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_reading_x_range_check(System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_reading_x_vc)
{
    assert(((System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_reading_x_vc >= 0) && (System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_reading_x_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_reading_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_reading_x_assign_value(dst.x, src.x);
}
inline System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_a_range_check(dst);
}
inline System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_a_range_check(System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_a_vc)
{
    assert(((System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_a_vc >= 0) && (System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_a_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_b_range_check(dst);
}
inline System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_b_range_check(System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_b_vc)
{
    assert(((System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_b_vc >= 0) && (System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_b_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_input_none_PRESENT);
        System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_feedback_PRESENT);
        System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  (dst.selection == System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_reading_PRESENT);
        System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_reading_assign_value(dst.data.reading, src.data.reading);
    ::  (dst.selection == System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc_PRESENT);
        System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_input_event_event_modemanager_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_ctrl_x_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_ctrl_x_range_check(dst);
}
inline System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_ctrl_x_range_check(System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_ctrl_x_vc)
{
    assert(((System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_ctrl_x_vc >= 0) && (System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_ctrl_x_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_ctrl_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_ctrl_x_assign_value(dst.x, src.x);
}
inline System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_reading_range_check(dst);
}
inline System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_reading_range_check(System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_reading_vc)
{
    assert(((System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_reading_vc >= 0) && (System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_reading_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_ctrl_range_check(dst);
}
inline System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_ctrl_range_check(System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_ctrl_vc)
{
    assert(((System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_ctrl_vc >= 0) && (System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_ctrl_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_feedback_range_check(dst);
}
inline System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_feedback_range_check(System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_feedback_vc)
{
    assert(((System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_feedback_vc >= 0) && (System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_feedback_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst.reading, src.reading);
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_ctrl_PRESENT);
        System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  (dst.selection == System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_PRESENT);
        System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_input_event_event_modemanager_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_input_event_event_modemanager_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_PRESENT);
        System_State_modemanager_queue_elem_input_event_event_modemanager_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_PRESENT);
        System_State_modemanager_queue_elem_input_event_event_modemanager_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_input_event_event_modemanager_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_input_event_event_sensor_msg_out_reading_x_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_input_event_event_sensor_msg_out_reading_x_range_check(dst);
}
inline System_State_modemanager_queue_elem_input_event_event_sensor_msg_out_reading_x_range_check(System_State_modemanager_queue_elem_input_event_event_sensor_msg_out_reading_x_vc)
{
    assert(((System_State_modemanager_queue_elem_input_event_event_sensor_msg_out_reading_x_vc >= 0) && (System_State_modemanager_queue_elem_input_event_event_sensor_msg_out_reading_x_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_input_event_event_sensor_msg_out_reading_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_input_event_event_sensor_msg_out_reading_x_assign_value(dst.x, src.x);
}
inline System_State_modemanager_queue_elem_input_event_event_sensor_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_input_event_event_sensor_msg_out_reading_PRESENT);
        System_State_modemanager_queue_elem_input_event_event_sensor_msg_out_reading_assign_value(dst.data.reading, src.data.reading);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_input_event_event_sensor_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_input_event_event_sensor_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_input_event_event_sensor_msg_out_PRESENT);
        System_State_modemanager_queue_elem_input_event_event_sensor_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_input_event_event_sensor_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_input_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_input_event_event_actuator_PRESENT);
        System_State_modemanager_queue_elem_input_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_modemanager_queue_elem_input_event_event_egse_PRESENT);
        System_State_modemanager_queue_elem_input_event_event_egse_assign_value(dst.data.egse, src.data.egse);
    ::  (dst.selection == System_State_modemanager_queue_elem_input_event_event_modemanager_PRESENT);
        System_State_modemanager_queue_elem_input_event_event_modemanager_assign_value(dst.data.modemanager, src.data.modemanager);
    ::  (dst.selection == System_State_modemanager_queue_elem_input_event_event_sensor_PRESENT);
        System_State_modemanager_queue_elem_input_event_event_sensor_assign_value(dst.data.sensor, src.data.sensor);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_input_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_input_event_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_input_event_source_assign_value(dst.source, src.source);
    System_State_modemanager_queue_elem_input_event_dest_assign_value(dst.dest, src.dest);
    System_State_modemanager_queue_elem_input_event_event_assign_value(dst.event, src.event);
}
inline System_State_modemanager_queue_elem_output_event_source_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_output_event_source_range_check(dst);
}
inline System_State_modemanager_queue_elem_output_event_source_range_check(System_State_modemanager_queue_elem_output_event_source_vc)
{
    assert((((((System_State_modemanager_queue_elem_output_event_source_vc == System_State_modemanager_queue_elem_output_event_source_actuator) || (System_State_modemanager_queue_elem_output_event_source_vc == System_State_modemanager_queue_elem_output_event_source_egse)) || (System_State_modemanager_queue_elem_output_event_source_vc == System_State_modemanager_queue_elem_output_event_source_modemanager)) || (System_State_modemanager_queue_elem_output_event_source_vc == System_State_modemanager_queue_elem_output_event_source_sensor)) || (System_State_modemanager_queue_elem_output_event_source_vc == System_State_modemanager_queue_elem_output_event_source_env)));
}
inline System_State_modemanager_queue_elem_output_event_dest_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_output_event_dest_range_check(dst);
}
inline System_State_modemanager_queue_elem_output_event_dest_range_check(System_State_modemanager_queue_elem_output_event_dest_vc)
{
    assert((((((System_State_modemanager_queue_elem_output_event_dest_vc == System_State_modemanager_queue_elem_output_event_dest_actuator) || (System_State_modemanager_queue_elem_output_event_dest_vc == System_State_modemanager_queue_elem_output_event_dest_egse)) || (System_State_modemanager_queue_elem_output_event_dest_vc == System_State_modemanager_queue_elem_output_event_dest_modemanager)) || (System_State_modemanager_queue_elem_output_event_dest_vc == System_State_modemanager_queue_elem_output_event_dest_sensor)) || (System_State_modemanager_queue_elem_output_event_dest_vc == System_State_modemanager_queue_elem_output_event_dest_env)));
}
inline System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_ctrl_x_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_ctrl_x_range_check(dst);
}
inline System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_ctrl_x_range_check(System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_ctrl_x_vc)
{
    assert(((System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_ctrl_x_vc >= 0) && (System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_ctrl_x_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_ctrl_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_ctrl_x_assign_value(dst.x, src.x);
}
inline System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_input_none_PRESENT);
        System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_ctrl_PRESENT);
        System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_output_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_output_event_event_actuator_msg_out_feedback_x_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_output_event_event_actuator_msg_out_feedback_x_range_check(dst);
}
inline System_State_modemanager_queue_elem_output_event_event_actuator_msg_out_feedback_x_range_check(System_State_modemanager_queue_elem_output_event_event_actuator_msg_out_feedback_x_vc)
{
    assert(((System_State_modemanager_queue_elem_output_event_event_actuator_msg_out_feedback_x_vc >= 0) && (System_State_modemanager_queue_elem_output_event_event_actuator_msg_out_feedback_x_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_output_event_event_actuator_msg_out_feedback_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_output_event_event_actuator_msg_out_feedback_x_assign_value(dst.x, src.x);
}
inline System_State_modemanager_queue_elem_output_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_output_event_event_actuator_msg_out_feedback_PRESENT);
        System_State_modemanager_queue_elem_output_event_event_actuator_msg_out_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_output_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_output_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_PRESENT);
        System_State_modemanager_queue_elem_output_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_modemanager_queue_elem_output_event_event_actuator_msg_out_PRESENT);
        System_State_modemanager_queue_elem_output_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_output_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_reading_range_check(dst);
}
inline System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_reading_range_check(System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_reading_vc)
{
    assert(((System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_reading_vc >= 0) && (System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_reading_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_ctrl_range_check(dst);
}
inline System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_ctrl_range_check(System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_ctrl_vc)
{
    assert(((System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_ctrl_vc >= 0) && (System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_ctrl_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_feedback_range_check(dst);
}
inline System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_feedback_range_check(System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_feedback_vc)
{
    assert(((System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_feedback_vc >= 0) && (System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_feedback_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_reading_assign_value(dst.reading, src.reading);
    System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline System_State_modemanager_queue_elem_output_event_event_egse_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_PRESENT);
        System_State_modemanager_queue_elem_output_event_event_egse_msg_in_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_output_event_event_egse_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_a_range_check(dst);
}
inline System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_a_range_check(System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_a_vc)
{
    assert(((System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_a_vc >= 0) && (System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_a_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_b_range_check(dst);
}
inline System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_b_range_check(System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_b_vc)
{
    assert(((System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_b_vc >= 0) && (System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_b_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc_cfg_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline System_State_modemanager_queue_elem_output_event_event_egse_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc_PRESENT);
        System_State_modemanager_queue_elem_output_event_event_egse_msg_out_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_output_event_event_egse_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_output_event_event_egse_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_output_event_event_egse_msg_in_PRESENT);
        System_State_modemanager_queue_elem_output_event_event_egse_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_modemanager_queue_elem_output_event_event_egse_msg_out_PRESENT);
        System_State_modemanager_queue_elem_output_event_event_egse_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_output_event_event_egse_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_feedback_x_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_feedback_x_range_check(dst);
}
inline System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_feedback_x_range_check(System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_feedback_x_vc)
{
    assert(((System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_feedback_x_vc >= 0) && (System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_feedback_x_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_feedback_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_feedback_x_assign_value(dst.x, src.x);
}
inline System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_reading_x_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_reading_x_range_check(dst);
}
inline System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_reading_x_range_check(System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_reading_x_vc)
{
    assert(((System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_reading_x_vc >= 0) && (System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_reading_x_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_reading_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_reading_x_assign_value(dst.x, src.x);
}
inline System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_a_range_check(dst);
}
inline System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_a_range_check(System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_a_vc)
{
    assert(((System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_a_vc >= 0) && (System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_a_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_b_range_check(dst);
}
inline System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_b_range_check(System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_b_vc)
{
    assert(((System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_b_vc >= 0) && (System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_b_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_input_none_PRESENT);
        System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_feedback_PRESENT);
        System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  (dst.selection == System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_reading_PRESENT);
        System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_reading_assign_value(dst.data.reading, src.data.reading);
    ::  (dst.selection == System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc_PRESENT);
        System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_output_event_event_modemanager_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_ctrl_x_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_ctrl_x_range_check(dst);
}
inline System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_ctrl_x_range_check(System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_ctrl_x_vc)
{
    assert(((System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_ctrl_x_vc >= 0) && (System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_ctrl_x_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_ctrl_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_ctrl_x_assign_value(dst.x, src.x);
}
inline System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_reading_range_check(dst);
}
inline System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_reading_range_check(System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_reading_vc)
{
    assert(((System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_reading_vc >= 0) && (System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_reading_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_ctrl_range_check(dst);
}
inline System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_ctrl_range_check(System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_ctrl_vc)
{
    assert(((System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_ctrl_vc >= 0) && (System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_ctrl_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_feedback_range_check(dst);
}
inline System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_feedback_range_check(System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_feedback_vc)
{
    assert(((System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_feedback_vc >= 0) && (System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_feedback_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst.reading, src.reading);
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_ctrl_PRESENT);
        System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  (dst.selection == System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_PRESENT);
        System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_output_event_event_modemanager_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_output_event_event_modemanager_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_PRESENT);
        System_State_modemanager_queue_elem_output_event_event_modemanager_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_PRESENT);
        System_State_modemanager_queue_elem_output_event_event_modemanager_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_output_event_event_modemanager_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_output_event_event_sensor_msg_out_reading_x_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_output_event_event_sensor_msg_out_reading_x_range_check(dst);
}
inline System_State_modemanager_queue_elem_output_event_event_sensor_msg_out_reading_x_range_check(System_State_modemanager_queue_elem_output_event_event_sensor_msg_out_reading_x_vc)
{
    assert(((System_State_modemanager_queue_elem_output_event_event_sensor_msg_out_reading_x_vc >= 0) && (System_State_modemanager_queue_elem_output_event_event_sensor_msg_out_reading_x_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_output_event_event_sensor_msg_out_reading_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_output_event_event_sensor_msg_out_reading_x_assign_value(dst.x, src.x);
}
inline System_State_modemanager_queue_elem_output_event_event_sensor_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_output_event_event_sensor_msg_out_reading_PRESENT);
        System_State_modemanager_queue_elem_output_event_event_sensor_msg_out_reading_assign_value(dst.data.reading, src.data.reading);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_output_event_event_sensor_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_output_event_event_sensor_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_output_event_event_sensor_msg_out_PRESENT);
        System_State_modemanager_queue_elem_output_event_event_sensor_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_output_event_event_sensor_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_output_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_output_event_event_actuator_PRESENT);
        System_State_modemanager_queue_elem_output_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_modemanager_queue_elem_output_event_event_egse_PRESENT);
        System_State_modemanager_queue_elem_output_event_event_egse_assign_value(dst.data.egse, src.data.egse);
    ::  (dst.selection == System_State_modemanager_queue_elem_output_event_event_modemanager_PRESENT);
        System_State_modemanager_queue_elem_output_event_event_modemanager_assign_value(dst.data.modemanager, src.data.modemanager);
    ::  (dst.selection == System_State_modemanager_queue_elem_output_event_event_sensor_PRESENT);
        System_State_modemanager_queue_elem_output_event_event_sensor_assign_value(dst.data.sensor, src.data.sensor);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_output_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_output_event_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_output_event_source_assign_value(dst.source, src.source);
    System_State_modemanager_queue_elem_output_event_dest_assign_value(dst.dest, src.dest);
    System_State_modemanager_queue_elem_output_event_event_assign_value(dst.event, src.event);
}
inline System_State_modemanager_queue_elem_unhandled_input_source_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_unhandled_input_source_range_check(dst);
}
inline System_State_modemanager_queue_elem_unhandled_input_source_range_check(System_State_modemanager_queue_elem_unhandled_input_source_vc)
{
    assert((((((System_State_modemanager_queue_elem_unhandled_input_source_vc == System_State_modemanager_queue_elem_unhandled_input_source_actuator) || (System_State_modemanager_queue_elem_unhandled_input_source_vc == System_State_modemanager_queue_elem_unhandled_input_source_egse)) || (System_State_modemanager_queue_elem_unhandled_input_source_vc == System_State_modemanager_queue_elem_unhandled_input_source_modemanager)) || (System_State_modemanager_queue_elem_unhandled_input_source_vc == System_State_modemanager_queue_elem_unhandled_input_source_sensor)) || (System_State_modemanager_queue_elem_unhandled_input_source_vc == System_State_modemanager_queue_elem_unhandled_input_source_env)));
}
inline System_State_modemanager_queue_elem_unhandled_input_dest_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_unhandled_input_dest_range_check(dst);
}
inline System_State_modemanager_queue_elem_unhandled_input_dest_range_check(System_State_modemanager_queue_elem_unhandled_input_dest_vc)
{
    assert((((((System_State_modemanager_queue_elem_unhandled_input_dest_vc == System_State_modemanager_queue_elem_unhandled_input_dest_actuator) || (System_State_modemanager_queue_elem_unhandled_input_dest_vc == System_State_modemanager_queue_elem_unhandled_input_dest_egse)) || (System_State_modemanager_queue_elem_unhandled_input_dest_vc == System_State_modemanager_queue_elem_unhandled_input_dest_modemanager)) || (System_State_modemanager_queue_elem_unhandled_input_dest_vc == System_State_modemanager_queue_elem_unhandled_input_dest_sensor)) || (System_State_modemanager_queue_elem_unhandled_input_dest_vc == System_State_modemanager_queue_elem_unhandled_input_dest_env)));
}
inline System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_ctrl_x_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_ctrl_x_range_check(dst);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_ctrl_x_range_check(System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_ctrl_x_vc)
{
    assert(((System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_ctrl_x_vc >= 0) && (System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_ctrl_x_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_ctrl_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_ctrl_x_assign_value(dst.x, src.x);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT);
        System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_ctrl_PRESENT);
        System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_out_feedback_x_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_out_feedback_x_range_check(dst);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_out_feedback_x_range_check(System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_out_feedback_x_vc)
{
    assert(((System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_out_feedback_x_vc >= 0) && (System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_out_feedback_x_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_out_feedback_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_out_feedback_x_assign_value(dst.x, src.x);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_out_feedback_PRESENT);
        System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_out_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_unhandled_input_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_unhandled_input_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_PRESENT);
        System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_out_PRESENT);
        System_State_modemanager_queue_elem_unhandled_input_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_unhandled_input_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_reading_range_check(dst);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_reading_range_check(System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_reading_vc)
{
    assert(((System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_reading_vc >= 0) && (System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_reading_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_range_check(dst);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_range_check(System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_vc)
{
    assert(((System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_vc >= 0) && (System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_feedback_range_check(dst);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_feedback_range_check(System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_feedback_vc)
{
    assert(((System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_feedback_vc >= 0) && (System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_feedback_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_reading_assign_value(dst.reading, src.reading);
    System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_PRESENT);
        System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_unhandled_input_event_egse_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_a_range_check(dst);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_a_range_check(System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_a_vc)
{
    assert(((System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_a_vc >= 0) && (System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_a_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_b_range_check(dst);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_b_range_check(System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_b_vc)
{
    assert(((System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_b_vc >= 0) && (System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_b_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc_PRESENT);
        System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_unhandled_input_event_egse_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_unhandled_input_event_egse_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_PRESENT);
        System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_PRESENT);
        System_State_modemanager_queue_elem_unhandled_input_event_egse_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_unhandled_input_event_egse_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_feedback_x_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_feedback_x_range_check(dst);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_feedback_x_range_check(System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_feedback_x_vc)
{
    assert(((System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_feedback_x_vc >= 0) && (System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_feedback_x_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_feedback_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_feedback_x_assign_value(dst.x, src.x);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_reading_x_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_reading_x_range_check(dst);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_reading_x_range_check(System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_reading_x_vc)
{
    assert(((System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_reading_x_vc >= 0) && (System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_reading_x_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_reading_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_reading_x_assign_value(dst.x, src.x);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_range_check(dst);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_range_check(System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_vc)
{
    assert(((System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_vc >= 0) && (System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_range_check(dst);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_range_check(System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_vc)
{
    assert(((System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_vc >= 0) && (System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_a_assign_value(dst.param_a, src.param_a);
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc_cfg_assign_value(dst.cfg, src.cfg);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_input_none_PRESENT);
        System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_feedback_PRESENT);
        System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_feedback_assign_value(dst.data.feedback, src.data.feedback);
    ::  (dst.selection == System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_reading_PRESENT);
        System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_reading_assign_value(dst.data.reading, src.data.reading);
    ::  (dst.selection == System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc_PRESENT);
        System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_tc_assign_value(dst.data.tc, src.data.tc);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl_x_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl_x_range_check(dst);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl_x_range_check(System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl_x_vc)
{
    assert(((System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl_x_vc >= 0) && (System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl_x_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl_x_assign_value(dst.x, src.x);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_range_check(dst);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_range_check(System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_vc)
{
    assert(((System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_vc >= 0) && (System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_range_check(dst);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_range_check(System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_vc)
{
    assert(((System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_vc >= 0) && (System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_range_check(dst);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_range_check(System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_vc)
{
    assert(((System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_vc >= 0) && (System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_reading_assign_value(dst.reading, src.reading);
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_reprt_assign_value(dst.reprt, src.reprt);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl_PRESENT);
        System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_ctrl_assign_value(dst.data.ctrl, src.data.ctrl);
    ::  (dst.selection == System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_PRESENT);
        System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_tm_assign_value(dst.data.tm, src.data.tm);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_unhandled_input_event_modemanager_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_PRESENT);
        System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_PRESENT);
        System_State_modemanager_queue_elem_unhandled_input_event_modemanager_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_unhandled_input_event_modemanager_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_unhandled_input_event_sensor_msg_out_reading_x_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_queue_elem_unhandled_input_event_sensor_msg_out_reading_x_range_check(dst);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_sensor_msg_out_reading_x_range_check(System_State_modemanager_queue_elem_unhandled_input_event_sensor_msg_out_reading_x_vc)
{
    assert(((System_State_modemanager_queue_elem_unhandled_input_event_sensor_msg_out_reading_x_vc >= 0) && (System_State_modemanager_queue_elem_unhandled_input_event_sensor_msg_out_reading_x_vc <= 1000000)));
}
inline System_State_modemanager_queue_elem_unhandled_input_event_sensor_msg_out_reading_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_unhandled_input_event_sensor_msg_out_reading_x_assign_value(dst.x, src.x);
}
inline System_State_modemanager_queue_elem_unhandled_input_event_sensor_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_unhandled_input_event_sensor_msg_out_reading_PRESENT);
        System_State_modemanager_queue_elem_unhandled_input_event_sensor_msg_out_reading_assign_value(dst.data.reading, src.data.reading);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_unhandled_input_event_sensor_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_unhandled_input_event_sensor_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_unhandled_input_event_sensor_msg_out_PRESENT);
        System_State_modemanager_queue_elem_unhandled_input_event_sensor_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_unhandled_input_event_sensor_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_unhandled_input_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_unhandled_input_event_actuator_PRESENT);
        System_State_modemanager_queue_elem_unhandled_input_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_modemanager_queue_elem_unhandled_input_event_egse_PRESENT);
        System_State_modemanager_queue_elem_unhandled_input_event_egse_assign_value(dst.data.egse, src.data.egse);
    ::  (dst.selection == System_State_modemanager_queue_elem_unhandled_input_event_modemanager_PRESENT);
        System_State_modemanager_queue_elem_unhandled_input_event_modemanager_assign_value(dst.data.modemanager, src.data.modemanager);
    ::  (dst.selection == System_State_modemanager_queue_elem_unhandled_input_event_sensor_PRESENT);
        System_State_modemanager_queue_elem_unhandled_input_event_sensor_assign_value(dst.data.sensor, src.data.sensor);
    ::  else;
        skip;
    fi;
}
inline System_state_modemanager_queue_elem_unhandled_input_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_elem_unhandled_input_assign_value(dst, src)
{
    System_State_modemanager_queue_elem_unhandled_input_source_assign_value(dst.source, src.source);
    System_State_modemanager_queue_elem_unhandled_input_dest_assign_value(dst.dest, src.dest);
    System_State_modemanager_queue_elem_unhandled_input_event_assign_value(dst.event, src.event);
}
inline System_State_modemanager_queue_elem_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_modemanager_queue_elem_no_event_PRESENT);
        System_State_modemanager_queue_elem_no_event_assign_value(dst.data.no_event, src.data.no_event);
    ::  (dst.selection == System_State_modemanager_queue_elem_system_startup_PRESENT);
        System_State_modemanager_queue_elem_system_startup_assign_value(dst.data.system_startup, src.data.system_startup);
    ::  (dst.selection == System_State_modemanager_queue_elem_input_event_PRESENT);
        System_State_modemanager_queue_elem_input_event_assign_value(dst.data.input_event, src.data.input_event);
    ::  (dst.selection == System_State_modemanager_queue_elem_output_event_PRESENT);
        System_State_modemanager_queue_elem_output_event_assign_value(dst.data.output_event, src.data.output_event);
    ::  (dst.selection == System_State_modemanager_queue_elem_unhandled_input_PRESENT);
        System_State_modemanager_queue_elem_unhandled_input_assign_value(dst.data.unhandled_input, src.data.unhandled_input);
    ::  else;
        skip;
    fi;
}
inline System_State_modemanager_queue_elem_init_value(dst)
{
    skip;
}
inline System_state_modemanager_queue_elem_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_modemanager_queue_assign_value(dst, src)
{
    int i;
    for(i : 0 .. (src.length - 1))
    {
        System_State_modemanager_queue_elem_assign_value(dst.data[i], src.data[i]);
    }
    for(i : src.length .. 1)
    {
        System_State_modemanager_queue_elem_init_value(dst.data[i]);
    }
    dst.length = src.length;
}
inline System_State_modemanager_queue_size_check(System_State_modemanager_queue_sc)
{
    assert(((System_State_modemanager_queue_sc >= 0) && (System_State_modemanager_queue_sc <= 2)));
}
inline System_State_actuator_state_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_state_range_check(dst);
}
inline System_State_actuator_state_range_check(System_State_actuator_state_vc)
{
    assert(((System_State_actuator_state_vc == System_State_actuator_state_working) || (System_State_actuator_state_vc == System_State_actuator_state_idle)));
}
inline System_State_actuator_init_done_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_init_done_range_check(dst);
}
inline System_State_actuator_init_done_range_check(System_State_actuator_init_done_vc)
{
    assert(true);
}
inline System_State_actuator_sender_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_sender_range_check(dst);
}
inline System_State_actuator_sender_range_check(System_State_actuator_sender_vc)
{
    assert((((((System_State_actuator_sender_vc == System_State_actuator_sender_actuator) || (System_State_actuator_sender_vc == System_State_actuator_sender_egse)) || (System_State_actuator_sender_vc == System_State_actuator_sender_modemanager)) || (System_State_actuator_sender_vc == System_State_actuator_sender_sensor)) || (System_State_actuator_sender_vc == System_State_actuator_sender_env)));
}
inline System_State_actuator_x_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_x_range_check(dst);
}
inline System_State_actuator_x_range_check(System_State_actuator_x_vc)
{
    assert(((System_State_actuator_x_vc >= 0) && (System_State_actuator_x_vc <= 1000000)));
}
inline System_State_actuator_assign_value(dst, src)
{
    System_State_actuator_state_assign_value(dst.state, src.state);
    System_State_actuator_init_done_assign_value(dst.init_done, src.init_done);
    System_State_actuator_sender_assign_value(dst.sender, src.sender);
    System_State_actuator_x_assign_value(dst.x, src.x);
}
inline System_State_modemanager_state_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_state_range_check(dst);
}
inline System_State_modemanager_state_range_check(System_State_modemanager_state_vc)
{
    assert(((System_State_modemanager_state_vc == System_State_modemanager_state_uninitialized) || (System_State_modemanager_state_vc == System_State_modemanager_state_configured)));
}
inline System_State_modemanager_init_done_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_init_done_range_check(dst);
}
inline System_State_modemanager_init_done_range_check(System_State_modemanager_init_done_vc)
{
    assert(true);
}
inline System_State_modemanager_sender_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_sender_range_check(dst);
}
inline System_State_modemanager_sender_range_check(System_State_modemanager_sender_vc)
{
    assert((((((System_State_modemanager_sender_vc == System_State_modemanager_sender_actuator) || (System_State_modemanager_sender_vc == System_State_modemanager_sender_egse)) || (System_State_modemanager_sender_vc == System_State_modemanager_sender_modemanager)) || (System_State_modemanager_sender_vc == System_State_modemanager_sender_sensor)) || (System_State_modemanager_sender_vc == System_State_modemanager_sender_env)));
}
inline System_State_modemanager_cfg_param_a_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_cfg_param_a_range_check(dst);
}
inline System_State_modemanager_cfg_param_a_range_check(System_State_modemanager_cfg_param_a_vc)
{
    assert(((System_State_modemanager_cfg_param_a_vc >= 0) && (System_State_modemanager_cfg_param_a_vc <= 1000000)));
}
inline System_State_modemanager_cfg_param_b_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_cfg_param_b_range_check(dst);
}
inline System_State_modemanager_cfg_param_b_range_check(System_State_modemanager_cfg_param_b_vc)
{
    assert(((System_State_modemanager_cfg_param_b_vc >= 0) && (System_State_modemanager_cfg_param_b_vc <= 1000000)));
}
inline System_State_modemanager_cfg_assign_value(dst, src)
{
    System_State_modemanager_cfg_param_a_assign_value(dst.param_a, src.param_a);
    System_State_modemanager_cfg_param_b_assign_value(dst.param_b, src.param_b);
}
inline System_State_modemanager_xin_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_xin_range_check(dst);
}
inline System_State_modemanager_xin_range_check(System_State_modemanager_xin_vc)
{
    assert(((System_State_modemanager_xin_vc >= 0) && (System_State_modemanager_xin_vc <= 1000000)));
}
inline System_State_modemanager_xout_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_xout_range_check(dst);
}
inline System_State_modemanager_xout_range_check(System_State_modemanager_xout_vc)
{
    assert(((System_State_modemanager_xout_vc >= 0) && (System_State_modemanager_xout_vc <= 1000000)));
}
inline System_State_modemanager_xfeedback_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_xfeedback_range_check(dst);
}
inline System_State_modemanager_xfeedback_range_check(System_State_modemanager_xfeedback_vc)
{
    assert(((System_State_modemanager_xfeedback_vc >= 0) && (System_State_modemanager_xfeedback_vc <= 1000000)));
}
inline System_State_modemanager_rprt_reading_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_rprt_reading_range_check(dst);
}
inline System_State_modemanager_rprt_reading_range_check(System_State_modemanager_rprt_reading_vc)
{
    assert(((System_State_modemanager_rprt_reading_vc >= 0) && (System_State_modemanager_rprt_reading_vc <= 1000000)));
}
inline System_State_modemanager_rprt_ctrl_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_rprt_ctrl_range_check(dst);
}
inline System_State_modemanager_rprt_ctrl_range_check(System_State_modemanager_rprt_ctrl_vc)
{
    assert(((System_State_modemanager_rprt_ctrl_vc >= 0) && (System_State_modemanager_rprt_ctrl_vc <= 1000000)));
}
inline System_State_modemanager_rprt_feedback_assign_value(dst, src)
{
    dst = src;
    System_State_modemanager_rprt_feedback_range_check(dst);
}
inline System_State_modemanager_rprt_feedback_range_check(System_State_modemanager_rprt_feedback_vc)
{
    assert(((System_State_modemanager_rprt_feedback_vc >= 0) && (System_State_modemanager_rprt_feedback_vc <= 1000000)));
}
inline System_State_modemanager_rprt_assign_value(dst, src)
{
    System_State_modemanager_rprt_reading_assign_value(dst.reading, src.reading);
    System_State_modemanager_rprt_ctrl_assign_value(dst.ctrl, src.ctrl);
    System_State_modemanager_rprt_feedback_assign_value(dst.feedback, src.feedback);
}
inline System_State_modemanager_assign_value(dst, src)
{
    System_State_modemanager_state_assign_value(dst.state, src.state);
    System_State_modemanager_init_done_assign_value(dst.init_done, src.init_done);
    System_State_modemanager_sender_assign_value(dst.sender, src.sender);
    System_State_modemanager_cfg_assign_value(dst.cfg, src.cfg);
    System_State_modemanager_xin_assign_value(dst.xin, src.xin);
    System_State_modemanager_xout_assign_value(dst.xout, src.xout);
    System_State_modemanager_xfeedback_assign_value(dst.xfeedback, src.xfeedback);
    System_State_modemanager_rprt_assign_value(dst.rprt, src.rprt);
}
inline System_State_assign_value(dst, src)
{
    System_State_timers_assign_value(dst.timers, src.timers);
    System_State_actuator_queue_assign_value(dst.actuator_queue, src.actuator_queue);
    System_State_modemanager_queue_assign_value(dst.modemanager_queue, src.modemanager_queue);
    System_State_actuator_assign_value(dst.actuator, src.actuator);
    System_State_modemanager_assign_value(dst.modemanager, src.modemanager);
}
inline nothing_init()
{
    d_step {
        nothing.selection = Observable_Event_no_event_PRESENT;
    }
}
inline TimerData_timer_enabled_assign_value(dst, src)
{
    dst = src;
    TimerData_timer_enabled_range_check(dst);
}
inline TimerData_timer_enabled_range_check(TimerData_timer_enabled_vc)
{
    assert(true);
}
inline TimerData_interval_assign_value(dst, src)
{
    dst = src;
    TimerData_interval_range_check(dst);
}
inline TimerData_interval_range_check(TimerData_interval_vc)
{
    assert(((TimerData_interval_vc >= 0) && (TimerData_interval_vc <= 50000)));
}
inline TimerData_assign_value(dst, src)
{
    TimerData_timer_enabled_assign_value(dst.timer_enabled, src.timer_enabled);
    TimerData_interval_assign_value(dst.interval, src.interval);
}
inline AggregateTimerData_actuator_assign_value(dst, src)
{
    skip;
}
inline AggregateTimerData_modemanager_assign_value(dst, src)
{
    skip;
}
inline AggregateTimerData_dummy_entry_assign_value(dst, src)
{
    skip;
}
inline AggregateTimerData_assign_value(dst, src)
{
    AggregateTimerData_actuator_assign_value(dst.actuator, src.actuator);
    AggregateTimerData_modemanager_assign_value(dst.modemanager, src.modemanager);
    AggregateTimerData_dummy_entry_assign_value(dst.dummy_entry, src.dummy_entry);
}
inline global_dataview_init()
{
    d_step {
        nothing_init();
    }
}
