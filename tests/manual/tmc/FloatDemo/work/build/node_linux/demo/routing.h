/* File generated by kazoo for TASTE - do not edit */

#include "dataview-uniq.h"
#include <pthread.h>

// Enable all routes
void initialize_routing(void);





// Pid of the sender function containing required interface
// invoking this provided interface
extern __thread asn1SccPID actuator_controlsignal_sender_pid;

// Get sender pid for this provided interface
asn1SccPID actuator_controlsignal_get_sender();




// Routing table of function ControlSystem

// env is the last entry in the PID Enumeration containing
// list of all function instances in the system
extern bool controlsystem_controlsignal_routing_table[PID_env];

// Set route to the given destination function enabled or disabled
void controlsystem_controlsignal_set_route_enabled(asn1SccPID destination, bool is_enabled);
// Set route to the given destination as the only enabled one
void controlsystem_controlsignal_set_recipient(asn1SccPID destination);
// Set all routes enabled or disabled
void controlsystem_controlsignal_set_all_routes_enabled(bool are_enabled);
// env is the last entry in the PID Enumeration containing
// list of all function instances in the system
extern bool controlsystem_tm_routing_table[PID_env];

// Set route to the given destination function enabled or disabled
void controlsystem_tm_set_route_enabled(asn1SccPID destination, bool is_enabled);
// Set route to the given destination as the only enabled one
void controlsystem_tm_set_recipient(asn1SccPID destination);
// Set all routes enabled or disabled
void controlsystem_tm_set_all_routes_enabled(bool are_enabled);



// Pid of the sender function containing required interface
// invoking this provided interface
extern __thread asn1SccPID controlsystem_configuration_sender_pid;

// Get sender pid for this provided interface
asn1SccPID controlsystem_configuration_get_sender();
// Pid of the sender function containing required interface
// invoking this provided interface
extern __thread asn1SccPID controlsystem_reading_sender_pid;

// Get sender pid for this provided interface
asn1SccPID controlsystem_reading_get_sender();




// Routing table of function demo_Timer_Manager

// env is the last entry in the PID Enumeration containing
// list of all function instances in the system
extern bool demo_timer_manager_sensor_trigger_routing_table[PID_env];

// Set route to the given destination function enabled or disabled
void demo_timer_manager_sensor_trigger_set_route_enabled(asn1SccPID destination, bool is_enabled);
// Set route to the given destination as the only enabled one
void demo_timer_manager_sensor_trigger_set_recipient(asn1SccPID destination);
// Set all routes enabled or disabled
void demo_timer_manager_sensor_trigger_set_all_routes_enabled(bool are_enabled);



// Pid of the sender function containing required interface
// invoking this provided interface
extern __thread asn1SccPID demo_timer_manager_reset_sensor_trigger_sender_pid;

// Get sender pid for this provided interface
asn1SccPID demo_timer_manager_reset_sensor_trigger_get_sender();
// Pid of the sender function containing required interface
// invoking this provided interface
extern __thread asn1SccPID demo_timer_manager_set_sensor_trigger_sender_pid;

// Get sender pid for this provided interface
asn1SccPID demo_timer_manager_set_sensor_trigger_get_sender();
// Pid of the sender function containing required interface
// invoking this provided interface
extern __thread asn1SccPID demo_timer_manager_tick_sender_pid;

// Get sender pid for this provided interface
asn1SccPID demo_timer_manager_tick_get_sender();




// Routing table of function Host

// env is the last entry in the PID Enumeration containing
// list of all function instances in the system
extern bool host_configuration_routing_table[PID_env];

// Set route to the given destination function enabled or disabled
void host_configuration_set_route_enabled(asn1SccPID destination, bool is_enabled);
// Set route to the given destination as the only enabled one
void host_configuration_set_recipient(asn1SccPID destination);
// Set all routes enabled or disabled
void host_configuration_set_all_routes_enabled(bool are_enabled);
// env is the last entry in the PID Enumeration containing
// list of all function instances in the system
extern bool host_tc_routing_table[PID_env];

// Set route to the given destination function enabled or disabled
void host_tc_set_route_enabled(asn1SccPID destination, bool is_enabled);
// Set route to the given destination as the only enabled one
void host_tc_set_recipient(asn1SccPID destination);
// Set all routes enabled or disabled
void host_tc_set_all_routes_enabled(bool are_enabled);



// Pid of the sender function containing required interface
// invoking this provided interface
extern __thread asn1SccPID host_tm_sender_pid;

// Get sender pid for this provided interface
asn1SccPID host_tm_get_sender();




// Routing table of function Sensor

// env is the last entry in the PID Enumeration containing
// list of all function instances in the system
extern bool sensor_reset_trigger_routing_table[PID_env];

// Set route to the given destination function enabled or disabled
void sensor_reset_trigger_set_route_enabled(asn1SccPID destination, bool is_enabled);
// Set route to the given destination as the only enabled one
void sensor_reset_trigger_set_recipient(asn1SccPID destination);
// Set all routes enabled or disabled
void sensor_reset_trigger_set_all_routes_enabled(bool are_enabled);
// env is the last entry in the PID Enumeration containing
// list of all function instances in the system
extern bool sensor_set_trigger_routing_table[PID_env];

// Set route to the given destination function enabled or disabled
void sensor_set_trigger_set_route_enabled(asn1SccPID destination, bool is_enabled);
// Set route to the given destination as the only enabled one
void sensor_set_trigger_set_recipient(asn1SccPID destination);
// Set all routes enabled or disabled
void sensor_set_trigger_set_all_routes_enabled(bool are_enabled);
// env is the last entry in the PID Enumeration containing
// list of all function instances in the system
extern bool sensor_reading_routing_table[PID_env];

// Set route to the given destination function enabled or disabled
void sensor_reading_set_route_enabled(asn1SccPID destination, bool is_enabled);
// Set route to the given destination as the only enabled one
void sensor_reading_set_recipient(asn1SccPID destination);
// Set all routes enabled or disabled
void sensor_reading_set_all_routes_enabled(bool are_enabled);



// Pid of the sender function containing required interface
// invoking this provided interface
extern __thread asn1SccPID sensor_tc_sender_pid;

// Get sender pid for this provided interface
asn1SccPID sensor_tc_get_sender();
// Pid of the sender function containing required interface
// invoking this provided interface
extern __thread asn1SccPID sensor_trigger_sender_pid;

// Get sender pid for this provided interface
asn1SccPID sensor_trigger_get_sender();



