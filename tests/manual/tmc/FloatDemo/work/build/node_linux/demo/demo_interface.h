/* File generated by kazoo for TASTE - do not edit */
#include <cstddef>

#include "dataview-uniq.h"

extern "C"
{

// Protected provided interfaces of function Actuator

void call_protected_Actuator_controlSignal
      (const char *IN_buf_controlvalue, size_t size_IN_buf_controlvalue);
// End of the protected provided interfaces of function Actuator

void actuator_check_queue(bool* has_pending_msg);
// Protected provided interfaces of function ControlSystem

void call_protected_ControlSystem_configuration
      (const char *IN_buf_cfg, size_t size_IN_buf_cfg);
void call_protected_ControlSystem_reading
      (const char *IN_buf_signalvalue, size_t size_IN_buf_signalvalue);
// End of the protected provided interfaces of function ControlSystem

// Required interfaces of function ControlSystem

// Required interface controlSignal in function ControlSystem
// This RI is connected to: Actuator
void vm_controlsystem_controlsignal
        (asn1SccPID dest_pid,
         const char *IN_buf_controlvalue, size_t size_IN_buf_controlvalue);
// Required interface tm in function ControlSystem
// This RI is connected to: Host
void vm_controlsystem_tm(asn1SccPID dest_pid);
// End of the required interfaces of function ControlSystem

void controlsystem_check_queue(bool* has_pending_msg);
// Protected provided interfaces of function demo_Timer_Manager

void call_protected_demo_Timer_Manager_RESET_sensor_trigger(void);
void call_protected_demo_Timer_Manager_SET_sensor_trigger
      (const char *IN_buf_val, size_t size_IN_buf_val);
void call_protected_demo_Timer_Manager_Tick(void);
// End of the protected provided interfaces of function demo_Timer_Manager

// Required interfaces of function demo_Timer_Manager

// Required interface sensor_trigger in function demo_Timer_Manager
// This RI is connected to: sensor
void vm_demo_timer_manager_sensor_trigger(asn1SccPID dest_pid);
// End of the required interfaces of function demo_Timer_Manager

void demo_timer_manager_check_queue(bool* has_pending_msg);
// Protected provided interfaces of function Host

void call_protected_Host_tm(void);
// End of the protected provided interfaces of function Host

// Required interfaces of function Host

// Required interface configuration in function Host
// This RI is connected to: ControlSystem
void vm_host_configuration
        (asn1SccPID dest_pid,
         const char *IN_buf_cfg, size_t size_IN_buf_cfg);
// Required interface tc in function Host
// This RI is connected to: Sensor
void vm_host_tc(asn1SccPID dest_pid);
// End of the required interfaces of function Host

void host_check_queue(bool* has_pending_msg);
// Protected provided interfaces of function Sensor

void call_protected_Sensor_tc(void);
void call_protected_sensor_trigger(void);
// End of the protected provided interfaces of function Sensor

// Required interfaces of function Sensor

// Required interface RESET_trigger in function sensor
// This RI is connected to: demo_Timer_Manager
void vm_sensor_reset_trigger(asn1SccPID dest_pid);
// Required interface SET_trigger in function sensor
// This RI is connected to: demo_Timer_Manager
void vm_sensor_set_trigger
        (asn1SccPID dest_pid,
         const char *IN_buf_val, size_t size_IN_buf_val);
// Required interface reading in function Sensor
// This RI is connected to: ControlSystem
void vm_sensor_reading
        (asn1SccPID dest_pid,
         const char *IN_buf_signalvalue, size_t size_IN_buf_signalvalue);
// End of the required interfaces of function Sensor

void sensor_check_queue(bool* has_pending_msg);

void call_actuator_controlsignal (const char* buf, size_t len);

// This is the list of remote threads/RIs :

void call_controlsystem_configuration (const char* buf, size_t len);

// This is the list of remote threads/RIs :
// actuator_controlSignal.controlSignal
// host_tm.tm

void call_controlsystem_reading (const char* buf, size_t len);

// This is the list of remote threads/RIs :
// actuator_controlSignal.controlSignal
// host_tm.tm

void call_demo_timer_manager_tick (const char* buf, size_t len);

// This is the list of remote threads/RIs :
// sensor_trigger.trigger

void call_host_tm (const char* buf, size_t len);

// This is the list of remote threads/RIs :
// controlsystem_configuration.configuration
// sensor_tc.tc

void call_sensor_tc (const char* buf, size_t len);

// This is the list of remote threads/RIs :
// controlsystem_reading.reading

void call_sensor_trigger (const char* buf, size_t len);

// This is the list of remote threads/RIs :
// controlsystem_reading.reading

}
