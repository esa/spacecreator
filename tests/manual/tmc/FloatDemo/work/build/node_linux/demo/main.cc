/* File generated by kazoo for TASTE - do not edit */
#include <cstdint>


#include <Lock.h>
#include <Queue.h>
#include <Request.h>
#include <Thread.h>
#include <Timer.h>
#include <StartBarrier.h>

#include <system_spec.h>

#include "demo_interface.h"
#include "transport.h"

extern "C"
{
#include "routing.h"
#include <Broker.h>
#include <DriverHelper.h>
}



#include "thread_actuator_controlsignal.h"
#include "thread_controlsystem_configuration.h"
#include "thread_controlsystem_reading.h"
#include "thread_demo_timer_manager_tick.h"
#include "thread_host_tm.h"
#include "thread_sensor_tc.h"
#include "thread_sensor_trigger.h"

extern "C"
{
extern void init_actuator(void);
}
extern "C"
{
extern void init_controlsystem(void);
}
extern "C"
{
extern void init_host(void);
}
extern "C"
{
extern void init_sensor(void);
}
extern "C"
{
extern void init_demo_timer_manager(void);
}


driver_send_function bus_to_driver_send_function[SYSTEM_BUSES_NUMBER];
void* bus_to_driver_private_data[SYSTEM_BUSES_NUMBER];
enum PacketizerCfg bus_to_packetizer_cfg[SYSTEM_BUSES_NUMBER];
deliver_function interface_to_deliver_function[INTERFACE_MAX_ID];

static void initializeDevices()
{
    for(int i = 0; i < SYSTEM_BUSES_NUMBER; ++i)
    {
        bus_to_driver_send_function[i] = nullptr;
        bus_to_driver_private_data[i] = nullptr;
        bus_to_packetizer_cfg[i] = PACKETIZER_DEFAULT;
    }

    // register send functions
    // initialize devices
}

taste::Lock actuator_Mutex;
taste::Lock controlsystem_Mutex;
taste::Lock host_Mutex;
taste::Lock sensor_Mutex;
taste::Lock demo_timer_manager_Mutex;



taste::Queue<ACTUATOR_CONTROLSIGNAL_REQUEST_SIZE> actuator_controlSignal_Global_Queue( 1, "actuator_controlSignal");
taste::Thread actuator_controlSignal_Global_Thread( 1, 8388608);

static void Initialize_Thread_actuator_controlsignal()
{
	actuator_controlSignal_Global_Thread.start(&actuator_controlsignal_job);
}

static void Join_Thread_actuator_controlsignal()
{
    actuator_controlSignal_Global_Thread.join();
}

taste::Queue<CONTROLSYSTEM_CONFIGURATION_REQUEST_SIZE> controlsystem_configuration_Global_Queue( 1, "controlsystem_configuration");
taste::Thread controlsystem_configuration_Global_Thread( 1, 8388608);

static void Initialize_Thread_controlsystem_configuration()
{
	controlsystem_configuration_Global_Thread.start(&controlsystem_configuration_job);
}

static void Join_Thread_controlsystem_configuration()
{
    controlsystem_configuration_Global_Thread.join();
}

taste::Queue<CONTROLSYSTEM_READING_REQUEST_SIZE> controlsystem_reading_Global_Queue( 1, "controlsystem_reading");
taste::Thread controlsystem_reading_Global_Thread( 1, 8388608);

static void Initialize_Thread_controlsystem_reading()
{
	controlsystem_reading_Global_Thread.start(&controlsystem_reading_job);
}

static void Join_Thread_controlsystem_reading()
{
    controlsystem_reading_Global_Thread.join();
}

taste::Queue<DEMO_TIMER_MANAGER_TICK_REQUEST_SIZE> demo_timer_manager_Tick_Global_Queue( 1, "demo_timer_manager_Tick");
taste::Thread demo_timer_manager_Tick_Global_Thread( 1, 8388608);

static void Initialize_Thread_demo_timer_manager_tick()
{
	demo_timer_manager_Tick_Global_Thread.start(&demo_timer_manager_tick_job);
}

static void Join_Thread_demo_timer_manager_tick()
{
    demo_timer_manager_Tick_Global_Thread.join();
}

taste::Queue<HOST_TM_REQUEST_SIZE> host_tm_Global_Queue( 1, "host_tm");
taste::Thread host_tm_Global_Thread( 1, 8388608);

static void Initialize_Thread_host_tm()
{
	host_tm_Global_Thread.start(&host_tm_job);
}

static void Join_Thread_host_tm()
{
    host_tm_Global_Thread.join();
}

taste::Queue<SENSOR_TC_REQUEST_SIZE> sensor_tc_Global_Queue( 1, "sensor_tc");
taste::Thread sensor_tc_Global_Thread( 1, 8388608);

static void Initialize_Thread_sensor_tc()
{
	sensor_tc_Global_Thread.start(&sensor_tc_job);
}

static void Join_Thread_sensor_tc()
{
    sensor_tc_Global_Thread.join();
}

taste::Queue<SENSOR_TRIGGER_REQUEST_SIZE> sensor_trigger_Global_Queue( 1, "sensor_trigger");
taste::Thread sensor_trigger_Global_Thread( 1, 8388608);

static void Initialize_Thread_sensor_trigger()
{
	sensor_trigger_Global_Thread.start(&sensor_trigger_job);
}

static void Join_Thread_sensor_trigger()
{
    sensor_trigger_Global_Thread.join();
}

// the main function
int main(void)
{
    initializeDevices();

    initialize_transport();
    initialize_routing();

    enum SystemBus valid_buses[SYSTEM_BUSES_NUMBER] = { BUS_INVALID_ID };
    Broker_initialize(valid_buses);

    init_actuator();
    init_controlsystem();
    init_host();
    init_sensor();
    init_demo_timer_manager();

    taste::StartBarrier::initialize(7, &taste::Timer::initialize);

    Initialize_Thread_actuator_controlsignal();
    Initialize_Thread_controlsystem_configuration();
    Initialize_Thread_controlsystem_reading();
    Initialize_Thread_demo_timer_manager_tick();
    Initialize_Thread_host_tm();
    Initialize_Thread_sensor_tc();
    Initialize_Thread_sensor_trigger();

    Join_Thread_actuator_controlsignal();
    Join_Thread_controlsystem_configuration();
    Join_Thread_controlsystem_reading();
    Join_Thread_demo_timer_manager_tick();
    Join_Thread_host_tm();
    Join_Thread_sensor_tc();
    Join_Thread_sensor_trigger();
}
