pragma Style_Checks (Off);
--  Code automatically generated by asn1scc tool
pragma Warnings (Off, "no entities of ""Interfaces"" are referenced");
with Interfaces;
pragma Warnings (On, "no entities of ""Interfaces"" are referenced");

pragma Warnings (Off, "use clause for package ""Interfaces"" has no effect");
use Interfaces;
pragma Warnings (On, "use clause for package ""Interfaces"" has no effect");

with adaasn1rtl;


pragma Warnings (Off, "unit ""System"" is not referenced");
with System;
pragma Warnings (On, "unit ""System"" is not referenced");

pragma Warnings (Off, "use clause for package ""adaasn1rtl"" has no effect");
use adaasn1rtl;
pragma Warnings (On, "use clause for package ""adaasn1rtl"" has no effect");

pragma Warnings (Off, "use clause for type");
pragma Warnings (Off, "is already use-visible through package use clause at line");
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
pragma Warnings (On, "use clause for type");
pragma Warnings (On, "is already use-visible through package use clause at line");



package FLOATDEMO_DATAVIEW with SPARK_Mode
is


subtype asn1SccINumber is adaasn1rtl.Asn1Int range -1000 .. 1000;


function asn1SccINumber_Equal(val1, val2 : asn1SccINumber) return Boolean;

ERR_INUMBER:constant Integer := 1; -- (-1000 .. 1000)
function asn1SccINumber_IsConstraintValid(val : asn1SccINumber) return adaasn1rtl.ASN1_RESULT;

function asn1SccINumber_Init  return asn1SccINumber is
(0);
-- asn1SccIPidConfig --------------------------------------------

type asn1SccIPidConfig is record 
    kp : asn1SccINumber;
    ki : asn1SccINumber;
    kd : asn1SccINumber;
end record;


function asn1SccIPidConfig_Equal(val1, val2 : asn1SccIPidConfig) return Boolean;

ERR_IPIDCONFIG:constant Integer := 36; -- 
ERR_IPIDCONFIG_KP_2:constant Integer := 11; -- 
ERR_IPIDCONFIG_KI_2:constant Integer := 21; -- 
ERR_IPIDCONFIG_KD_2:constant Integer := 31; -- 
function asn1SccIPidConfig_IsConstraintValid(val : asn1SccIPidConfig) return adaasn1rtl.ASN1_RESULT;

function asn1SccIPidConfig_Init  return asn1SccIPidConfig is
((kp => 0, ki => 0, kd => 0));
subtype asn1SccNumber is adaasn1rtl.Asn1Real;


function asn1SccNumber_Equal(val1, val2 : asn1SccNumber) return Boolean;

ERR_NUMBER:constant Integer := 41; -- (-1000.0 .. 1000.0)
function asn1SccNumber_IsConstraintValid(val : asn1SccNumber) return adaasn1rtl.ASN1_RESULT;

function asn1SccNumber_Init  return asn1SccNumber is
(0.0000000000000000000E+000);
-- asn1SccPidConfig --------------------------------------------

type asn1SccPidConfig is record 
    kp : asn1SccNumber;
    ki : asn1SccNumber;
    kd : asn1SccNumber;
end record;


function asn1SccPidConfig_Equal(val1, val2 : asn1SccPidConfig) return Boolean;

ERR_PIDCONFIG:constant Integer := 76; -- 
ERR_PIDCONFIG_KP_2:constant Integer := 51; -- 
ERR_PIDCONFIG_KI_2:constant Integer := 61; -- 
ERR_PIDCONFIG_KD_2:constant Integer := 71; -- 
function asn1SccPidConfig_IsConstraintValid(val : asn1SccPidConfig) return adaasn1rtl.ASN1_RESULT;

function asn1SccPidConfig_Init  return asn1SccPidConfig is
((kp => 0.0000000000000000000E+000, ki => 0.0000000000000000000E+000, kd => 0.0000000000000000000E+000));
pragma Warnings (Off, "there are no others");
 
pragma Warnings (On, "there are no others");
private
   --# hide FLOATDEMO_DATAVIEW;


end FLOATDEMO_DATAVIEW;