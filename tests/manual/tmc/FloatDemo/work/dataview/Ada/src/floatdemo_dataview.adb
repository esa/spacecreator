pragma Style_Checks (Off);
--  Code automatically generated by asn1scc tool
pragma Warnings (Off, "redundant with clause in body");
pragma Warnings (On, "redundant with clause in body");

package body FLOATDEMO_DATAVIEW with SPARK_Mode is



pragma Warnings (Off, "condition can only be False if invalid values present");
pragma Warnings (Off, "condition can only be True if invalid values present");


function asn1SccINumber_Equal (val1, val2 :  asn1SccINumber) return Boolean
is

begin
	return val1 = val2;

end asn1SccINumber_Equal;

function asn1SccINumber_IsConstraintValid(val : asn1SccINumber) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ""ret"" has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ""ret"" has no effect");        
begin
    ret.Success := ((-1000 <= val) AND (val <= 1000));
    ret.ErrorCode := (if ret.Success then 0 else ERR_INUMBER);
    return ret;
end asn1SccINumber_IsConstraintValid;





function asn1SccIPidConfig_Equal (val1, val2 :  asn1SccIPidConfig) return Boolean
is
    pragma Warnings (Off, "initialization of ""ret"" has no effect");
    ret : Boolean := True;
    pragma Warnings (On, "initialization of ""ret"" has no effect");

begin
    ret := (val1.kp = val2.kp);

    if ret then
        ret := (val1.ki = val2.ki);

        if ret then
            ret := (val1.kd = val2.kd);

        end if;
    end if;
	return ret;

end asn1SccIPidConfig_Equal;

function asn1SccIPidConfig_IsConstraintValid(val : asn1SccIPidConfig) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ""ret"" has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ""ret"" has no effect");        
begin
    ret := asn1SccINumber_IsConstraintValid(val.kp);
    if ret.Success then
        ret := asn1SccINumber_IsConstraintValid(val.ki);
        if ret.Success then
            ret := asn1SccINumber_IsConstraintValid(val.kd);
        end if;
    end if;
    return ret;
end asn1SccIPidConfig_IsConstraintValid;





function asn1SccNumber_Equal (val1, val2 :  asn1SccNumber) return Boolean
is

begin
	return adaasn1rtl.Asn1Real_Equal(val1, val2);

end asn1SccNumber_Equal;

function asn1SccNumber_IsConstraintValid(val : asn1SccNumber) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ""ret"" has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ""ret"" has no effect");        
begin
    ret.Success := ((-1.0000000000000000000E+003 <= val) AND (val <= 1.0000000000000000000E+003));
    ret.ErrorCode := (if ret.Success then 0 else ERR_NUMBER);
    return ret;
end asn1SccNumber_IsConstraintValid;





function asn1SccPidConfig_Equal (val1, val2 :  asn1SccPidConfig) return Boolean
is
    pragma Warnings (Off, "initialization of ""ret"" has no effect");
    ret : Boolean := True;
    pragma Warnings (On, "initialization of ""ret"" has no effect");

begin
    ret := (adaasn1rtl.Asn1Real_Equal(val1.kp, val2.kp));

    if ret then
        ret := (adaasn1rtl.Asn1Real_Equal(val1.ki, val2.ki));

        if ret then
            ret := (adaasn1rtl.Asn1Real_Equal(val1.kd, val2.kd));

        end if;
    end if;
	return ret;

end asn1SccPidConfig_Equal;

function asn1SccPidConfig_IsConstraintValid(val : asn1SccPidConfig) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ""ret"" has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ""ret"" has no effect");        
begin
    ret := asn1SccNumber_IsConstraintValid(val.kp);
    if ret.Success then
        ret := asn1SccNumber_IsConstraintValid(val.ki);
        if ret.Success then
            ret := asn1SccNumber_IsConstraintValid(val.kd);
        end if;
    end if;
    return ret;
end asn1SccPidConfig_IsConstraintValid;




pragma Warnings (On, "condition can only be False if invalid values present");
pragma Warnings (On, "condition can only be True if invalid values present");

 
end FLOATDEMO_DATAVIEW;