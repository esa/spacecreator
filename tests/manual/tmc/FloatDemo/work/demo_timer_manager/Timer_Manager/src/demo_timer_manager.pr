-- Timer Manager autogenerated code (from TASTE/Kazoo) : DO NOT EDIT
system demo_timer_manager;

   /* CIF TEXT (0, 0), (100, 100) */
   use dataview comment 'dataview-uniq.asn';
   signal tick;
   signal sensor_trigger;

   exported procedure set_sensor_trigger;
      fpar in val T_UInt32;
   referenced;

   exported procedure reset_sensor_trigger;
   referenced;
   /* CIF ENDTEXT */

   channel c
      from env to demo_timer_manager with tick;
      from demo_timer_manager to env with
      sensor_trigger;

   endchannel;

   block demo_timer_manager;
      signalroute r
         from env to demo_timer_manager with tick;
         from demo_timer_manager to env with
            sensor_trigger;


      connect c and r;

      process demo_timer_manager;
         /* CIF TEXT (0, 0), (100, 100) */
         synonym running T_UInt32 = 1;
         synonym stopped T_UInt32 = 0;

         dcl sensor_trigger_state, sensor_trigger_value T_UInt32 := 0;
         procedure set_sensor_trigger;
            fpar in val T_UInt32;
         start;
            task sensor_trigger_state := running, sensor_trigger_value := val / 10;
            return;
         endprocedure;
         procedure reset_sensor_trigger;
         start;
            task sensor_trigger_state := stopped, sensor_trigger_value := 0;
            return;
         endprocedure;
         /* CIF ENDTEXT */

         start;
         nextstate wait;
         state wait;
            input tick;
               decision sensor_trigger_state;
                  (running):
                     task sensor_trigger_value := sensor_trigger_value - 1;
                     decision sensor_trigger_value;
                        (0):
                           task sensor_trigger_state := stopped;
                           output sensor_trigger;
                        else:
                     enddecision;
                  else:
               enddecision;
               nextstate wait;
         endstate;
      endprocess demo_timer_manager;
   endblock;
endsystem;
