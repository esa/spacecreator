pragma Style_Checks (Off);
--  Code automatically generated by asn1scc tool
pragma Warnings (Off, "redundant with clause in body");
pragma Warnings (On, "redundant with clause in body");

package body CDRDEMO_DATAVIEW with SPARK_Mode is



pragma Warnings (Off, "condition can only be False if invalid values present");
pragma Warnings (Off, "condition can only be True if invalid values present");


function asn1SccDummy_Equal (val1, val2 :  asn1SccDummy) return Boolean
is

begin
	return val1 = val2;

end asn1SccDummy_Equal;

function asn1SccDummy_IsConstraintValid(val : asn1SccDummy) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ""ret"" has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ""ret"" has no effect");        
begin
    ret.Success := (val <= 0);
    ret.ErrorCode := (if ret.Success then 0 else ERR_DUMMY);
    return ret;
end asn1SccDummy_IsConstraintValid;





function asn1SccDataItem_Equal (val1, val2 :  asn1SccDataItem) return Boolean
is

begin
	return val1 = val2;

end asn1SccDataItem_Equal;

function asn1SccDataItem_IsConstraintValid(val : asn1SccDataItem) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ""ret"" has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ""ret"" has no effect");        
begin
    ret.Success := (val <= 255);
    ret.ErrorCode := (if ret.Success then 0 else ERR_DATAITEM);
    return ret;
end asn1SccDataItem_IsConstraintValid;





function asn1SccActuatorConfiguration_Equal (val1, val2 :  asn1SccActuatorConfiguration) return Boolean
is
    pragma Warnings (Off, "initialization of ""ret"" has no effect");
    ret : Boolean := True;
    pragma Warnings (On, "initialization of ""ret"" has no effect");

begin
    ret := (val1.threshold1 = val2.threshold1);

    if ret then
        ret := (val1.threshold2 = val2.threshold2);

    end if;
	return ret;

end asn1SccActuatorConfiguration_Equal;

function asn1SccActuatorConfiguration_IsConstraintValid(val : asn1SccActuatorConfiguration) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ""ret"" has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ""ret"" has no effect");        
begin
    ret := asn1SccDataItem_IsConstraintValid(val.threshold1);
    if ret.Success then
        ret := asn1SccDataItem_IsConstraintValid(val.threshold2);
    end if;
    return ret;
end asn1SccActuatorConfiguration_IsConstraintValid;





function asn1SccSystemCommand_Equal (val1, val2 :  asn1SccSystemCommand) return Boolean
is
    pragma Warnings (Off, "initialization of ""ret"" has no effect");
    ret : Boolean := True;
    pragma Warnings (On, "initialization of ""ret"" has no effect");

begin
    ret := val1.kind = val2.kind;
    if ret then
        case val1.kind is
            when goToIdle_PRESENT =>
                ret := (val1.goToIdle = val2.goToIdle);
            when goToOperational_PRESENT =>
                ret := asn1SccActuatorConfiguration_Equal(val1.goToOperational, val2.goToOperational);
            when doReport_PRESENT =>
                ret := (val1.doReport = val2.doReport);
        end case;
    end if;
	return ret;

end asn1SccSystemCommand_Equal;

function asn1SccSystemCommand_IsConstraintValid(val : asn1SccSystemCommand) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ""ret"" has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ""ret"" has no effect");        
begin
    if val.kind = goToIdle_PRESENT then
    	ret := asn1SccDummy_IsConstraintValid(val.goToIdle);
    end if;
    if ret.Success then
        if val.kind = goToOperational_PRESENT then
        	ret := asn1SccActuatorConfiguration_IsConstraintValid(val.goToOperational);
        end if;
        if ret.Success then
            if val.kind = doReport_PRESENT then
            	ret := asn1SccDummy_IsConstraintValid(val.doReport);
            end if;
        end if;
    end if;
    return ret;
end asn1SccSystemCommand_IsConstraintValid;





function asn1SccActuatorIndex_Equal (val1, val2 :  asn1SccActuatorIndex) return Boolean
is

begin
	return val1 = val2;

end asn1SccActuatorIndex_Equal;

function asn1SccActuatorIndex_IsConstraintValid(val : asn1SccActuatorIndex) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ""ret"" has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ""ret"" has no effect");        
begin
    ret.Success := (((val = asn1Sccactuator1)) OR ((val = asn1Sccactuator2)));
    ret.ErrorCode := (if ret.Success then 0 else ERR_ACTUATORINDEX);
    return ret;
end asn1SccActuatorIndex_IsConstraintValid;





function asn1SccActuatorCommand_Equal (val1, val2 :  asn1SccActuatorCommand) return Boolean
is

begin
	return val1 = val2;

end asn1SccActuatorCommand_Equal;

function asn1SccActuatorCommand_IsConstraintValid(val : asn1SccActuatorCommand) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ""ret"" has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ""ret"" has no effect");        
begin
    ret.Success := (((((val = asn1SccactuatorArm)) OR ((val = asn1SccactuatorExecute)))) OR ((val = asn1SccactuatorStandby)));
    ret.ErrorCode := (if ret.Success then 0 else ERR_ACTUATORCOMMAND);
    return ret;
end asn1SccActuatorCommand_IsConstraintValid;





function asn1SccActuatorStatus_Equal (val1, val2 :  asn1SccActuatorStatus) return Boolean
is

begin
	return val1 = val2;

end asn1SccActuatorStatus_Equal;

function asn1SccActuatorStatus_IsConstraintValid(val : asn1SccActuatorStatus) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ""ret"" has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ""ret"" has no effect");        
begin
    ret.Success := (((((val = asn1SccactuatorArmed)) OR ((val = asn1SccactuatorExecuting)))) OR ((val = asn1SccactuatorStandingBy)));
    ret.ErrorCode := (if ret.Success then 0 else ERR_ACTUATORSTATUS);
    return ret;
end asn1SccActuatorStatus_IsConstraintValid;





function asn1SccSystemTelemetry_Equal (val1, val2 :  asn1SccSystemTelemetry) return Boolean
is
    pragma Warnings (Off, "initialization of ""ret"" has no effect");
    ret : Boolean := True;
    pragma Warnings (On, "initialization of ""ret"" has no effect");

begin
    ret := (val1.reading = val2.reading);

    if ret then
        ret := (val1.status1 = val2.status1);

        if ret then
            ret := (val1.status2 = val2.status2);

        end if;
    end if;
	return ret;

end asn1SccSystemTelemetry_Equal;

function asn1SccSystemTelemetry_IsConstraintValid(val : asn1SccSystemTelemetry) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ""ret"" has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ""ret"" has no effect");        
begin
    ret := asn1SccDataItem_IsConstraintValid(val.reading);
    if ret.Success then
        ret := asn1SccActuatorStatus_IsConstraintValid(val.status1);
        if ret.Success then
            ret := asn1SccActuatorStatus_IsConstraintValid(val.status2);
        end if;
    end if;
    return ret;
end asn1SccSystemTelemetry_IsConstraintValid;




pragma Warnings (On, "condition can only be False if invalid values present");
pragma Warnings (On, "condition can only be True if invalid values present");

 
end CDRDEMO_DATAVIEW;