#ifndef GENERATED_ASN1SCC_dataview_uniq_H
#define GENERATED_ASN1SCC_dataview_uniq_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"
#include "asn1crt_encoding.h"


#ifdef  __cplusplus
extern "C" {
#endif


typedef asn1SccUint asn1SccDummy;


flag asn1SccDummy_Equal(const asn1SccDummy* pVal1, const asn1SccDummy* pVal2);

#define ERR_DUMMY		1  /*(0..0)*/
flag asn1SccDummy_IsConstraintValid(const asn1SccDummy* pVal, int* pErrCode);

void asn1SccDummy_Initialize(asn1SccDummy* pVal);

#define ERR_UPER_ENCODE_DUMMY		2  /**/
#define asn1SccDummy_REQUIRED_BYTES_FOR_ENCODING       0 
#define asn1SccDummy_REQUIRED_BITS_FOR_ENCODING        0

flag asn1SccDummy_Encode(const asn1SccDummy* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DUMMY		3  /**/
flag asn1SccDummy_Decode(asn1SccDummy* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_DUMMY		4  /**/
#define asn1SccDummy_REQUIRED_BYTES_FOR_ACN_ENCODING       0 
#define asn1SccDummy_REQUIRED_BITS_FOR_ACN_ENCODING        0

flag asn1SccDummy_ACN_Encode(const asn1SccDummy* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_DUMMY		5  /**/
flag asn1SccDummy_ACN_Decode(asn1SccDummy* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccDataItem;


flag asn1SccDataItem_Equal(const asn1SccDataItem* pVal1, const asn1SccDataItem* pVal2);

#define ERR_DATAITEM		6  /*(0..255)*/
flag asn1SccDataItem_IsConstraintValid(const asn1SccDataItem* pVal, int* pErrCode);

void asn1SccDataItem_Initialize(asn1SccDataItem* pVal);

#define ERR_UPER_ENCODE_DATAITEM		7  /**/
#define asn1SccDataItem_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccDataItem_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccDataItem_Encode(const asn1SccDataItem* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DATAITEM		8  /**/
flag asn1SccDataItem_Decode(asn1SccDataItem* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_DATAITEM		9  /**/
#define asn1SccDataItem_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccDataItem_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag asn1SccDataItem_ACN_Encode(const asn1SccDataItem* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_DATAITEM		10  /**/
flag asn1SccDataItem_ACN_Decode(asn1SccDataItem* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccActuatorConfiguration --------------------------------------------*/
typedef struct {
    asn1SccDataItem threshold1;
    asn1SccDataItem threshold2;

} asn1SccActuatorConfiguration;

flag asn1SccActuatorConfiguration_Equal(const asn1SccActuatorConfiguration* pVal1, const asn1SccActuatorConfiguration* pVal2);

#define ERR_ACTUATORCONFIGURATION		46  /**/
#define ERR_ACTUATORCONFIGURATION_THRESHOLD1_2		31  /**/
#define ERR_ACTUATORCONFIGURATION_THRESHOLD2_2		41  /**/
flag asn1SccActuatorConfiguration_IsConstraintValid(const asn1SccActuatorConfiguration* pVal, int* pErrCode);

void asn1SccActuatorConfiguration_Initialize(asn1SccActuatorConfiguration* pVal);

#define ERR_UPER_ENCODE_ACTUATORCONFIGURATION		47  /**/
#define ERR_UPER_ENCODE_ACTUATORCONFIGURATION_THRESHOLD1_2		32  /**/
#define ERR_UPER_ENCODE_ACTUATORCONFIGURATION_THRESHOLD2_2		42  /**/
#define asn1SccActuatorConfiguration_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccActuatorConfiguration_REQUIRED_BITS_FOR_ENCODING        16

flag asn1SccActuatorConfiguration_Encode(const asn1SccActuatorConfiguration* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ACTUATORCONFIGURATION		48  /**/
#define ERR_UPER_DECODE_ACTUATORCONFIGURATION_THRESHOLD1_2		33  /**/
#define ERR_UPER_DECODE_ACTUATORCONFIGURATION_THRESHOLD2_2		43  /**/
flag asn1SccActuatorConfiguration_Decode(asn1SccActuatorConfiguration* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_ACTUATORCONFIGURATION		49  /**/
#define ERR_ACN_ENCODE_ACTUATORCONFIGURATION_THRESHOLD1_2		34  /**/
#define ERR_ACN_ENCODE_ACTUATORCONFIGURATION_THRESHOLD2_2		44  /**/
#define asn1SccActuatorConfiguration_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define asn1SccActuatorConfiguration_REQUIRED_BITS_FOR_ACN_ENCODING        16

flag asn1SccActuatorConfiguration_ACN_Encode(const asn1SccActuatorConfiguration* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_ACTUATORCONFIGURATION		50  /**/
#define ERR_ACN_DECODE_ACTUATORCONFIGURATION_THRESHOLD1_2		35  /**/
#define ERR_ACN_DECODE_ACTUATORCONFIGURATION_THRESHOLD2_2		45  /**/
flag asn1SccActuatorConfiguration_ACN_Decode(asn1SccActuatorConfiguration* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccSystemCommand --------------------------------------------*/

typedef enum {
    SystemCommand_NONE,
    SystemCommand_goToIdle_PRESENT,
    SystemCommand_goToOperational_PRESENT,
    SystemCommand_doReport_PRESENT 
} asn1SccSystemCommand_selection;

typedef union {
    asn1SccDummy goToIdle;
    asn1SccActuatorConfiguration goToOperational;
    asn1SccDummy doReport;
} asn1SccSystemCommand_unchecked_union; 

typedef struct {
    asn1SccSystemCommand_selection kind;
    
    asn1SccSystemCommand_unchecked_union u; 
} asn1SccSystemCommand;

flag asn1SccSystemCommand_Equal(const asn1SccSystemCommand* pVal1, const asn1SccSystemCommand* pVal2);

#define ERR_SYSTEMCOMMAND		101  /**/
#define ERR_SYSTEMCOMMAND_GOTOIDLE_2		56  /**/
#define ERR_SYSTEMCOMMAND_GOTOOPERATIONAL_2		86  /**/
#define ERR_SYSTEMCOMMAND_DOREPORT_2		96  /**/
flag asn1SccSystemCommand_IsConstraintValid(const asn1SccSystemCommand* pVal, int* pErrCode);

void asn1SccSystemCommand_Initialize(asn1SccSystemCommand* pVal);

#define ERR_UPER_ENCODE_SYSTEMCOMMAND		102  /**/
#define ERR_UPER_ENCODE_SYSTEMCOMMAND_GOTOIDLE_2		57  /**/
#define ERR_UPER_ENCODE_SYSTEMCOMMAND_GOTOOPERATIONAL_2		87  /**/
#define ERR_UPER_ENCODE_SYSTEMCOMMAND_DOREPORT_2		97  /**/
#define asn1SccSystemCommand_REQUIRED_BYTES_FOR_ENCODING       3 
#define asn1SccSystemCommand_REQUIRED_BITS_FOR_ENCODING        18

flag asn1SccSystemCommand_Encode(const asn1SccSystemCommand* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SYSTEMCOMMAND		103  /**/
#define ERR_UPER_DECODE_SYSTEMCOMMAND_GOTOIDLE_2		58  /**/
#define ERR_UPER_DECODE_SYSTEMCOMMAND_GOTOOPERATIONAL_2		88  /**/
#define ERR_UPER_DECODE_SYSTEMCOMMAND_DOREPORT_2		98  /**/
flag asn1SccSystemCommand_Decode(asn1SccSystemCommand* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_SYSTEMCOMMAND		104  /**/
#define ERR_ACN_ENCODE_SYSTEMCOMMAND_GOTOIDLE_2		59  /**/
#define ERR_ACN_ENCODE_SYSTEMCOMMAND_GOTOOPERATIONAL_2		89  /**/
#define ERR_ACN_ENCODE_SYSTEMCOMMAND_DOREPORT_2		99  /**/
#define asn1SccSystemCommand_REQUIRED_BYTES_FOR_ACN_ENCODING       3 
#define asn1SccSystemCommand_REQUIRED_BITS_FOR_ACN_ENCODING        18

flag asn1SccSystemCommand_ACN_Encode(const asn1SccSystemCommand* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_SYSTEMCOMMAND		105  /**/
#define ERR_ACN_DECODE_SYSTEMCOMMAND_GOTOIDLE_2		60  /**/
#define ERR_ACN_DECODE_SYSTEMCOMMAND_GOTOOPERATIONAL_2		90  /**/
#define ERR_ACN_DECODE_SYSTEMCOMMAND_DOREPORT_2		100  /**/
flag asn1SccSystemCommand_ACN_Decode(asn1SccSystemCommand* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    ActuatorIndex_actuator1 = 0,
    ActuatorIndex_actuator2 = 1
} asn1SccActuatorIndex;

// please use the following macros to avoid breaking code.
#define asn1SccActuatorIndex_actuator1 ActuatorIndex_actuator1
#define asn1SccActuatorIndex_actuator2 ActuatorIndex_actuator2

flag asn1SccActuatorIndex_Equal(const asn1SccActuatorIndex* pVal1, const asn1SccActuatorIndex* pVal2);

#define ERR_ACTUATORINDEX		11  /*actuator1 | actuator2*/
flag asn1SccActuatorIndex_IsConstraintValid(const asn1SccActuatorIndex* pVal, int* pErrCode);

void asn1SccActuatorIndex_Initialize(asn1SccActuatorIndex* pVal);

#define ERR_UPER_ENCODE_ACTUATORINDEX		12  /**/
#define asn1SccActuatorIndex_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccActuatorIndex_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccActuatorIndex_Encode(const asn1SccActuatorIndex* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ACTUATORINDEX		13  /**/
flag asn1SccActuatorIndex_Decode(asn1SccActuatorIndex* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_ACTUATORINDEX		14  /**/
#define asn1SccActuatorIndex_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccActuatorIndex_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag asn1SccActuatorIndex_ACN_Encode(const asn1SccActuatorIndex* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_ACTUATORINDEX		15  /**/
flag asn1SccActuatorIndex_ACN_Decode(asn1SccActuatorIndex* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    ActuatorCommand_actuatorArm = 0,
    ActuatorCommand_actuatorExecute = 1,
    ActuatorCommand_actuatorStandby = 2
} asn1SccActuatorCommand;

// please use the following macros to avoid breaking code.
#define asn1SccActuatorCommand_actuatorArm ActuatorCommand_actuatorArm
#define asn1SccActuatorCommand_actuatorExecute ActuatorCommand_actuatorExecute
#define asn1SccActuatorCommand_actuatorStandby ActuatorCommand_actuatorStandby

flag asn1SccActuatorCommand_Equal(const asn1SccActuatorCommand* pVal1, const asn1SccActuatorCommand* pVal2);

#define ERR_ACTUATORCOMMAND		16  /*actuatorArm | actuatorExecute | actuatorStandby*/
flag asn1SccActuatorCommand_IsConstraintValid(const asn1SccActuatorCommand* pVal, int* pErrCode);

void asn1SccActuatorCommand_Initialize(asn1SccActuatorCommand* pVal);

#define ERR_UPER_ENCODE_ACTUATORCOMMAND		17  /**/
#define asn1SccActuatorCommand_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccActuatorCommand_REQUIRED_BITS_FOR_ENCODING        2

flag asn1SccActuatorCommand_Encode(const asn1SccActuatorCommand* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ACTUATORCOMMAND		18  /**/
flag asn1SccActuatorCommand_Decode(asn1SccActuatorCommand* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_ACTUATORCOMMAND		19  /**/
#define asn1SccActuatorCommand_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccActuatorCommand_REQUIRED_BITS_FOR_ACN_ENCODING        2

flag asn1SccActuatorCommand_ACN_Encode(const asn1SccActuatorCommand* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_ACTUATORCOMMAND		20  /**/
flag asn1SccActuatorCommand_ACN_Decode(asn1SccActuatorCommand* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    ActuatorStatus_actuatorArmed = 0,
    ActuatorStatus_actuatorExecuting = 1,
    ActuatorStatus_actuatorStandingBy = 2
} asn1SccActuatorStatus;

// please use the following macros to avoid breaking code.
#define asn1SccActuatorStatus_actuatorArmed ActuatorStatus_actuatorArmed
#define asn1SccActuatorStatus_actuatorExecuting ActuatorStatus_actuatorExecuting
#define asn1SccActuatorStatus_actuatorStandingBy ActuatorStatus_actuatorStandingBy

flag asn1SccActuatorStatus_Equal(const asn1SccActuatorStatus* pVal1, const asn1SccActuatorStatus* pVal2);

#define ERR_ACTUATORSTATUS		21  /*actuatorArmed | actuatorExecuting | actuatorStandingBy*/
flag asn1SccActuatorStatus_IsConstraintValid(const asn1SccActuatorStatus* pVal, int* pErrCode);

void asn1SccActuatorStatus_Initialize(asn1SccActuatorStatus* pVal);

#define ERR_UPER_ENCODE_ACTUATORSTATUS		22  /**/
#define asn1SccActuatorStatus_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccActuatorStatus_REQUIRED_BITS_FOR_ENCODING        2

flag asn1SccActuatorStatus_Encode(const asn1SccActuatorStatus* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ACTUATORSTATUS		23  /**/
flag asn1SccActuatorStatus_Decode(asn1SccActuatorStatus* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_ACTUATORSTATUS		24  /**/
#define asn1SccActuatorStatus_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccActuatorStatus_REQUIRED_BITS_FOR_ACN_ENCODING        2

flag asn1SccActuatorStatus_ACN_Encode(const asn1SccActuatorStatus* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_ACTUATORSTATUS		25  /**/
flag asn1SccActuatorStatus_ACN_Decode(asn1SccActuatorStatus* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccSystemTelemetry --------------------------------------------*/
typedef struct {
    asn1SccDataItem reading;
    asn1SccActuatorStatus status1;
    asn1SccActuatorStatus status2;

} asn1SccSystemTelemetry;

flag asn1SccSystemTelemetry_Equal(const asn1SccSystemTelemetry* pVal1, const asn1SccSystemTelemetry* pVal2);

#define ERR_SYSTEMTELEMETRY		136  /**/
#define ERR_SYSTEMTELEMETRY_READING_2		111  /**/
#define ERR_SYSTEMTELEMETRY_STATUS1_2		121  /**/
#define ERR_SYSTEMTELEMETRY_STATUS2_2		131  /**/
flag asn1SccSystemTelemetry_IsConstraintValid(const asn1SccSystemTelemetry* pVal, int* pErrCode);

void asn1SccSystemTelemetry_Initialize(asn1SccSystemTelemetry* pVal);

#define ERR_UPER_ENCODE_SYSTEMTELEMETRY		137  /**/
#define ERR_UPER_ENCODE_SYSTEMTELEMETRY_READING_2		112  /**/
#define ERR_UPER_ENCODE_SYSTEMTELEMETRY_STATUS1_2		122  /**/
#define ERR_UPER_ENCODE_SYSTEMTELEMETRY_STATUS2_2		132  /**/
#define asn1SccSystemTelemetry_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccSystemTelemetry_REQUIRED_BITS_FOR_ENCODING        12

flag asn1SccSystemTelemetry_Encode(const asn1SccSystemTelemetry* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SYSTEMTELEMETRY		138  /**/
#define ERR_UPER_DECODE_SYSTEMTELEMETRY_READING_2		113  /**/
#define ERR_UPER_DECODE_SYSTEMTELEMETRY_STATUS1_2		123  /**/
#define ERR_UPER_DECODE_SYSTEMTELEMETRY_STATUS2_2		133  /**/
flag asn1SccSystemTelemetry_Decode(asn1SccSystemTelemetry* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_SYSTEMTELEMETRY		139  /**/
#define ERR_ACN_ENCODE_SYSTEMTELEMETRY_READING_2		114  /**/
#define ERR_ACN_ENCODE_SYSTEMTELEMETRY_STATUS1_2		124  /**/
#define ERR_ACN_ENCODE_SYSTEMTELEMETRY_STATUS2_2		134  /**/
#define asn1SccSystemTelemetry_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define asn1SccSystemTelemetry_REQUIRED_BITS_FOR_ACN_ENCODING        12

flag asn1SccSystemTelemetry_ACN_Encode(const asn1SccSystemTelemetry* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_SYSTEMTELEMETRY		140  /**/
#define ERR_ACN_DECODE_SYSTEMTELEMETRY_READING_2		115  /**/
#define ERR_ACN_DECODE_SYSTEMTELEMETRY_STATUS1_2		125  /**/
#define ERR_ACN_DECODE_SYSTEMTELEMETRY_STATUS2_2		135  /**/
flag asn1SccSystemTelemetry_ACN_Decode(asn1SccSystemTelemetry* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int32;


flag asn1SccT_Int32_Equal(const asn1SccT_Int32* pVal1, const asn1SccT_Int32* pVal2);

#define ERR_T_INT32		141  /*(-2147483648 .. 2147483647)*/
flag asn1SccT_Int32_IsConstraintValid(const asn1SccT_Int32* pVal, int* pErrCode);

void asn1SccT_Int32_Initialize(asn1SccT_Int32* pVal);

#define ERR_UPER_ENCODE_T_INT32		142  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_Int32_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT32		143  /**/
flag asn1SccT_Int32_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT32		144  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccT_Int32_ACN_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT32		145  /**/
flag asn1SccT_Int32_ACN_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt32;


flag asn1SccT_UInt32_Equal(const asn1SccT_UInt32* pVal1, const asn1SccT_UInt32* pVal2);

#define ERR_T_UINT32		146  /*(0 .. 4294967295)*/
flag asn1SccT_UInt32_IsConstraintValid(const asn1SccT_UInt32* pVal, int* pErrCode);

void asn1SccT_UInt32_Initialize(asn1SccT_UInt32* pVal);

#define ERR_UPER_ENCODE_T_UINT32		147  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_UInt32_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT32		148  /**/
flag asn1SccT_UInt32_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT32		149  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccT_UInt32_ACN_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT32		150  /**/
flag asn1SccT_UInt32_ACN_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int8;


flag asn1SccT_Int8_Equal(const asn1SccT_Int8* pVal1, const asn1SccT_Int8* pVal2);

#define ERR_T_INT8		151  /*(-128 .. 127)*/
flag asn1SccT_Int8_IsConstraintValid(const asn1SccT_Int8* pVal, int* pErrCode);

void asn1SccT_Int8_Initialize(asn1SccT_Int8* pVal);

#define ERR_UPER_ENCODE_T_INT8		152  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_Int8_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT8		153  /**/
flag asn1SccT_Int8_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT8		154  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag asn1SccT_Int8_ACN_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT8		155  /**/
flag asn1SccT_Int8_ACN_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt8;


flag asn1SccT_UInt8_Equal(const asn1SccT_UInt8* pVal1, const asn1SccT_UInt8* pVal2);

#define ERR_T_UINT8		156  /*(0 .. 255)*/
flag asn1SccT_UInt8_IsConstraintValid(const asn1SccT_UInt8* pVal, int* pErrCode);

void asn1SccT_UInt8_Initialize(asn1SccT_UInt8* pVal);

#define ERR_UPER_ENCODE_T_UINT8		157  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_UInt8_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT8		158  /**/
flag asn1SccT_UInt8_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT8		159  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag asn1SccT_UInt8_ACN_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT8		160  /**/
flag asn1SccT_UInt8_ACN_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag asn1SccT_Boolean;


flag asn1SccT_Boolean_Equal(const asn1SccT_Boolean* pVal1, const asn1SccT_Boolean* pVal2);

#define ERR_T_BOOLEAN		161  /**/
flag asn1SccT_Boolean_IsConstraintValid(const asn1SccT_Boolean* pVal, int* pErrCode);

void asn1SccT_Boolean_Initialize(asn1SccT_Boolean* pVal);

#define ERR_UPER_ENCODE_T_BOOLEAN		162  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccT_Boolean_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_BOOLEAN		163  /**/
flag asn1SccT_Boolean_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_BOOLEAN		164  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag asn1SccT_Boolean_ACN_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_BOOLEAN		165  /**/
flag asn1SccT_Boolean_ACN_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccT_Null_Record --------------------------------------------*/
typedef struct {

} asn1SccT_Null_Record;

flag asn1SccT_Null_Record_Equal(const asn1SccT_Null_Record* pVal1, const asn1SccT_Null_Record* pVal2);

#define ERR_T_NULL_RECORD		166  /**/
flag asn1SccT_Null_Record_IsConstraintValid(const asn1SccT_Null_Record* pVal, int* pErrCode);

void asn1SccT_Null_Record_Initialize(asn1SccT_Null_Record* pVal);

#define asn1SccT_Null_Record_REQUIRED_BYTES_FOR_ENCODING       0 
#define asn1SccT_Null_Record_REQUIRED_BITS_FOR_ENCODING        0

flag asn1SccT_Null_Record_Encode(const asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag asn1SccT_Null_Record_Decode(asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccT_Null_Record_REQUIRED_BYTES_FOR_ACN_ENCODING       0 
#define asn1SccT_Null_Record_REQUIRED_BITS_FOR_ACN_ENCODING        0

flag asn1SccT_Null_Record_ACN_Encode(const asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag asn1SccT_Null_Record_ACN_Decode(asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccPID_Range;


flag asn1SccPID_Range_Equal(const asn1SccPID_Range* pVal1, const asn1SccPID_Range* pVal2);

#define ERR_PID_RANGE		171  /*(0..6)*/
flag asn1SccPID_Range_IsConstraintValid(const asn1SccPID_Range* pVal, int* pErrCode);

void asn1SccPID_Range_Initialize(asn1SccPID_Range* pVal);

#define ERR_UPER_ENCODE_PID_RANGE		172  /**/
#define asn1SccPID_Range_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccPID_Range_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccPID_Range_Encode(const asn1SccPID_Range* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PID_RANGE		173  /**/
flag asn1SccPID_Range_Decode(asn1SccPID_Range* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PID_RANGE		174  /**/
#define asn1SccPID_Range_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccPID_Range_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag asn1SccPID_Range_ACN_Encode(const asn1SccPID_Range* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PID_RANGE		175  /**/
flag asn1SccPID_Range_ACN_Decode(asn1SccPID_Range* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    PID_actuator = 0,
    PID_actuator1 = 1,
    PID_actuator2 = 2,
    PID_egse = 3,
    PID_modemanager = 4,
    PID_sensor = 5,
    PID_env = 6
} asn1SccPID;

// please use the following macros to avoid breaking code.
#define asn1SccPID_actuator PID_actuator
#define asn1SccPID_actuator1 PID_actuator1
#define asn1SccPID_actuator2 PID_actuator2
#define asn1SccPID_egse PID_egse
#define asn1SccPID_modemanager PID_modemanager
#define asn1SccPID_sensor PID_sensor
#define asn1SccPID_env PID_env

flag asn1SccPID_Equal(const asn1SccPID* pVal1, const asn1SccPID* pVal2);

#define ERR_PID		176  /*actuator | actuator1 | actuator2 | egse | modemanager | sensor | env*/
flag asn1SccPID_IsConstraintValid(const asn1SccPID* pVal, int* pErrCode);

void asn1SccPID_Initialize(asn1SccPID* pVal);

#define ERR_UPER_ENCODE_PID		177  /**/
#define asn1SccPID_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccPID_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccPID_Encode(const asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PID		178  /**/
flag asn1SccPID_Decode(asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PID		179  /**/
#define asn1SccPID_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccPID_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag asn1SccPID_ACN_Encode(const asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PID		180  /**/
flag asn1SccPID_ACN_Decode(asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode);

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
