--  TASTE Concurrency View - Generated by Kazoo, do not edit manually
--  Generated by the template: ~/tool-src/kazoo/templates/concurrency_view/aadl_2_threads/system.tmplt

package Actuator1_Actuatortc_Thread
public
   with Deployment;
   with Process_Package;
   with Dataview;

thread Actuator1_Actuatortc
features
   INPORT_Actuatortc : in event data port DataView::ActuatorCommand_Buffer.impl
      { Compute_Execution_Time =>  0 ms ..  0 ms;
        Queue_Size =>  1;
        Compute_Entrypoint_Source_Text => "Demo_TASTE_Interface.Actuator1_Actuatortc_actuatorTc"; };
   OUTPORT_Modemanager_Actuatortm : out event data port DataView::ActuatorStatus_Buffer.impl;
end Actuator1_Actuatortc;

thread implementation Actuator1_Actuatortc.others
properties
   Activate_Entrypoint_Source_Text => "Demo_TASTE_Interface.Actuator1_Actuatortc_Init";
   Dispatch_Protocol                 => Sporadic;
   Period                            => 1 ms;
   Dispatch_Offset                   =>  0 ms;
   Compute_Execution_Time            =>  0 ms ..  0 ms;
   Stack_Size                        =>  1024 Bytes;
   Priority                          =>  1;
end Actuator1_Actuatortc.others;

end Actuator1_Actuatortc_Thread;
package Actuator2_Actuatortc_Thread
public
   with Deployment;
   with Process_Package;
   with Dataview;

thread Actuator2_Actuatortc
features
   INPORT_Actuatortc : in event data port DataView::ActuatorCommand_Buffer.impl
      { Compute_Execution_Time =>  0 ms ..  0 ms;
        Queue_Size =>  1;
        Compute_Entrypoint_Source_Text => "Demo_TASTE_Interface.Actuator2_Actuatortc_actuatorTc"; };
   OUTPORT_Modemanager_Actuatortm : out event data port DataView::ActuatorStatus_Buffer.impl;
end Actuator2_Actuatortc;

thread implementation Actuator2_Actuatortc.others
properties
   Activate_Entrypoint_Source_Text => "Demo_TASTE_Interface.Actuator2_Actuatortc_Init";
   Dispatch_Protocol                 => Sporadic;
   Period                            => 1 ms;
   Dispatch_Offset                   =>  0 ms;
   Compute_Execution_Time            =>  0 ms ..  0 ms;
   Stack_Size                        =>  1024 Bytes;
   Priority                          =>  1;
end Actuator2_Actuatortc.others;

end Actuator2_Actuatortc_Thread;
package Egse_Poll_Thread
public
   with Deployment;
   with Process_Package;
   with Dataview;

thread Egse_Poll
features
   OUTPORT_Modemanager_Systemtc : out event data port DataView::SystemCommand_Buffer.impl;
end Egse_Poll;

thread implementation Egse_Poll.others
properties
   Activate_Entrypoint_Source_Text => "Demo_TASTE_Interface.Egse_Poll_Init";
   Compute_Entrypoint_Source_Text    => "Demo_TASTE_Interface.Egse_Poll_Poll";
   Dispatch_Protocol                 => Periodic;
   Period                            => 10 ms;
   Dispatch_Offset                   =>  0 ms;
   Compute_Execution_Time            =>  0 ms ..  0 ms;
   Stack_Size                        =>  4096 Bytes;
   Priority                          =>  1;
end Egse_Poll.others;

end Egse_Poll_Thread;
package Egse_Systemtm_Thread
public
   with Deployment;
   with Process_Package;
   with Dataview;

thread Egse_Systemtm
features
   INPORT_Systemtm : in event data port DataView::SystemTelemetry_Buffer.impl
      { Compute_Execution_Time =>  0 ms ..  0 ms;
        Queue_Size =>  1;
        Compute_Entrypoint_Source_Text => "Demo_TASTE_Interface.Egse_Systemtm_systemTm"; };
   OUTPORT_Modemanager_Systemtc : out event data port DataView::SystemCommand_Buffer.impl;
end Egse_Systemtm;

thread implementation Egse_Systemtm.others
properties
   Activate_Entrypoint_Source_Text => "Demo_TASTE_Interface.Egse_Systemtm_Init";
   Dispatch_Protocol                 => Sporadic;
   Period                            => 1 ms;
   Dispatch_Offset                   =>  0 ms;
   Compute_Execution_Time            =>  0 ms ..  0 ms;
   Stack_Size                        =>  1024 Bytes;
   Priority                          =>  1;
end Egse_Systemtm.others;

end Egse_Systemtm_Thread;
package Modemanager_Actuatortm1_Thread
public
   with Deployment;
   with Process_Package;
   with Dataview;

thread Modemanager_Actuatortm1
features
   INPORT_Actuatortm1 : in event data port DataView::ActuatorStatus_Buffer.impl
      { Compute_Execution_Time =>  0 ms ..  0 ms;
        Queue_Size =>  1;
        Compute_Entrypoint_Source_Text => "Demo_TASTE_Interface.Modemanager_Actuatortm1_actuatorTm1"; };
   OUTPORT_Actuator1_Actuatortc1 : out event data port DataView::ActuatorCommand_Buffer.impl;
   OUTPORT_Actuator2_Actuatortc2 : out event data port DataView::ActuatorCommand_Buffer.impl;
   OUTPORT_Egse_Systemtm : out event data port DataView::SystemTelemetry_Buffer.impl;
end Modemanager_Actuatortm1;

thread implementation Modemanager_Actuatortm1.others
properties
   Activate_Entrypoint_Source_Text => "Demo_TASTE_Interface.Modemanager_Actuatortm1_Init";
   Dispatch_Protocol                 => Sporadic;
   Period                            => 1 ms;
   Dispatch_Offset                   =>  0 ms;
   Compute_Execution_Time            =>  0 ms ..  0 ms;
   Stack_Size                        =>  1024 Bytes;
   Priority                          =>  1;
end Modemanager_Actuatortm1.others;

end Modemanager_Actuatortm1_Thread;
package Modemanager_Actuatortm2_Thread
public
   with Deployment;
   with Process_Package;
   with Dataview;

thread Modemanager_Actuatortm2
features
   INPORT_Actuatortm2 : in event data port DataView::ActuatorStatus_Buffer.impl
      { Compute_Execution_Time =>  0 ms ..  0 ms;
        Queue_Size =>  1;
        Compute_Entrypoint_Source_Text => "Demo_TASTE_Interface.Modemanager_Actuatortm2_actuatorTm2"; };
   OUTPORT_Actuator1_Actuatortc1 : out event data port DataView::ActuatorCommand_Buffer.impl;
   OUTPORT_Actuator2_Actuatortc2 : out event data port DataView::ActuatorCommand_Buffer.impl;
   OUTPORT_Egse_Systemtm : out event data port DataView::SystemTelemetry_Buffer.impl;
end Modemanager_Actuatortm2;

thread implementation Modemanager_Actuatortm2.others
properties
   Activate_Entrypoint_Source_Text => "Demo_TASTE_Interface.Modemanager_Actuatortm2_Init";
   Dispatch_Protocol                 => Sporadic;
   Period                            => 1 ms;
   Dispatch_Offset                   =>  0 ms;
   Compute_Execution_Time            =>  0 ms ..  0 ms;
   Stack_Size                        =>  1024 Bytes;
   Priority                          =>  1;
end Modemanager_Actuatortm2.others;

end Modemanager_Actuatortm2_Thread;
package Modemanager_Reading_Thread
public
   with Deployment;
   with Process_Package;
   with Dataview;

thread Modemanager_Reading
features
   INPORT_Reading : in event data port DataView::DataItem_Buffer.impl
      { Compute_Execution_Time =>  0 ms ..  0 ms;
        Queue_Size =>  1;
        Compute_Entrypoint_Source_Text => "Demo_TASTE_Interface.Modemanager_Reading_reading"; };
   OUTPORT_Actuator1_Actuatortc1 : out event data port DataView::ActuatorCommand_Buffer.impl;
   OUTPORT_Actuator2_Actuatortc2 : out event data port DataView::ActuatorCommand_Buffer.impl;
   OUTPORT_Egse_Systemtm : out event data port DataView::SystemTelemetry_Buffer.impl;
end Modemanager_Reading;

thread implementation Modemanager_Reading.others
properties
   Activate_Entrypoint_Source_Text => "Demo_TASTE_Interface.Modemanager_Reading_Init";
   Dispatch_Protocol                 => Sporadic;
   Period                            => 1 ms;
   Dispatch_Offset                   =>  0 ms;
   Compute_Execution_Time            =>  0 ms ..  0 ms;
   Stack_Size                        =>  1024 Bytes;
   Priority                          =>  1;
end Modemanager_Reading.others;

end Modemanager_Reading_Thread;
package Modemanager_Systemtc_Thread
public
   with Deployment;
   with Process_Package;
   with Dataview;

thread Modemanager_Systemtc
features
   INPORT_Systemtc : in event data port DataView::SystemCommand_Buffer.impl
      { Compute_Execution_Time =>  0 ms ..  0 ms;
        Queue_Size =>  1;
        Compute_Entrypoint_Source_Text => "Demo_TASTE_Interface.Modemanager_Systemtc_systemTc"; };
   OUTPORT_Actuator1_Actuatortc1 : out event data port DataView::ActuatorCommand_Buffer.impl;
   OUTPORT_Actuator2_Actuatortc2 : out event data port DataView::ActuatorCommand_Buffer.impl;
   OUTPORT_Egse_Systemtm : out event data port DataView::SystemTelemetry_Buffer.impl;
end Modemanager_Systemtc;

thread implementation Modemanager_Systemtc.others
properties
   Activate_Entrypoint_Source_Text => "Demo_TASTE_Interface.Modemanager_Systemtc_Init";
   Dispatch_Protocol                 => Sporadic;
   Period                            => 1 ms;
   Dispatch_Offset                   =>  0 ms;
   Compute_Execution_Time            =>  0 ms ..  0 ms;
   Stack_Size                        =>  1024 Bytes;
   Priority                          =>  1;
end Modemanager_Systemtc.others;

end Modemanager_Systemtc_Thread;
package Sensor_Trigger_Thread
public
   with Deployment;
   with Process_Package;
   with Dataview;

thread Sensor_Trigger
features
   OUTPORT_Modemanager_Reading : out event data port DataView::DataItem_Buffer.impl;
end Sensor_Trigger;

thread implementation Sensor_Trigger.others
properties
   Activate_Entrypoint_Source_Text => "Demo_TASTE_Interface.Sensor_Trigger_Init";
   Compute_Entrypoint_Source_Text    => "Demo_TASTE_Interface.Sensor_Trigger_trigger";
   Dispatch_Protocol                 => Periodic;
   Period                            => 1000 ms;
   Dispatch_Offset                   =>  0 ms;
   Compute_Execution_Time            =>  0 ms ..  0 ms;
   Stack_Size                        =>  1024 Bytes;
   Priority                          =>  1;
end Sensor_Trigger.others;

end Sensor_Trigger_Thread;

package Process_Package
public
   with arinc653;
   with Deployment;
   with DataView;
   with interfaceview::IV;
   with deploymentview::DV;
   with deploymentview::DV::node_linux;
   with Actuator1_Actuatortc_Thread;
   with Actuator2_Actuatortc_Thread;
   with Egse_Poll_Thread;
   with Egse_Systemtm_Thread;
   with Modemanager_Actuatortm1_Thread;
   with Modemanager_Actuatortm2_Thread;
   with Modemanager_Reading_Thread;
   with Modemanager_Systemtc_Thread;
   with Sensor_Trigger_Thread;
   with Ocarina_Processors_X86;


--  Required by AIR to allow inter-partition communications
subprogram do_ports_polling
properties
   Source_Language => C;
   Source_Name     => "user_ports_polling";
   Source_Text     => ("air_polling.c");
end do_ports_polling;
thread Port_Poller
end    Port_Poller;

thread implementation Port_Poller.i
calls
   Mycalls: {
      P_Spg : subprogram do_ports_polling;
   };
properties
   Dispatch_Protocol => Periodic;
   Period            => 100 ms;
   Deadline          => 100 ms;
end Port_Poller.i;


processor node_linux_Board extends ocarina_processors_x86::x86
end node_linux_Board;

processor implementation node_linux_Board.final extends ocarina_processors_x86::x86.generic_linux
end node_linux_Board.final;


process Demo extends DeploymentView::DV::Node_Linux::Demo
end demo;

process implementation Demo.final
subcomponents
   
   actuator1_actuatorTc    : thread actuator1_actuatorTc_Thread::actuator1_actuatorTc.others;
   actuator2_actuatorTc    : thread actuator2_actuatorTc_Thread::actuator2_actuatorTc.others;
   egse_Poll               : thread egse_Poll_Thread::egse_Poll.others;
   egse_systemTm           : thread egse_systemTm_Thread::egse_systemTm.others;
   modemanager_actuatorTm1 : thread modemanager_actuatorTm1_Thread::modemanager_actuatorTm1.others;
   modemanager_actuatorTm2 : thread modemanager_actuatorTm2_Thread::modemanager_actuatorTm2.others;
   modemanager_reading     : thread modemanager_reading_Thread::modemanager_reading.others;
   modemanager_systemTc    : thread modemanager_systemTc_Thread::modemanager_systemTc.others;
   sensor_trigger          : thread sensor_trigger_Thread::sensor_trigger.others;
connections
   port Actuator1_Actuatortc.OUTPORT_Modemanager_Actuatortm   -> Modemanager_Actuatortm1.INPORT_Actuatortm1;
   port Actuator2_Actuatortc.OUTPORT_Modemanager_Actuatortm   -> Modemanager_Actuatortm2.INPORT_Actuatortm2;
   port Egse_Poll.OUTPORT_Modemanager_Systemtc                -> Modemanager_Systemtc.INPORT_Systemtc;
   port Egse_Systemtm.OUTPORT_Modemanager_Systemtc            -> Modemanager_Systemtc.INPORT_Systemtc;
   port Modemanager_Actuatortm1.OUTPORT_Actuator1_Actuatortc1 -> Actuator1_Actuatortc.INPORT_Actuatortc;
   port Modemanager_Actuatortm1.OUTPORT_Actuator2_Actuatortc2 -> Actuator2_Actuatortc.INPORT_Actuatortc;
   port Modemanager_Actuatortm1.OUTPORT_Egse_Systemtm         -> Egse_Systemtm.INPORT_Systemtm;
   port Modemanager_Actuatortm2.OUTPORT_Actuator1_Actuatortc1 -> Actuator1_Actuatortc.INPORT_Actuatortc;
   port Modemanager_Actuatortm2.OUTPORT_Actuator2_Actuatortc2 -> Actuator2_Actuatortc.INPORT_Actuatortc;
   port Modemanager_Actuatortm2.OUTPORT_Egse_Systemtm         -> Egse_Systemtm.INPORT_Systemtm;
   port Modemanager_Reading.OUTPORT_Actuator1_Actuatortc1     -> Actuator1_Actuatortc.INPORT_Actuatortc;
   port Modemanager_Reading.OUTPORT_Actuator2_Actuatortc2     -> Actuator2_Actuatortc.INPORT_Actuatortc;
   port Modemanager_Reading.OUTPORT_Egse_Systemtm             -> Egse_Systemtm.INPORT_Systemtm;
   port Modemanager_Systemtc.OUTPORT_Actuator1_Actuatortc1    -> Actuator1_Actuatortc.INPORT_Actuatortc;
   port Modemanager_Systemtc.OUTPORT_Actuator2_Actuatortc2    -> Actuator2_Actuatortc.INPORT_Actuatortc;
   port Modemanager_Systemtc.OUTPORT_Egse_Systemtm            -> Egse_Systemtm.INPORT_Systemtm;
   port Sensor_Trigger.OUTPORT_Modemanager_Reading            -> Modemanager_Reading.INPORT_Reading;
end Demo.final;

system DeploymentView
end DeploymentView;

system implementation DeploymentView.final
subcomponents
   Demo : process Demo.final;
   Node_Linux_x86_linux : processor Node_Linux_Board.final;
properties
   Actual_Processor_Binding => (reference (Node_Linux_x86_linux)) applies to Demo;
--  patchable area (do not remove this line):
end DeploymentView.final;

end Process_Package;

-- deploymenttview.final
