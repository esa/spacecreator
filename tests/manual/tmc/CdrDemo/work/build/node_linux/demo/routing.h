/* File generated by kazoo for TASTE - do not edit */

#include "dataview-uniq.h"
#include <pthread.h>

// Enable all routes
void initialize_routing(void);



// Routing table of function Actuator1

// env is the last entry in the PID Enumeration containing
// list of all function instances in the system
extern bool actuator1_actuatortm_routing_table[PID_env];

// Set route to the given destination function enabled or disabled
void actuator1_actuatortm_set_route_enabled(asn1SccPID destination, bool is_enabled);
// Set route to the given destination as the only enabled one
void actuator1_actuatortm_set_recipient(asn1SccPID destination);
// Set all routes enabled or disabled
void actuator1_actuatortm_set_all_routes_enabled(bool are_enabled);



// Pid of the sender function containing required interface
// invoking this provided interface
extern __thread asn1SccPID actuator1_actuatortc_sender_pid;

// Get sender pid for this provided interface
asn1SccPID actuator1_actuatortc_get_sender();




// Routing table of function Actuator2

// env is the last entry in the PID Enumeration containing
// list of all function instances in the system
extern bool actuator2_actuatortm_routing_table[PID_env];

// Set route to the given destination function enabled or disabled
void actuator2_actuatortm_set_route_enabled(asn1SccPID destination, bool is_enabled);
// Set route to the given destination as the only enabled one
void actuator2_actuatortm_set_recipient(asn1SccPID destination);
// Set all routes enabled or disabled
void actuator2_actuatortm_set_all_routes_enabled(bool are_enabled);



// Pid of the sender function containing required interface
// invoking this provided interface
extern __thread asn1SccPID actuator2_actuatortc_sender_pid;

// Get sender pid for this provided interface
asn1SccPID actuator2_actuatortc_get_sender();




// Routing table of function EGSE

// env is the last entry in the PID Enumeration containing
// list of all function instances in the system
extern bool egse_systemtc_routing_table[PID_env];

// Set route to the given destination function enabled or disabled
void egse_systemtc_set_route_enabled(asn1SccPID destination, bool is_enabled);
// Set route to the given destination as the only enabled one
void egse_systemtc_set_recipient(asn1SccPID destination);
// Set all routes enabled or disabled
void egse_systemtc_set_all_routes_enabled(bool are_enabled);



// Pid of the sender function containing required interface
// invoking this provided interface
extern __thread asn1SccPID egse_poll_sender_pid;

// Get sender pid for this provided interface
asn1SccPID egse_poll_get_sender();
// Pid of the sender function containing required interface
// invoking this provided interface
extern __thread asn1SccPID egse_systemtm_sender_pid;

// Get sender pid for this provided interface
asn1SccPID egse_systemtm_get_sender();




// Routing table of function ModeManager

// env is the last entry in the PID Enumeration containing
// list of all function instances in the system
extern bool modemanager_actuatortc1_routing_table[PID_env];

// Set route to the given destination function enabled or disabled
void modemanager_actuatortc1_set_route_enabled(asn1SccPID destination, bool is_enabled);
// Set route to the given destination as the only enabled one
void modemanager_actuatortc1_set_recipient(asn1SccPID destination);
// Set all routes enabled or disabled
void modemanager_actuatortc1_set_all_routes_enabled(bool are_enabled);
// env is the last entry in the PID Enumeration containing
// list of all function instances in the system
extern bool modemanager_actuatortc2_routing_table[PID_env];

// Set route to the given destination function enabled or disabled
void modemanager_actuatortc2_set_route_enabled(asn1SccPID destination, bool is_enabled);
// Set route to the given destination as the only enabled one
void modemanager_actuatortc2_set_recipient(asn1SccPID destination);
// Set all routes enabled or disabled
void modemanager_actuatortc2_set_all_routes_enabled(bool are_enabled);
// env is the last entry in the PID Enumeration containing
// list of all function instances in the system
extern bool modemanager_systemtm_routing_table[PID_env];

// Set route to the given destination function enabled or disabled
void modemanager_systemtm_set_route_enabled(asn1SccPID destination, bool is_enabled);
// Set route to the given destination as the only enabled one
void modemanager_systemtm_set_recipient(asn1SccPID destination);
// Set all routes enabled or disabled
void modemanager_systemtm_set_all_routes_enabled(bool are_enabled);



// Pid of the sender function containing required interface
// invoking this provided interface
extern __thread asn1SccPID modemanager_actuatortm1_sender_pid;

// Get sender pid for this provided interface
asn1SccPID modemanager_actuatortm1_get_sender();
// Pid of the sender function containing required interface
// invoking this provided interface
extern __thread asn1SccPID modemanager_actuatortm2_sender_pid;

// Get sender pid for this provided interface
asn1SccPID modemanager_actuatortm2_get_sender();
// Pid of the sender function containing required interface
// invoking this provided interface
extern __thread asn1SccPID modemanager_reading_sender_pid;

// Get sender pid for this provided interface
asn1SccPID modemanager_reading_get_sender();
// Pid of the sender function containing required interface
// invoking this provided interface
extern __thread asn1SccPID modemanager_systemtc_sender_pid;

// Get sender pid for this provided interface
asn1SccPID modemanager_systemtc_get_sender();




// Routing table of function Sensor

// env is the last entry in the PID Enumeration containing
// list of all function instances in the system
extern bool sensor_reading_routing_table[PID_env];

// Set route to the given destination function enabled or disabled
void sensor_reading_set_route_enabled(asn1SccPID destination, bool is_enabled);
// Set route to the given destination as the only enabled one
void sensor_reading_set_recipient(asn1SccPID destination);
// Set all routes enabled or disabled
void sensor_reading_set_all_routes_enabled(bool are_enabled);



// Pid of the sender function containing required interface
// invoking this provided interface
extern __thread asn1SccPID sensor_trigger_sender_pid;

// Get sender pid for this provided interface
asn1SccPID sensor_trigger_get_sender();



