/* File generated by kazoo for TASTE - do not edit */
#include <cstdint>


#include <Lock.h>
#include <Queue.h>
#include <Request.h>
#include <Thread.h>
#include <Timer.h>
#include <StartBarrier.h>

#include <system_spec.h>

#include "demo_interface.h"
#include "transport.h"

extern "C"
{
#include "routing.h"
#include <Broker.h>
#include <DriverHelper.h>
}



#include "thread_actuator1_actuatortc.h"
#include "thread_actuator2_actuatortc.h"
#include "thread_egse_poll.h"
#include "thread_egse_systemtm.h"
#include "thread_modemanager_actuatortm1.h"
#include "thread_modemanager_actuatortm2.h"
#include "thread_modemanager_reading.h"
#include "thread_modemanager_systemtc.h"
#include "thread_sensor_trigger.h"

extern "C"
{
extern void init_egse(void);
}
extern "C"
{
extern void init_actuator1(void);
}
extern "C"
{
extern void init_modemanager(void);
}
extern "C"
{
extern void init_sensor(void);
}
extern "C"
{
extern void init_actuator2(void);
}


driver_send_function bus_to_driver_send_function[SYSTEM_BUSES_NUMBER];
void* bus_to_driver_private_data[SYSTEM_BUSES_NUMBER];
enum PacketizerCfg bus_to_packetizer_cfg[SYSTEM_BUSES_NUMBER];
deliver_function interface_to_deliver_function[INTERFACE_MAX_ID];

static void initializeDevices()
{
    for(int i = 0; i < SYSTEM_BUSES_NUMBER; ++i)
    {
        bus_to_driver_send_function[i] = nullptr;
        bus_to_driver_private_data[i] = nullptr;
        bus_to_packetizer_cfg[i] = PACKETIZER_DEFAULT;
    }

    // register send functions
    // initialize devices
}

taste::Lock egse_Mutex;
taste::Lock actuator1_Mutex;
taste::Lock modemanager_Mutex;
taste::Lock sensor_Mutex;
taste::Lock actuator2_Mutex;



taste::Queue<ACTUATOR1_ACTUATORTC_REQUEST_SIZE> actuator1_actuatorTc_Global_Queue( 1, "actuator1_actuatorTc");
taste::Thread actuator1_actuatorTc_Global_Thread( 1, 8388608);

static void Initialize_Thread_actuator1_actuatortc()
{
	actuator1_actuatorTc_Global_Thread.start(&actuator1_actuatortc_job);
}

static void Join_Thread_actuator1_actuatortc()
{
    actuator1_actuatorTc_Global_Thread.join();
}

taste::Queue<ACTUATOR2_ACTUATORTC_REQUEST_SIZE> actuator2_actuatorTc_Global_Queue( 1, "actuator2_actuatorTc");
taste::Thread actuator2_actuatorTc_Global_Thread( 1, 8388608);

static void Initialize_Thread_actuator2_actuatortc()
{
	actuator2_actuatorTc_Global_Thread.start(&actuator2_actuatortc_job);
}

static void Join_Thread_actuator2_actuatortc()
{
    actuator2_actuatorTc_Global_Thread.join();
}

taste::Queue<EGSE_POLL_REQUEST_SIZE> egse_Poll_Global_Queue( 1, "egse_Poll");
taste::Thread egse_Poll_Global_Thread( 1, 8388608);

static void Initialize_Thread_egse_poll()
{
	egse_Poll_Global_Thread.start(&egse_poll_job);
}

static void Join_Thread_egse_poll()
{
    egse_Poll_Global_Thread.join();
}

taste::Queue<EGSE_SYSTEMTM_REQUEST_SIZE> egse_systemTm_Global_Queue( 1, "egse_systemTm");
taste::Thread egse_systemTm_Global_Thread( 1, 8388608);

static void Initialize_Thread_egse_systemtm()
{
	egse_systemTm_Global_Thread.start(&egse_systemtm_job);
}

static void Join_Thread_egse_systemtm()
{
    egse_systemTm_Global_Thread.join();
}

taste::Queue<MODEMANAGER_ACTUATORTM1_REQUEST_SIZE> modemanager_actuatorTm1_Global_Queue( 1, "modemanager_actuatorTm1");
taste::Thread modemanager_actuatorTm1_Global_Thread( 1, 8388608);

static void Initialize_Thread_modemanager_actuatortm1()
{
	modemanager_actuatorTm1_Global_Thread.start(&modemanager_actuatortm1_job);
}

static void Join_Thread_modemanager_actuatortm1()
{
    modemanager_actuatorTm1_Global_Thread.join();
}

taste::Queue<MODEMANAGER_ACTUATORTM2_REQUEST_SIZE> modemanager_actuatorTm2_Global_Queue( 1, "modemanager_actuatorTm2");
taste::Thread modemanager_actuatorTm2_Global_Thread( 1, 8388608);

static void Initialize_Thread_modemanager_actuatortm2()
{
	modemanager_actuatorTm2_Global_Thread.start(&modemanager_actuatortm2_job);
}

static void Join_Thread_modemanager_actuatortm2()
{
    modemanager_actuatorTm2_Global_Thread.join();
}

taste::Queue<MODEMANAGER_READING_REQUEST_SIZE> modemanager_reading_Global_Queue( 1, "modemanager_reading");
taste::Thread modemanager_reading_Global_Thread( 1, 8388608);

static void Initialize_Thread_modemanager_reading()
{
	modemanager_reading_Global_Thread.start(&modemanager_reading_job);
}

static void Join_Thread_modemanager_reading()
{
    modemanager_reading_Global_Thread.join();
}

taste::Queue<MODEMANAGER_SYSTEMTC_REQUEST_SIZE> modemanager_systemTc_Global_Queue( 1, "modemanager_systemTc");
taste::Thread modemanager_systemTc_Global_Thread( 1, 8388608);

static void Initialize_Thread_modemanager_systemtc()
{
	modemanager_systemTc_Global_Thread.start(&modemanager_systemtc_job);
}

static void Join_Thread_modemanager_systemtc()
{
    modemanager_systemTc_Global_Thread.join();
}

taste::Queue<SENSOR_TRIGGER_REQUEST_SIZE> sensor_trigger_Global_Queue( 1, "sensor_trigger");
taste::Thread sensor_trigger_Global_Thread( 1, 8388608);

static void Initialize_Thread_sensor_trigger()
{
	sensor_trigger_Global_Thread.start(&sensor_trigger_job);
}

static void Join_Thread_sensor_trigger()
{
    sensor_trigger_Global_Thread.join();
}

// the main function
int main(void)
{
    initializeDevices();

    initialize_transport();
    initialize_routing();

    enum SystemBus valid_buses[SYSTEM_BUSES_NUMBER] = { BUS_INVALID_ID };
    Broker_initialize(valid_buses);

    init_egse();
    init_actuator1();
    init_modemanager();
    init_sensor();
    init_actuator2();

    taste::StartBarrier::initialize(9, &taste::Timer::initialize);

    Initialize_Thread_actuator1_actuatortc();
    Initialize_Thread_actuator2_actuatortc();
    Initialize_Thread_egse_poll();
    Initialize_Thread_egse_systemtm();
    Initialize_Thread_modemanager_actuatortm1();
    Initialize_Thread_modemanager_actuatortm2();
    Initialize_Thread_modemanager_reading();
    Initialize_Thread_modemanager_systemtc();
    Initialize_Thread_sensor_trigger();

    Join_Thread_actuator1_actuatortc();
    Join_Thread_actuator2_actuatortc();
    Join_Thread_egse_poll();
    Join_Thread_egse_systemtm();
    Join_Thread_modemanager_actuatortm1();
    Join_Thread_modemanager_actuatortm2();
    Join_Thread_modemanager_reading();
    Join_Thread_modemanager_systemtc();
    Join_Thread_sensor_trigger();
}
