/* CIF PROCESS (250, 150), (150, 75) */
process Modemanager;
    /* CIF TEXT (5, 112), (190, 140) */
    DCL status1 ActuatorStatus;
    DCL status2 ActuatorStatus;
    DCL r DataItem;
    DCL threshold1 DataItem;
    DCL threshold2 DataItem;
    DCL stc SystemCommand;
    DCL stm SystemTelemetry;
    /* CIF ENDTEXT */
    /* CIF START (206, 124), (70, 35) */
    START;
        /* CIF NEXTSTATE (206, 174), (70, 35) */
        NEXTSTATE Idle;
    /* CIF state (912, 132), (76, 35) */
    state Stopping;
        /* CIF input (1085, 187), (150, 35) */
        input actuatorTm2(status2);
            /* CIF join (1142, 242), (35, 35) */
            join stopcheck;
        /* CIF input (673, 187), (150, 35) */
        input actuatorTm1(status1);
            /* CIF label (707, 242), (82, 35) */
            stopcheck:
            /* CIF decision (548, 297), (400, 50) */
            decision status1 = actuatorStandingBy and status2 = actuatorStandingBy;
                /* CIF ANSWER (758, 367), (70, 23) */
                (false):
                    /* CIF NEXTSTATE (758, 410), (70, 35) */
                    NEXTSTATE -;
                /* CIF ANSWER (668, 367), (70, 23) */
                (true):
                    /* CIF NEXTSTATE (668, 410), (70, 35) */
                    NEXTSTATE Idle;
            enddecision;
    endstate;
    /* CIF state (1778, 118), (70, 35) */
    state Starting;
        /* CIF input (1949, 173), (150, 35) */
        input actuatorTm2(status2);
            /* CIF join (2007, 228), (35, 35) */
            join startcheck;
        /* CIF input (1662, 173), (150, 35) */
        input actuatorTm1(status1);
            /* CIF label (1695, 228), (84, 35) */
            startcheck:
            /* CIF decision (1565, 283), (344, 50) */
            decision status1 = actuatorArmed and status2 = actuatorArmed;
                /* CIF ANSWER (1748, 353), (70, 23) */
                (false):
                    /* CIF NEXTSTATE (1748, 396), (70, 35) */
                    NEXTSTATE -;
                /* CIF ANSWER (1658, 353), (70, 23) */
                (true):
                    /* CIF NEXTSTATE (1646, 396), (93, 35) */
                    NEXTSTATE Operational;
            enddecision;
    endstate;
    /* CIF state (2645, 128), (93, 35) */
    state Operational;
        /* CIF input (2473, 183), (102, 35) */
        input systemTc(stc);
            /* CIF decision (2476, 238), (96, 50) */
            decision present(stc);
                /* CIF ANSWER (2364, 308), (74, 23) */
                (goToIdle):
                    /* CIF output (2301, 351), (199, 35) */
                    output actuatorTc1(actuatorStandby);
                    /* CIF output (2301, 406), (199, 35) */
                    output actuatorTc2(actuatorStandby);
                    /* CIF NEXTSTATE (2363, 461), (76, 35) */
                    NEXTSTATE Stopping;
                /* CIF ANSWER (2631, 308), (79, 23) */
                (doReport):
                    /* CIF task (2593, 351), (155, 53) */
                    task stm.status1 := status1,
stm.status2 := status2,
stm.reading := r;
                    /* CIF output (2614, 437), (112, 35) */
                    output systemTm(stm);
                    /* CIF NEXTSTATE (2635, 492), (70, 35) */
                    NEXTSTATE -;
                /* CIF ANSWER (2512, 308), (70, 23) */
                else:
                    /* CIF NEXTSTATE (2512, 351), (70, 35) */
                    NEXTSTATE -;
            enddecision;
        /* CIF input (3042, 189), (81, 35) */
        input reading(r);
            /* CIF decision (3047, 244), (70, 50) */
            decision r;
                /* CIF ANSWER (2809, 314), (97, 23) */
                (< threshold1):
                    /* CIF output (2758, 357), (198, 35) */
                    output actuatorTc1(actuatorExecute);
                /* CIF ANSWER (3033, 314), (70, 23) */
                else:
                    /* CIF output (2968, 357), (199, 35) */
                    output actuatorTc1(actuatorStandby);
            enddecision;
            /* CIF decision (3047, 408), (70, 50) */
            decision r;
                /* CIF ANSWER (2923, 478), (97, 23) */
                (> threshold2):
                    /* CIF output (2872, 521), (198, 35) */
                    output actuatorTc2(actuatorExecute);
                /* CIF ANSWER (3148, 478), (70, 23) */
                else:
                    /* CIF output (3083, 521), (199, 35) */
                    output actuatorTc2(actuatorStandby);
            enddecision;
            /* CIF NEXTSTATE (3047, 572), (70, 35) */
            NEXTSTATE -;
    endstate;
    /* CIF state (309, 120), (70, 35) */
    state Idle;
        /* CIF input (290, 175), (102, 35) */
        input systemTc(stc);
            /* CIF decision (293, 230), (96, 50) */
            decision present(stc);
                /* CIF ANSWER (164, 300), (123, 23) */
                (goToOperational):
                    /* CIF task (80, 343), (291, 35) */
                    task threshold1 := stc.goToOperational.threshold1;
                    /* CIF task (80, 398), (291, 35) */
                    task threshold2 := stc.goToOperational.threshold2;
                    /* CIF output (138, 453), (175, 35) */
                    output actuatorTc1(actuatorArm);
                    /* CIF output (138, 508), (175, 35) */
                    output actuatorTc2(actuatorArm);
                    /* CIF NEXTSTATE (191, 558), (70, 35) */
                    NEXTSTATE Starting;
                /* CIF ANSWER (419, 300), (79, 23) */
                (doReport):
                    /* CIF task (381, 343), (155, 53) */
                    task stm.status1 := status1,
stm.status2 := status2,
stm.reading := r;
                    /* CIF output (403, 426), (112, 35) */
                    output systemTm(stm);
                    /* CIF NEXTSTATE (424, 481), (70, 35) */
                    NEXTSTATE -;
                /* CIF ANSWER (0, 300), (70, 23) */
                else:
                    /* CIF NEXTSTATE (0, 343), (70, 35) */
                    NEXTSTATE -;
            enddecision;
    endstate;
endprocess Modemanager;