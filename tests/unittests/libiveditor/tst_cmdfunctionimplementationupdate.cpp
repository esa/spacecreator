/*
   Copyright (C) 2022 European Space Agency - <maxime.perrotin@esa.int>

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either
   version 2 of the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public License
   along with this program. If not, see <https://www.gnu.org/licenses/lgpl-2.1.html>.
*/

#include "commands/cmdfunctionimplementationupdate.h"
#include "commands/implementationshandler.h"
#include "ivcommonprops.h"
#include "iveditor.h"
#include "ivfunction.h"
#include "ivlibrary.h"
#include "ivpropertytemplateconfig.h"

#include <QDir>
#include <QObject>
#include <QStandardPaths>
#include <QTemporaryDir>
#include <QtTest>

class tst_CmdFunctionImplementationUpdate : public QObject
{
    Q_OBJECT

private Q_SLOTS:
    void initTestCase();
    void init();

    void test_changeImplementationName();
    void test_undoImplementationName();
    void test_changeImplementationLanguage();
    void test_changeDefaultImplementationLanguage();

private:
    std::unique_ptr<QTemporaryDir> m_projectDir;
    std::unique_ptr<ivm::IVFunction> m_function;
    std::unique_ptr<ive::cmd::CmdFunctionImplementationUpdate> m_cmd;
    std::unique_ptr<ive::ImplementationsHandler> m_handler;
};

void tst_CmdFunctionImplementationUpdate::initTestCase()
{
    QStandardPaths::setTestModeEnabled(true);
    ivm::initIVLibrary();
    ive::initIVEditor();
    auto dynPropConfig = ivm::IVPropertyTemplateConfig::instance();
    dynPropConfig->init(shared::interfaceCustomAttributesFilePath());
}

void tst_CmdFunctionImplementationUpdate::init()
{
    m_projectDir = std::make_unique<QTemporaryDir>();
    m_function = std::make_unique<ivm::IVFunction>();
    m_function->setEntityAttribute(ivm::meta::Props::token(ivm::meta::Props::Token::name), "MyFunc");
    EntityAttribute impl("MyCode", "Ada", EntityAttribute::Type::Attribute);
    m_function->insertImplementation(0, impl);

    m_handler = std::make_unique<ive::ImplementationsHandler>(m_projectDir->path(), m_function.get());

    QDir dir;
    dir.mkpath(m_handler->implementationPath("MyCode", "Ada"));
}

void tst_CmdFunctionImplementationUpdate::test_changeImplementationName()
{
    EntityAttribute value("NewCode", "Ada", EntityAttribute::Type::Attribute);
    m_cmd = std::make_unique<ive::cmd::CmdFunctionImplementationUpdate>(m_projectDir->path(), m_function.get(), 0, value);

    QFileInfo oldDir(m_handler->implementationBasePath("MyCode"));
    QCOMPARE(oldDir.exists(), true);
    QCOMPARE(oldDir.isDir(), true);

    m_cmd->redo();

    QCOMPARE(m_function->implementations().at(0).name(), "NewCode");
    QFileInfo newDir(m_handler->implementationBasePath("NewCode"));
    QCOMPARE(newDir.exists(), true);
    QCOMPARE(newDir.isDir(), true);
    oldDir.refresh();
    QCOMPARE(oldDir.exists(), false);
}

void tst_CmdFunctionImplementationUpdate::test_undoImplementationName()
{
    EntityAttribute value("NewCode", "Ada", EntityAttribute::Type::Attribute);
    m_cmd = std::make_unique<ive::cmd::CmdFunctionImplementationUpdate>(m_projectDir->path(), m_function.get(), 0, value);

    QFileInfo oldDir(m_handler->implementationBasePath("MyCode"));
    m_cmd->redo();
    QCOMPARE(m_function->implementations().at(0).name(), "NewCode");
    QFileInfo newDir(m_handler->implementationBasePath("NewCode"));

    m_cmd->undo();

    QCOMPARE(m_function->implementations().at(0).name(), "MyCode");
    oldDir.refresh();
    newDir.refresh();
    QCOMPARE(oldDir.exists(), true);
    QCOMPARE(oldDir.isDir(), true);
    QCOMPARE(newDir.exists(), false);
}

void tst_CmdFunctionImplementationUpdate::test_changeImplementationLanguage()
{
    EntityAttribute value("MyCode", "SDL", EntityAttribute::Type::Attribute);
    m_cmd = std::make_unique<ive::cmd::CmdFunctionImplementationUpdate>(m_projectDir->path(), m_function.get(), 0, value);

    QFileInfo oldDir(m_handler->implementationPath("MyCode", "Ada"));
    QCOMPARE(oldDir.exists(), true);
    QCOMPARE(oldDir.isDir(), true);

    m_cmd->redo();

    QCOMPARE(m_function->implementations().at(0).value(), "SDL");
    QFileInfo newDir(m_handler->implementationPath("MyCode", "SDL"));
    QCOMPARE(newDir.exists(), false); // New code needs to be generated by scripts
    oldDir.refresh();
    QCOMPARE(oldDir.exists(), true); // No implementation is deleted
}

void tst_CmdFunctionImplementationUpdate::test_changeDefaultImplementationLanguage()
{
    m_function->setDefaultImplementation("MyCode");
    const QString oldPath = m_handler->implementationPath("MyCode", "Ada");
    QDir dir;
    dir.mkpath(oldPath);
    QFile::link(m_handler->functionBasePath()+"/Ada", dir.absolutePath());
    EntityAttribute value("NewCode", "SDL", EntityAttribute::Type::Attribute);
    m_cmd = std::make_unique<ive::cmd::CmdFunctionImplementationUpdate>(m_projectDir->path(), m_function.get(), 0, value);

    QFileInfo oldDir(m_handler->implementationBasePath("MyCode"));
    QCOMPARE(oldDir.exists(), true);
    QCOMPARE(oldDir.isDir(), true);
    // The default implementation link is "Ada" and points to "..../impl/MyCode/Ada"
    QFileInfo oldLinkInfo(m_handler->functionBasePath() + "/Ada");
    QCOMPARE(oldLinkInfo.exists(), true);
    QCOMPARE(oldLinkInfo.isSymLink(), true);
    QCOMPARE(oldLinkInfo.symLinkTarget(), oldPath);

    m_cmd->redo();

    QCOMPARE(m_function->implementations().at(0).name(), "NewCode");
    QFileInfo newDir(m_handler->implementationBasePath("NewCode"));
    QCOMPARE(newDir.exists(), true);
    QCOMPARE(newDir.isDir(), true);
    oldDir.refresh();
    QCOMPARE(oldDir.exists(), false);

    // The link of the default implementation is now called "SDL" and points to ".../impl/NewCode/SDL"
    // Old link is removed
    oldLinkInfo.refresh();
    QCOMPARE(oldLinkInfo.exists(), false);
    QFileInfo newLinkInfo(m_handler->functionBasePath() + "/SDL");
    QCOMPARE(newLinkInfo.exists(), true);
    QCOMPARE(newLinkInfo.isSymLink(), true);
    QCOMPARE(newLinkInfo.symLinkTarget(), m_handler->implementationPath("NewCode", "SDL"));
}

QTEST_MAIN(tst_CmdFunctionImplementationUpdate)

#include "tst_cmdfunctionimplementationupdate.moc"
