-- DO NOT EDIT THIS FILE, IT WILL BE OVERWRITTEN DURING THE BUILD
-- Generated by TASTE (kazoo/templates/glue/language_wrappers/ri_adb/function.tmplt)
with Simulator;            use Simulator;
with Simulation_Dataview;  use Simulation_Dataview;
with System_Dataview;      use System_Dataview;
package body Demo_Timer_Manager_RI is

   procedure Pinger_Pingertimer (Dest_PID : asn1sccPID := asn1sccEnv) is
      --  Generate an event (handled by the simulator)
      Event_Out_Pinger : asn1SccObservable_Event (Kind => Output_Event_PRESENT);
   begin
      if Dest_PID = asn1sccEnv or Dest_PID = asn1sccPinger then
         Event_Out_Pinger.Output_Event :=
           (Source => asn1sccDemo_Timer_Manager,
            Dest   => asn1sccPinger,
            Event  => (Kind => Demo_Timer_Manager_PRESENT,
                       Demo_Timer_Manager =>
                         (Kind   => Msg_Out_PRESENT,
                          Msg_Out =>
                             (Kind => Pinger_Pingertimer_PRESENT,
                           Pinger_Pingertimer => (null record)))));
         Push_Event (Event_Out_Pinger);
      end if;
   
   end Pinger_Pingertimer;
   
   
   
   procedure Pinger_Pingertimer_Reset (Dest_PID : asn1sccPID := asn1sccEnv) is
      --  Generate an event (handled by the simulator)
      Event_Out : asn1SccObservable_Event (Kind => Output_Event_PRESENT);
   begin
         Event_Out.Output_Event :=
           (Source => asn1sccDemo_Timer_Manager,
            Dest   => asn1sccEnv,
            Event  => (Kind => Demo_Timer_Manager_PRESENT,
                       Demo_Timer_Manager =>
                         (Kind   => Msg_Out_PRESENT,
                          Msg_Out =>
                             (Kind => Pinger_Pingertimer_Reset_PRESENT,
                           Pinger_Pingertimer_Reset => (null record)))));
         Push_Event (Event_Out);
   
   end Pinger_Pingertimer_Reset;
   
   
   
   procedure Pinger_Pingertimer_Set
      (Val : in out asn1SccT_Uint32;
       Dest_PID : asn1sccPID := asn1sccEnv) is
      --  Generate an event (handled by the simulator)
      Event_Out : asn1SccObservable_Event (Kind => Output_Event_PRESENT);
   begin
         Event_Out.Output_Event :=
           (Source => asn1sccDemo_Timer_Manager,
            Dest   => asn1sccEnv,
            Event  => (Kind => Demo_Timer_Manager_PRESENT,
                       Demo_Timer_Manager =>
                         (Kind   => Msg_Out_PRESENT,
                          Msg_Out =>
                             (Kind => Pinger_Pingertimer_Set_PRESENT,
                        Pinger_Pingertimer_Set =>
                              (Val => Val)))));
         Push_Event (Event_Out);
   
   end Pinger_Pingertimer_Set;
   
   
   
   procedure Ponger_Pongertimer (Dest_PID : asn1sccPID := asn1sccEnv) is
      --  Generate an event (handled by the simulator)
      Event_Out_Ponger : asn1SccObservable_Event (Kind => Output_Event_PRESENT);
   begin
      if Dest_PID = asn1sccEnv or Dest_PID = asn1sccPonger then
         Event_Out_Ponger.Output_Event :=
           (Source => asn1sccDemo_Timer_Manager,
            Dest   => asn1sccPonger,
            Event  => (Kind => Demo_Timer_Manager_PRESENT,
                       Demo_Timer_Manager =>
                         (Kind   => Msg_Out_PRESENT,
                          Msg_Out =>
                             (Kind => Ponger_Pongertimer_PRESENT,
                           Ponger_Pongertimer => (null record)))));
         Push_Event (Event_Out_Ponger);
      end if;
   
   end Ponger_Pongertimer;
   
   
   
   procedure Ponger_Pongertimer_Reset (Dest_PID : asn1sccPID := asn1sccEnv) is
      --  Generate an event (handled by the simulator)
      Event_Out : asn1SccObservable_Event (Kind => Output_Event_PRESENT);
   begin
         Event_Out.Output_Event :=
           (Source => asn1sccDemo_Timer_Manager,
            Dest   => asn1sccEnv,
            Event  => (Kind => Demo_Timer_Manager_PRESENT,
                       Demo_Timer_Manager =>
                         (Kind   => Msg_Out_PRESENT,
                          Msg_Out =>
                             (Kind => Ponger_Pongertimer_Reset_PRESENT,
                           Ponger_Pongertimer_Reset => (null record)))));
         Push_Event (Event_Out);
   
   end Ponger_Pongertimer_Reset;
   
   
   
   procedure Ponger_Pongertimer_Set
      (Val : in out asn1SccT_Uint32;
       Dest_PID : asn1sccPID := asn1sccEnv) is
      --  Generate an event (handled by the simulator)
      Event_Out : asn1SccObservable_Event (Kind => Output_Event_PRESENT);
   begin
         Event_Out.Output_Event :=
           (Source => asn1sccDemo_Timer_Manager,
            Dest   => asn1sccEnv,
            Event  => (Kind => Demo_Timer_Manager_PRESENT,
                       Demo_Timer_Manager =>
                         (Kind   => Msg_Out_PRESENT,
                          Msg_Out =>
                             (Kind => Ponger_Pongertimer_Set_PRESENT,
                        Ponger_Pongertimer_Set =>
                              (Val => Val)))));
         Push_Event (Event_Out);
   
   end Ponger_Pongertimer_Set;

end Demo_Timer_Manager_RI;
