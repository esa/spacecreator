-- Timer Manager autogenerated code (from TASTE/Kazoo) : DO NOT EDIT
system demo_timer_manager;

   /* CIF TEXT (0, 0), (100, 100) */
   use dataview comment 'dataview-uniq.asn';
   signal tick;
   signal pinger_pingertimer;

   exported procedure set_pinger_pingertimer;
      fpar in val T_UInt32;
   referenced;

   exported procedure reset_pinger_pingertimer;
   referenced;
   signal ponger_pongertimer;

   exported procedure set_ponger_pongertimer;
      fpar in val T_UInt32;
   referenced;

   exported procedure reset_ponger_pongertimer;
   referenced;
   /* CIF ENDTEXT */

   channel c
      from env to demo_timer_manager with tick;
      from demo_timer_manager to env with
      pinger_pingertimer, ponger_pongertimer;

   endchannel;

   block demo_timer_manager;
      signalroute r
         from env to demo_timer_manager with tick;
         from demo_timer_manager to env with
            pinger_pingertimer, ponger_pongertimer;


      connect c and r;

      process demo_timer_manager;
         /* CIF TEXT (0, 0), (100, 100) */
         synonym running T_UInt32 = 1;
         synonym stopped T_UInt32 = 0;

         dcl pinger_pingertimer_state, pinger_pingertimer_value T_UInt32 := 0;
         procedure set_pinger_pingertimer;
            fpar in val T_UInt32;
         start;
            task pinger_pingertimer_state := running, pinger_pingertimer_value := val / 10;
            return;
         endprocedure;
         procedure reset_pinger_pingertimer;
         start;
            task pinger_pingertimer_state := stopped, pinger_pingertimer_value := 0;
            return;
         endprocedure;
         dcl ponger_pongertimer_state, ponger_pongertimer_value T_UInt32 := 0;
         procedure set_ponger_pongertimer;
            fpar in val T_UInt32;
         start;
            task ponger_pongertimer_state := running, ponger_pongertimer_value := val / 10;
            return;
         endprocedure;
         procedure reset_ponger_pongertimer;
         start;
            task ponger_pongertimer_state := stopped, ponger_pongertimer_value := 0;
            return;
         endprocedure;
         /* CIF ENDTEXT */

         start;
         nextstate wait;
         state wait;
            input tick;
               decision pinger_pingertimer_state;
                  (running):
                     task pinger_pingertimer_value := pinger_pingertimer_value - 1;
                     decision pinger_pingertimer_value;
                        (0):
                           task pinger_pingertimer_state := stopped;
                           output pinger_pingertimer;
                        else:
                     enddecision;
                  else:
               enddecision;
               decision ponger_pongertimer_state;
                  (running):
                     task ponger_pongertimer_value := ponger_pongertimer_value - 1;
                     decision ponger_pongertimer_value;
                        (0):
                           task ponger_pongertimer_state := stopped;
                           output ponger_pongertimer;
                        else:
                     enddecision;
                  else:
               enddecision;
               nextstate wait;
         endstate;
      endprocess demo_timer_manager;
   endblock;
endsystem;
