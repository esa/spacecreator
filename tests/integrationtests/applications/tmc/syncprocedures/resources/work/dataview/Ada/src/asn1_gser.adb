--  This file was generated by TASTE: DO NOT EDIT

with Ada.Strings,
     Ada.Strings.Fixed,
     Ada.Strings.Unbounded,
     Ada.Characters.Handling;

use Ada.Strings,
    Ada.Strings.Fixed,
    Ada.Strings.Unbounded,
    Ada.Characters.Handling;

package body asn1_gser is

   
      function Image (Elm : adaasn1rtl.Asn1Boolean) return String is (Elm'Img);



      function Image (Elm : Pinger_Datamodel.asn1SccPinger_States) return String is
         (Delete (To_Lower (Elm'Img), From => 1, Through => 7));  -- remove "asn1scc" prefix


      function Image (Elm : Pinger_Datamodel.asn1SccPinger_Context) return String is
      begin
         return "{"
                & "state " & Image (Elm.state)
                & ", "
                & "init_done " & Image (Elm.init_done)
                & ", "
                & "pongarg " & Image (Elm.pongarg)
                & "}";
      end Image;


      function Image (Elm : Ponger_Datamodel.asn1SccPonger_States) return String is
         (Delete (To_Lower (Elm'Img), From => 1, Through => 7));  -- remove "asn1scc" prefix


      function Image (Elm : Ponger_Datamodel.asn1SccPonger_Context) return String is
      begin
         return "{"
                & "state " & Image (Elm.state)
                & ", "
                & "init_done " & Image (Elm.init_done)
                & ", "
                & "pingarg " & Image (Elm.pingarg)
                & "}";
      end Image;


      function Image (Elm : Simulation_DataView.asn1SccPID) return String is
         (Delete (To_Lower (Elm'Img), From => 1, Through => 7));  -- remove "asn1scc" prefix



      function Image (Elm : Simulation_DataView.asn1SccClock_Event_msg_out) return String is
      begin
         return "{"
                & (case Elm.Kind is
                     when tick_PRESENT => "tick: " & Image (Elm.tick))
                & "}";
      end Image;


      function Image (Elm : Simulation_DataView.asn1SccClock_Event) return String is
      begin
         return "{"
                & (case Elm.Kind is
                     when msg_out_PRESENT => "msg_out: " & Image (Elm.msg_out))
                & "}";
      end Image;



      function Image (Elm : Simulation_DataView.asn1SccPinger_Event_msg_in_pong) return String is
      begin
         return "{"
                & "pongarg " & Image (Elm.pongarg)
                & "}";
      end Image;



      function Image (Elm : Simulation_DataView.asn1SccPinger_Event_msg_in) return String is
      begin
         return "{"
                & (case Elm.Kind is
                     when input_none_PRESENT => "input_none: " & Image (Elm.input_none),
                     when pong_PRESENT => "pong: " & Image (Elm.pong),
                     when tick_PRESENT => "tick: " & Image (Elm.tick))
                & "}";
      end Image;


      function Image (Elm : Simulation_DataView.asn1SccPinger_Event_msg_out_ping) return String is
      begin
         return "{"
                & "pingarg " & Image (Elm.pingarg)
                & "}";
      end Image;


      function Image (Elm : Simulation_DataView.asn1SccPinger_Event_msg_out) return String is
      begin
         return "{"
                & (case Elm.Kind is
                     when ping_PRESENT => "ping: " & Image (Elm.ping))
                & "}";
      end Image;


      function Image (Elm : Simulation_DataView.asn1SccPinger_Event) return String is
      begin
         return "{"
                & (case Elm.Kind is
                     when msg_in_PRESENT => "msg_in: " & Image (Elm.msg_in),
                     when msg_out_PRESENT => "msg_out: " & Image (Elm.msg_out))
                & "}";
      end Image;



      function Image (Elm : Simulation_DataView.asn1SccPonger_Event_msg_in_ping) return String is
      begin
         return "{"
                & "pingarg " & Image (Elm.pingarg)
                & "}";
      end Image;


      function Image (Elm : Simulation_DataView.asn1SccPonger_Event_msg_in) return String is
      begin
         return "{"
                & (case Elm.Kind is
                     when input_none_PRESENT => "input_none: " & Image (Elm.input_none),
                     when ping_PRESENT => "ping: " & Image (Elm.ping))
                & "}";
      end Image;


      function Image (Elm : Simulation_DataView.asn1SccPonger_Event_msg_out_pong) return String is
      begin
         return "{"
                & "pongarg " & Image (Elm.pongarg)
                & "}";
      end Image;


      function Image (Elm : Simulation_DataView.asn1SccPonger_Event_msg_out) return String is
      begin
         return "{"
                & (case Elm.Kind is
                     when pong_PRESENT => "pong: " & Image (Elm.pong))
                & "}";
      end Image;


      function Image (Elm : Simulation_DataView.asn1SccPonger_Event) return String is
      begin
         return "{"
                & (case Elm.Kind is
                     when msg_in_PRESENT => "msg_in: " & Image (Elm.msg_in),
                     when msg_out_PRESENT => "msg_out: " & Image (Elm.msg_out))
                & "}";
      end Image;


      function Image (Elm : Simulation_DataView.asn1SccObserver_State_Kind) return String is
         (Delete (To_Lower (Elm'Img), From => 1, Through => 7));  -- remove "asn1scc" prefix


      function Image (Elm : Simulation_DataView.asn1SccFunction_Event) return String is
      begin
         return "{"
                & (case Elm.Kind is
                     when clock_PRESENT => "clock: " & Image (Elm.clock),
                     when pinger_PRESENT => "pinger: " & Image (Elm.pinger),
                     when ponger_PRESENT => "ponger: " & Image (Elm.ponger))
                & "}";
      end Image;


      function Image (Elm : Simulation_DataView.asn1SccNamed_Function_Event_id) return String is (String'(Elm));


      function Image (Elm : Simulation_DataView.asn1SccNamed_Function_Event) return String is
      begin
         return "{"
                & "id " & Image (Elm.id)
                & ", "
                & "event " & Image (Elm.event)
                & "}";
      end Image;


      function Image (Elm : Simulation_DataView.asn1SccInterface_Event) return String is
      begin
         return "{"
                & "source " & Image (Elm.source)
                & ", "
                & "dest " & Image (Elm.dest)
                & ", "
                & "event " & Image (Elm.event)
                & "}";
      end Image;




      function Image (Elm : Simulation_DataView.asn1SccObservable_Event) return String is
      begin
         return "{"
                & (case Elm.Kind is
                     when no_event_PRESENT => "no_event: " & Image (Elm.no_event),
                     when system_startup_PRESENT => "system_startup: " & Image (Elm.system_startup),
                     when input_event_PRESENT => "input_event: " & Image (Elm.input_event),
                     when output_event_PRESENT => "output_event: " & Image (Elm.output_event),
                     when unhandled_input_PRESENT => "unhandled_input: " & Image (Elm.unhandled_input))
                & "}";
      end Image;


      function Image (Elm : Simulation_DataView.asn1SccEvents_Ty) return String is
         function Image_Rec (Elm : Simulation_DataView.asn1SccEvents_Ty) return String is
            (if Elm.Length > 0 then
               (Image (Elm.Data (1))
                & (if Elm.Length > 1 then ", "
                   & Image_Rec (Simulation_DataView.asn1SccEvents_Ty'(Length => Elm.Length - 1,
                                           Data   => Elm.Data (2 .. Elm.Length) &
                                                     Elm.Data (1 .. Elm.Data'Length - Elm.Length + 1)))
                   else ""))
             else "");
      begin
         return "{ " & Image_Rec (Elm) & " }";
      end Image;


      function Image (Elm : Simulation_DataView.asn1SccSystem_State) return String is
      begin
         return "{"
                & "pinger_queue " & Image (Elm.pinger_queue)
                & ", "
                & "ponger_queue " & Image (Elm.ponger_queue)
                & ", "
                & "pinger " & Image (Elm.pinger)
                & ", "
                & "ponger " & Image (Elm.ponger)
                & "}";
      end Image;

end asn1_gser;
