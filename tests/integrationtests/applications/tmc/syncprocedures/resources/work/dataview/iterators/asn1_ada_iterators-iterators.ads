--  This file was generated by TASTE: DO NOT EDIT

with Ada.Iterator_Interfaces,
     Ada.Finalization,
     Interfaces,
     Ada.Strings,
     Ada.Strings.Fixed,
     adaasn1rtl,
     ASN1_Ada_Iterators,
     ASN1_Iterators.Generic_Integer,
     ASN1_Iterators.Generic_Real,
     ASN1_Iterators.Generic_Unsigned_Integer,
     ASN1_Iterators.Generic_Enumerated,
     ASN1_Iterators.Generic_Fixed_Octet_String,
     ASN1_Iterators.Generic_SeqOf;

pragma Unreferenced (ASN1_Ada_Iterators);

use Ada.Finalization,
    Ada.Strings,
    Ada.Strings.Fixed,
    Interfaces,
    adaasn1rtl,
    ASN1_Iterators;

package ASN1_Ada_Iterators.Iterators is

   package MyInteger_Pkg is
      function Is_Constraint_Valid (Val : asn1SccMyInteger) return Boolean is
         (asn1SccMyInteger_IsConstraintValid (Val).Success);
      package Inner is
         new Generic_Unsigned_Integer (Sort => asn1SccMyInteger,
                                       Init => asn1SccMyInteger_Init,
                                       Is_Constraint_Valid =>
                                           Is_Constraint_Valid);
      package It renames Inner.It;
      function To_ASN1 (From : asn1SccMyInteger) return asn1SccMyInteger is (From);
      subtype Instance is Inner.Instance;
      function Image (Elm : asn1SccMyInteger) return String is
         (Ada.Strings.Fixed.Trim (Elm'Img, Both));
   end MyInteger_Pkg;
   package T_Int32_Pkg is
      function Is_Constraint_Valid (Val : asn1SccT_Int32) return Boolean is
         (asn1SccT_Int32_IsConstraintValid (Val).Success);
      package Inner is new Generic_Integer (Sort => asn1SccT_Int32,
                                            Init => asn1SccT_Int32_Init,
                                            Is_Constraint_Valid =>
                                               Is_Constraint_Valid);
      package It renames Inner.It;
      function To_ASN1 (From : asn1SccT_Int32) return asn1SccT_Int32 is (From);
      subtype Instance is Inner.Instance;
      function Image (Elm : asn1SccT_Int32) return String is
         (Ada.Strings.Fixed.Trim (Elm'Img, Both));
   end T_Int32_Pkg;
   package T_UInt32_Pkg is
      function Is_Constraint_Valid (Val : asn1SccT_UInt32) return Boolean is
         (asn1SccT_UInt32_IsConstraintValid (Val).Success);
      package Inner is
         new Generic_Unsigned_Integer (Sort => asn1SccT_UInt32,
                                       Init => asn1SccT_UInt32_Init,
                                       Is_Constraint_Valid =>
                                           Is_Constraint_Valid);
      package It renames Inner.It;
      function To_ASN1 (From : asn1SccT_UInt32) return asn1SccT_UInt32 is (From);
      subtype Instance is Inner.Instance;
      function Image (Elm : asn1SccT_UInt32) return String is
         (Ada.Strings.Fixed.Trim (Elm'Img, Both));
   end T_UInt32_Pkg;
   package T_Int8_Pkg is
      function Is_Constraint_Valid (Val : asn1SccT_Int8) return Boolean is
         (asn1SccT_Int8_IsConstraintValid (Val).Success);
      package Inner is new Generic_Integer (Sort => asn1SccT_Int8,
                                            Init => asn1SccT_Int8_Init,
                                            Is_Constraint_Valid =>
                                               Is_Constraint_Valid);
      package It renames Inner.It;
      function To_ASN1 (From : asn1SccT_Int8) return asn1SccT_Int8 is (From);
      subtype Instance is Inner.Instance;
      function Image (Elm : asn1SccT_Int8) return String is
         (Ada.Strings.Fixed.Trim (Elm'Img, Both));
   end T_Int8_Pkg;
   package T_UInt8_Pkg is
      function Is_Constraint_Valid (Val : asn1SccT_UInt8) return Boolean is
         (asn1SccT_UInt8_IsConstraintValid (Val).Success);
      package Inner is
         new Generic_Unsigned_Integer (Sort => asn1SccT_UInt8,
                                       Init => asn1SccT_UInt8_Init,
                                       Is_Constraint_Valid =>
                                           Is_Constraint_Valid);
      package It renames Inner.It;
      function To_ASN1 (From : asn1SccT_UInt8) return asn1SccT_UInt8 is (From);
      subtype Instance is Inner.Instance;
      function Image (Elm : asn1SccT_UInt8) return String is
         (Ada.Strings.Fixed.Trim (Elm'Img, Both));
   end T_UInt8_Pkg;
   package T_Boolean_Pkg is
      package Inner is new Generic_Enumerated (Sort => asn1SccT_Boolean);
      package It renames Inner.It;
      function To_ASN1 (From : asn1SccT_Boolean) return asn1SccT_Boolean is (From);
      subtype Instance is Inner.Instance;
      function Image (Elm : asn1SccT_Boolean) return String;
   end T_Boolean_Pkg;
   package T_Null_Record_Pkg is
      type Iterator;

      type ASN1_Container is new Controlled with record
         Single_Value : Boolean := True;
      end record
         with Default_Iterator  => Iterate,
              Iterator_Element  => asn1SccT_Null_Record,
              Constant_Indexing => Element;

      type Cursor is access all ASN1_Container;

      --  Constructor (called automatically)
      procedure Initialize (Container : in out ASN1_Container);

      function Has_Element (Position : Cursor) return Boolean is
         (Position.Single_Value);

      package Iterators is
         new Ada.Iterator_Interfaces (Cursor, Has_Element);

      type Iterator is new Iterators.Forward_Iterator with record
         Position : Cursor;
      end record;

      function Get_Cursor (Item : Iterator) return Cursor is (Item.Position);

      overriding function First (Item : Iterator) return Cursor is (Item.Position);
      overriding function Next  (Item     : Iterator;
                                 Position : Cursor) return Cursor;

      function Iterate (Container : ASN1_Container) return Iterator'Class;

      function Element (Container : ASN1_Container;
                        Position  : Cursor) return asn1SccT_Null_Record is
         (null record);

      function To_ASN1 (From : asn1SccT_Null_Record) return asn1SccT_Null_Record is (From);

      subtype Instance is ASN1_Container;
      function Image (Elm : asn1SccT_Null_Record) return String is ("{}");
   end T_Null_Record_Pkg;

end ASN1_Ada_Iterators.Iterators;
