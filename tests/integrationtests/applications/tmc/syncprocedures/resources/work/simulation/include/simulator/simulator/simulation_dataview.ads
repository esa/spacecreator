pragma Style_Checks (Off);
--  Code automatically generated by asn1scc tool
with adaasn1rtl;
pragma Warnings (Off, "unit ""adaasn1rtl.encoding"" is not referenced");
with adaasn1rtl.encoding;
pragma Warnings (On, "unit ""adaasn1rtl.encoding"" is not referenced");


pragma Warnings (Off, "unit ""System"" is not referenced");
with System;
pragma Warnings (On, "unit ""System"" is not referenced");

pragma Warnings (Off, "use clause for package ""adaasn1rtl"" has no effect");
use adaasn1rtl;
pragma Warnings (On, "use clause for package ""adaasn1rtl"" has no effect");

pragma Warnings (Off, "use clause for type");
pragma Warnings (Off, "is already use-visible through package use clause at line");
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
pragma Warnings (On, "use clause for type");
pragma Warnings (On, "is already use-visible through package use clause at line");


pragma Warnings (Off, "no entities of ""SYNCPROCEDURES_DATAVIEW"" are referenced");
pragma Warnings (Off, "use clause for package ""SYNCPROCEDURES_DATAVIEW"" has no effect");
with SYNCPROCEDURES_DATAVIEW; use SYNCPROCEDURES_DATAVIEW;
pragma Warnings (On, "no entities of ""SYNCPROCEDURES_DATAVIEW"" are referenced");
pragma Warnings (On, "use clause for package ""SYNCPROCEDURES_DATAVIEW"" has no effect");


pragma Warnings (Off, "no entities of ""Pinger_Datamodel"" are referenced");
pragma Warnings (Off, "use clause for package ""Pinger_Datamodel"" has no effect");
with Pinger_Datamodel; use Pinger_Datamodel;
pragma Warnings (On, "no entities of ""Pinger_Datamodel"" are referenced");
pragma Warnings (On, "use clause for package ""Pinger_Datamodel"" has no effect");


pragma Warnings (Off, "no entities of ""Ponger_Datamodel"" are referenced");
pragma Warnings (Off, "use clause for package ""Ponger_Datamodel"" has no effect");
with Ponger_Datamodel; use Ponger_Datamodel;
pragma Warnings (On, "no entities of ""Ponger_Datamodel"" are referenced");
pragma Warnings (On, "use clause for package ""Ponger_Datamodel"" has no effect");



package Simulation_DataView with SPARK_Mode
is


-- asn1SccPinger_Event --------------------------------------------
-- asn1SccPinger_Event_msg_in --------------------------------------------
-- asn1SccPinger_Event_msg_in_input_none --------------------------------------------

type asn1SccPinger_Event_msg_in_input_none is record 
    null;
end record;

-- asn1SccPinger_Event_msg_in_pong --------------------------------------------

type asn1SccPinger_Event_msg_in_pong is record 
    pongarg : SYNCPROCEDURES_DATAVIEW.asn1SccMyInteger;
end record;

-- asn1SccPinger_Event_msg_in_tick --------------------------------------------

type asn1SccPinger_Event_msg_in_tick is record 
    null;
end record;


subtype asn1SccPinger_Event_msg_in_index_range is Integer range 0..2;

type asn1SccPinger_Event_msg_in_selection is (input_none_PRESENT, pong_PRESENT, tick_PRESENT);
for asn1SccPinger_Event_msg_in_selection use
    (input_none_PRESENT => 1, pong_PRESENT => 2, tick_PRESENT => 3);
for asn1SccPinger_Event_msg_in_selection'Size use 32;

type asn1SccPinger_Event_msg_in(kind : asn1SccPinger_Event_msg_in_selection:= input_none_PRESENT) is 
record
    case kind is
    when input_none_PRESENT =>
            input_none: asn1SccPinger_Event_msg_in_input_none;
    when pong_PRESENT =>
            pong: asn1SccPinger_Event_msg_in_pong;
    when tick_PRESENT =>
            tick: asn1SccPinger_Event_msg_in_tick;
    end case;
end record;

for asn1SccPinger_Event_msg_in use 
record
    kind at 0 range 0..31;
end record;
-- asn1SccPinger_Event_msg_out --------------------------------------------
-- asn1SccPinger_Event_msg_out_ping --------------------------------------------

type asn1SccPinger_Event_msg_out_ping is record 
    pingarg : SYNCPROCEDURES_DATAVIEW.asn1SccMyInteger;
end record;


subtype asn1SccPinger_Event_msg_out_index_range is Integer range 0..0;

type asn1SccPinger_Event_msg_out_selection is (ping_PRESENT);
for asn1SccPinger_Event_msg_out_selection use
    (ping_PRESENT => 1);
for asn1SccPinger_Event_msg_out_selection'Size use 32;

type asn1SccPinger_Event_msg_out(kind : asn1SccPinger_Event_msg_out_selection:= ping_PRESENT) is 
record
    case kind is
    when ping_PRESENT =>
            ping: asn1SccPinger_Event_msg_out_ping;
    end case;
end record;

for asn1SccPinger_Event_msg_out use 
record
    kind at 0 range 0..31;
end record;

subtype asn1SccPinger_Event_index_range is Integer range 0..1;

type asn1SccPinger_Event_selection is (msg_in_PRESENT, msg_out_PRESENT);
for asn1SccPinger_Event_selection use
    (msg_in_PRESENT => 1, msg_out_PRESENT => 2);
for asn1SccPinger_Event_selection'Size use 32;

type asn1SccPinger_Event(kind : asn1SccPinger_Event_selection:= msg_in_PRESENT) is 
record
    case kind is
    when msg_in_PRESENT =>
            msg_in: asn1SccPinger_Event_msg_in;
    when msg_out_PRESENT =>
            msg_out: asn1SccPinger_Event_msg_out;
    end case;
end record;

for asn1SccPinger_Event use 
record
    kind at 0 range 0..31;
end record;

function asn1SccPinger_Event_msg_in_input_none_Equal(val1, val2 : asn1SccPinger_Event_msg_in_input_none) return Boolean;

function asn1SccPinger_Event_msg_in_pong_Equal(val1, val2 : asn1SccPinger_Event_msg_in_pong) return Boolean;

function asn1SccPinger_Event_msg_in_tick_Equal(val1, val2 : asn1SccPinger_Event_msg_in_tick) return Boolean;

function asn1SccPinger_Event_msg_in_Equal(val1, val2 : asn1SccPinger_Event_msg_in) return Boolean;

function asn1SccPinger_Event_msg_out_ping_Equal(val1, val2 : asn1SccPinger_Event_msg_out_ping) return Boolean;

function asn1SccPinger_Event_msg_out_Equal(val1, val2 : asn1SccPinger_Event_msg_out) return Boolean;

function asn1SccPinger_Event_Equal(val1, val2 : asn1SccPinger_Event) return Boolean;

function asn1SccPinger_Event_msg_in_input_none_Init return asn1SccPinger_Event_msg_in_input_none;
function asn1SccPinger_Event_msg_in_pong_Init return asn1SccPinger_Event_msg_in_pong;
function asn1SccPinger_Event_msg_in_tick_Init return asn1SccPinger_Event_msg_in_tick;
function asn1SccPinger_Event_msg_in_Init return asn1SccPinger_Event_msg_in;
function asn1SccPinger_Event_msg_out_ping_Init return asn1SccPinger_Event_msg_out_ping;
function asn1SccPinger_Event_msg_out_Init return asn1SccPinger_Event_msg_out;
function asn1SccPinger_Event_Init return asn1SccPinger_Event;

ERR_PINGER_EVENT:constant Integer := 176; 
ERR_PINGER_EVENT_MSG_IN:constant Integer := 151; 
ERR_PINGER_EVENT_MSG_IN_INPUT_NONE:constant Integer := 126; 
ERR_PINGER_EVENT_MSG_IN_PONG:constant Integer := 141; 
ERR_PINGER_EVENT_MSG_IN_PONG_PONGARG_2:constant Integer := 136; 
ERR_PINGER_EVENT_MSG_IN_TICK:constant Integer := 146; 
ERR_PINGER_EVENT_MSG_OUT:constant Integer := 171; 
ERR_PINGER_EVENT_MSG_OUT_PING:constant Integer := 166; 
ERR_PINGER_EVENT_MSG_OUT_PING_PINGARG_2:constant Integer := 161; 
function asn1SccPinger_Event_IsConstraintValid(val : asn1SccPinger_Event) return adaasn1rtl.ASN1_RESULT;

ERR_UPER_ENCODE_PINGER_EVENT:constant Integer := 177; 
ERR_UPER_ENCODE_PINGER_EVENT_MSG_IN:constant Integer := 152; 
ERR_UPER_ENCODE_PINGER_EVENT_MSG_IN_PONG:constant Integer := 142; 
ERR_UPER_ENCODE_PINGER_EVENT_MSG_IN_PONG_PONGARG_2:constant Integer := 137; 
ERR_UPER_ENCODE_PINGER_EVENT_MSG_OUT:constant Integer := 172; 
ERR_UPER_ENCODE_PINGER_EVENT_MSG_OUT_PING:constant Integer := 167; 
ERR_UPER_ENCODE_PINGER_EVENT_MSG_OUT_PING_PINGARG_2:constant Integer := 162; 
asn1SccPinger_Event_REQUIRED_BYTES_FOR_ENCODING:constant Integer := 3;
asn1SccPinger_Event_REQUIRED_BITS_FOR_ENCODING:constant Integer := 17;

subtype asn1SccPinger_Event_uPER_Stream is adaasn1rtl.encoding.Bitstream(asn1SccPinger_Event_REQUIRED_BYTES_FOR_ENCODING);

procedure asn1SccPinger_Event_Encode (val : asn1SccPinger_Event; Stream : out asn1SccPinger_Event_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccPinger_Event_Encode_aux(val : asn1SccPinger_Event; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccPinger_Event_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccPinger_Event_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccPinger_Event_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;

ERR_UPER_DECODE_PINGER_EVENT:constant Integer := 178; 
ERR_UPER_DECODE_PINGER_EVENT_MSG_IN:constant Integer := 153; 
ERR_UPER_DECODE_PINGER_EVENT_MSG_IN_PONG:constant Integer := 143; 
ERR_UPER_DECODE_PINGER_EVENT_MSG_IN_PONG_PONGARG_2:constant Integer := 138; 
ERR_UPER_DECODE_PINGER_EVENT_MSG_OUT:constant Integer := 173; 
ERR_UPER_DECODE_PINGER_EVENT_MSG_OUT_PING:constant Integer := 168; 
ERR_UPER_DECODE_PINGER_EVENT_MSG_OUT_PING_PINGARG_2:constant Integer := 163; 
procedure asn1SccPinger_Event_Decode(val: out asn1SccPinger_Event; Stream : in out asn1SccPinger_Event_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccPinger_Event_Decode_aux(val: out asn1SccPinger_Event; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccPinger_Event_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccPinger_Event_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccPinger_Event_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;
-- asn1SccPonger_Event --------------------------------------------
-- asn1SccPonger_Event_msg_in --------------------------------------------
-- asn1SccPonger_Event_msg_in_input_none --------------------------------------------

type asn1SccPonger_Event_msg_in_input_none is record 
    null;
end record;

-- asn1SccPonger_Event_msg_in_ping --------------------------------------------

type asn1SccPonger_Event_msg_in_ping is record 
    pingarg : SYNCPROCEDURES_DATAVIEW.asn1SccMyInteger;
end record;


subtype asn1SccPonger_Event_msg_in_index_range is Integer range 0..1;

type asn1SccPonger_Event_msg_in_selection is (input_none_PRESENT, ping_PRESENT);
for asn1SccPonger_Event_msg_in_selection use
    (input_none_PRESENT => 1, ping_PRESENT => 2);
for asn1SccPonger_Event_msg_in_selection'Size use 32;

type asn1SccPonger_Event_msg_in(kind : asn1SccPonger_Event_msg_in_selection:= input_none_PRESENT) is 
record
    case kind is
    when input_none_PRESENT =>
            input_none: asn1SccPonger_Event_msg_in_input_none;
    when ping_PRESENT =>
            ping: asn1SccPonger_Event_msg_in_ping;
    end case;
end record;

for asn1SccPonger_Event_msg_in use 
record
    kind at 0 range 0..31;
end record;
-- asn1SccPonger_Event_msg_out --------------------------------------------
-- asn1SccPonger_Event_msg_out_pong --------------------------------------------

type asn1SccPonger_Event_msg_out_pong is record 
    pongarg : SYNCPROCEDURES_DATAVIEW.asn1SccMyInteger;
end record;


subtype asn1SccPonger_Event_msg_out_index_range is Integer range 0..0;

type asn1SccPonger_Event_msg_out_selection is (pong_PRESENT);
for asn1SccPonger_Event_msg_out_selection use
    (pong_PRESENT => 1);
for asn1SccPonger_Event_msg_out_selection'Size use 32;

type asn1SccPonger_Event_msg_out(kind : asn1SccPonger_Event_msg_out_selection:= pong_PRESENT) is 
record
    case kind is
    when pong_PRESENT =>
            pong: asn1SccPonger_Event_msg_out_pong;
    end case;
end record;

for asn1SccPonger_Event_msg_out use 
record
    kind at 0 range 0..31;
end record;

subtype asn1SccPonger_Event_index_range is Integer range 0..1;

type asn1SccPonger_Event_selection is (msg_in_PRESENT, msg_out_PRESENT);
for asn1SccPonger_Event_selection use
    (msg_in_PRESENT => 1, msg_out_PRESENT => 2);
for asn1SccPonger_Event_selection'Size use 32;

type asn1SccPonger_Event(kind : asn1SccPonger_Event_selection:= msg_in_PRESENT) is 
record
    case kind is
    when msg_in_PRESENT =>
            msg_in: asn1SccPonger_Event_msg_in;
    when msg_out_PRESENT =>
            msg_out: asn1SccPonger_Event_msg_out;
    end case;
end record;

for asn1SccPonger_Event use 
record
    kind at 0 range 0..31;
end record;

function asn1SccPonger_Event_msg_in_input_none_Equal(val1, val2 : asn1SccPonger_Event_msg_in_input_none) return Boolean;

function asn1SccPonger_Event_msg_in_ping_Equal(val1, val2 : asn1SccPonger_Event_msg_in_ping) return Boolean;

function asn1SccPonger_Event_msg_in_Equal(val1, val2 : asn1SccPonger_Event_msg_in) return Boolean;

function asn1SccPonger_Event_msg_out_pong_Equal(val1, val2 : asn1SccPonger_Event_msg_out_pong) return Boolean;

function asn1SccPonger_Event_msg_out_Equal(val1, val2 : asn1SccPonger_Event_msg_out) return Boolean;

function asn1SccPonger_Event_Equal(val1, val2 : asn1SccPonger_Event) return Boolean;

function asn1SccPonger_Event_msg_in_input_none_Init return asn1SccPonger_Event_msg_in_input_none;
function asn1SccPonger_Event_msg_in_ping_Init return asn1SccPonger_Event_msg_in_ping;
function asn1SccPonger_Event_msg_in_Init return asn1SccPonger_Event_msg_in;
function asn1SccPonger_Event_msg_out_pong_Init return asn1SccPonger_Event_msg_out_pong;
function asn1SccPonger_Event_msg_out_Init return asn1SccPonger_Event_msg_out;
function asn1SccPonger_Event_Init return asn1SccPonger_Event;

ERR_PONGER_EVENT:constant Integer := 226; 
ERR_PONGER_EVENT_MSG_IN:constant Integer := 201; 
ERR_PONGER_EVENT_MSG_IN_INPUT_NONE:constant Integer := 181; 
ERR_PONGER_EVENT_MSG_IN_PING:constant Integer := 196; 
ERR_PONGER_EVENT_MSG_IN_PING_PINGARG_2:constant Integer := 191; 
ERR_PONGER_EVENT_MSG_OUT:constant Integer := 221; 
ERR_PONGER_EVENT_MSG_OUT_PONG:constant Integer := 216; 
ERR_PONGER_EVENT_MSG_OUT_PONG_PONGARG_2:constant Integer := 211; 
function asn1SccPonger_Event_IsConstraintValid(val : asn1SccPonger_Event) return adaasn1rtl.ASN1_RESULT;

ERR_UPER_ENCODE_PONGER_EVENT:constant Integer := 227; 
ERR_UPER_ENCODE_PONGER_EVENT_MSG_IN:constant Integer := 202; 
ERR_UPER_ENCODE_PONGER_EVENT_MSG_IN_PING:constant Integer := 197; 
ERR_UPER_ENCODE_PONGER_EVENT_MSG_IN_PING_PINGARG_2:constant Integer := 192; 
ERR_UPER_ENCODE_PONGER_EVENT_MSG_OUT:constant Integer := 222; 
ERR_UPER_ENCODE_PONGER_EVENT_MSG_OUT_PONG:constant Integer := 217; 
ERR_UPER_ENCODE_PONGER_EVENT_MSG_OUT_PONG_PONGARG_2:constant Integer := 212; 
asn1SccPonger_Event_REQUIRED_BYTES_FOR_ENCODING:constant Integer := 2;
asn1SccPonger_Event_REQUIRED_BITS_FOR_ENCODING:constant Integer := 16;

subtype asn1SccPonger_Event_uPER_Stream is adaasn1rtl.encoding.Bitstream(asn1SccPonger_Event_REQUIRED_BYTES_FOR_ENCODING);

procedure asn1SccPonger_Event_Encode (val : asn1SccPonger_Event; Stream : out asn1SccPonger_Event_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccPonger_Event_Encode_aux(val : asn1SccPonger_Event; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccPonger_Event_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccPonger_Event_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccPonger_Event_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;

ERR_UPER_DECODE_PONGER_EVENT:constant Integer := 228; 
ERR_UPER_DECODE_PONGER_EVENT_MSG_IN:constant Integer := 203; 
ERR_UPER_DECODE_PONGER_EVENT_MSG_IN_PING:constant Integer := 198; 
ERR_UPER_DECODE_PONGER_EVENT_MSG_IN_PING_PINGARG_2:constant Integer := 193; 
ERR_UPER_DECODE_PONGER_EVENT_MSG_OUT:constant Integer := 223; 
ERR_UPER_DECODE_PONGER_EVENT_MSG_OUT_PONG:constant Integer := 218; 
ERR_UPER_DECODE_PONGER_EVENT_MSG_OUT_PONG_PONGARG_2:constant Integer := 213; 
procedure asn1SccPonger_Event_Decode(val: out asn1SccPonger_Event; Stream : in out asn1SccPonger_Event_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccPonger_Event_Decode_aux(val: out asn1SccPonger_Event; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccPonger_Event_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccPonger_Event_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccPonger_Event_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;
subtype asn1SccPID_index_range is Integer range 0..3;
type asn1SccPID is (asn1Sccenv, asn1Sccclock, asn1Sccpinger, asn1Sccponger) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccPID use
    (asn1Sccenv => 0, asn1Sccclock => 1, asn1Sccpinger => 2, asn1Sccponger => 3);

function asn1SccPID_Equal(val1, val2 : asn1SccPID) return Boolean;

function asn1SccPID_Init return asn1SccPID;

ERR_PID:constant Integer := 106; 
function asn1SccPID_IsConstraintValid(val : asn1SccPID) return adaasn1rtl.ASN1_RESULT;

ERR_UPER_ENCODE_PID:constant Integer := 107; 
asn1SccPID_REQUIRED_BYTES_FOR_ENCODING:constant Integer := 1;
asn1SccPID_REQUIRED_BITS_FOR_ENCODING:constant Integer := 2;

subtype asn1SccPID_uPER_Stream is adaasn1rtl.encoding.Bitstream(asn1SccPID_REQUIRED_BYTES_FOR_ENCODING);

procedure asn1SccPID_Encode (val : asn1SccPID; Stream : out asn1SccPID_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccPID_Encode_aux(val : asn1SccPID; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccPID_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccPID_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccPID_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;

ERR_UPER_DECODE_PID:constant Integer := 108; 
procedure asn1SccPID_Decode(val: out asn1SccPID; Stream : in out asn1SccPID_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccPID_Decode_aux(val: out asn1SccPID; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccPID_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccPID_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccPID_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;
-- asn1SccClock_Event --------------------------------------------
-- asn1SccClock_Event_msg_out --------------------------------------------
-- asn1SccClock_Event_msg_out_tick --------------------------------------------

type asn1SccClock_Event_msg_out_tick is record 
    null;
end record;


subtype asn1SccClock_Event_msg_out_index_range is Integer range 0..0;

type asn1SccClock_Event_msg_out_selection is (tick_PRESENT);
for asn1SccClock_Event_msg_out_selection use
    (tick_PRESENT => 1);
for asn1SccClock_Event_msg_out_selection'Size use 32;

type asn1SccClock_Event_msg_out(kind : asn1SccClock_Event_msg_out_selection:= tick_PRESENT) is 
record
    case kind is
    when tick_PRESENT =>
            tick: asn1SccClock_Event_msg_out_tick;
    end case;
end record;

for asn1SccClock_Event_msg_out use 
record
    kind at 0 range 0..31;
end record;

subtype asn1SccClock_Event_index_range is Integer range 0..0;

type asn1SccClock_Event_selection is (msg_out_PRESENT);
for asn1SccClock_Event_selection use
    (msg_out_PRESENT => 1);
for asn1SccClock_Event_selection'Size use 32;

type asn1SccClock_Event(kind : asn1SccClock_Event_selection:= msg_out_PRESENT) is 
record
    case kind is
    when msg_out_PRESENT =>
            msg_out: asn1SccClock_Event_msg_out;
    end case;
end record;

for asn1SccClock_Event use 
record
    kind at 0 range 0..31;
end record;

function asn1SccClock_Event_msg_out_tick_Equal(val1, val2 : asn1SccClock_Event_msg_out_tick) return Boolean;

function asn1SccClock_Event_msg_out_Equal(val1, val2 : asn1SccClock_Event_msg_out) return Boolean;

function asn1SccClock_Event_Equal(val1, val2 : asn1SccClock_Event) return Boolean;

function asn1SccClock_Event_msg_out_tick_Init return asn1SccClock_Event_msg_out_tick;
function asn1SccClock_Event_msg_out_Init return asn1SccClock_Event_msg_out;
function asn1SccClock_Event_Init return asn1SccClock_Event;

ERR_CLOCK_EVENT:constant Integer := 121; 
ERR_CLOCK_EVENT_MSG_OUT:constant Integer := 116; 
ERR_CLOCK_EVENT_MSG_OUT_TICK:constant Integer := 111; 
function asn1SccClock_Event_IsConstraintValid(val : asn1SccClock_Event) return adaasn1rtl.ASN1_RESULT;

ERR_UPER_ENCODE_CLOCK_EVENT:constant Integer := 122; 
ERR_UPER_ENCODE_CLOCK_EVENT_MSG_OUT:constant Integer := 117; 
asn1SccClock_Event_REQUIRED_BYTES_FOR_ENCODING:constant Integer := 0;
asn1SccClock_Event_REQUIRED_BITS_FOR_ENCODING:constant Integer := 0;

subtype asn1SccClock_Event_uPER_Stream is adaasn1rtl.encoding.Bitstream(1);

procedure asn1SccClock_Event_Encode (val : asn1SccClock_Event; Stream : out asn1SccClock_Event_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccClock_Event_Encode_aux(val : asn1SccClock_Event; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccClock_Event_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccClock_Event_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccClock_Event_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;

ERR_UPER_DECODE_CLOCK_EVENT:constant Integer := 123; 
ERR_UPER_DECODE_CLOCK_EVENT_MSG_OUT:constant Integer := 118; 
procedure asn1SccClock_Event_Decode(val: out asn1SccClock_Event; Stream : in out asn1SccClock_Event_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccClock_Event_Decode_aux(val: out asn1SccClock_Event; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccClock_Event_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccClock_Event_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccClock_Event_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;
-- asn1SccFunction_Event --------------------------------------------

subtype asn1SccFunction_Event_index_range is Integer range 0..2;

type asn1SccFunction_Event_selection is (clock_PRESENT, pinger_PRESENT, ponger_PRESENT);
for asn1SccFunction_Event_selection use
    (clock_PRESENT => 1, pinger_PRESENT => 2, ponger_PRESENT => 3);
for asn1SccFunction_Event_selection'Size use 32;

type asn1SccFunction_Event(kind : asn1SccFunction_Event_selection:= clock_PRESENT) is 
record
    case kind is
    when clock_PRESENT =>
            clock: asn1SccClock_Event;
    when pinger_PRESENT =>
            pinger: asn1SccPinger_Event;
    when ponger_PRESENT =>
            ponger: asn1SccPonger_Event;
    end case;
end record;

for asn1SccFunction_Event use 
record
    kind at 0 range 0..31;
end record;

function asn1SccFunction_Event_Equal(val1, val2 : asn1SccFunction_Event) return Boolean;

function asn1SccFunction_Event_Init return asn1SccFunction_Event;

ERR_FUNCTION_EVENT:constant Integer := 371; 
ERR_FUNCTION_EVENT_CLOCK_2:constant Integer := 251; 
ERR_FUNCTION_EVENT_PINGER_2:constant Integer := 311; 
ERR_FUNCTION_EVENT_PONGER_2:constant Integer := 366; 
function asn1SccFunction_Event_IsConstraintValid(val : asn1SccFunction_Event) return adaasn1rtl.ASN1_RESULT;

ERR_UPER_ENCODE_FUNCTION_EVENT:constant Integer := 372; 
ERR_UPER_ENCODE_FUNCTION_EVENT_CLOCK_2:constant Integer := 252; 
ERR_UPER_ENCODE_FUNCTION_EVENT_PINGER_2:constant Integer := 312; 
ERR_UPER_ENCODE_FUNCTION_EVENT_PONGER_2:constant Integer := 367; 
asn1SccFunction_Event_REQUIRED_BYTES_FOR_ENCODING:constant Integer := 3;
asn1SccFunction_Event_REQUIRED_BITS_FOR_ENCODING:constant Integer := 19;

subtype asn1SccFunction_Event_uPER_Stream is adaasn1rtl.encoding.Bitstream(asn1SccFunction_Event_REQUIRED_BYTES_FOR_ENCODING);

procedure asn1SccFunction_Event_Encode (val : asn1SccFunction_Event; Stream : out asn1SccFunction_Event_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccFunction_Event_Encode_aux(val : asn1SccFunction_Event; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccFunction_Event_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccFunction_Event_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccFunction_Event_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;

ERR_UPER_DECODE_FUNCTION_EVENT:constant Integer := 373; 
ERR_UPER_DECODE_FUNCTION_EVENT_CLOCK_2:constant Integer := 253; 
ERR_UPER_DECODE_FUNCTION_EVENT_PINGER_2:constant Integer := 313; 
ERR_UPER_DECODE_FUNCTION_EVENT_PONGER_2:constant Integer := 368; 
procedure asn1SccFunction_Event_Decode(val: out asn1SccFunction_Event; Stream : in out asn1SccFunction_Event_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccFunction_Event_Decode_aux(val: out asn1SccFunction_Event; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccFunction_Event_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccFunction_Event_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccFunction_Event_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;
-- asn1SccNamed_Function_Event --------------------------------------------
subtype asn1SccNamed_Function_Event_id_alpha_index is Integer range 1..80;
subtype asn1SccNamed_Function_Event_id_index is Integer range 1..81;
subtype asn1SccNamed_Function_Event_id is String(asn1SccNamed_Function_Event_id_index);
subtype asn1SccNamed_Function_Event_id_alpha_index_1 is Integer range 1..128;
subtype asn1SccNamed_Function_Event_id_alpha is String(asn1SccNamed_Function_Event_id_alpha_index_1);
asn1SccNamed_Function_Event_id_alpha_set : constant asn1SccNamed_Function_Event_id_alpha := asn1SccNamed_Function_Event_id_alpha'(
                                                                                                                                  1=>Character'Val(0), 
                                                                                                                                  2=>Character'Val(1), 
                                                                                                                                  3=>Character'Val(2), 
                                                                                                                                  4=>Character'Val(3), 
                                                                                                                                  5=>Character'Val(4), 
                                                                                                                                  6=>Character'Val(5), 
                                                                                                                                  7=>Character'Val(6), 
                                                                                                                                  8=>Character'Val(7), 
                                                                                                                                  9=>Character'Val(8), 
                                                                                                                                  10=>Character'Val(9), 
                                                                                                                                  11=>Character'Val(10), 
                                                                                                                                  12=>Character'Val(11), 
                                                                                                                                  13=>Character'Val(12), 
                                                                                                                                  14=>Character'Val(13), 
                                                                                                                                  15=>Character'Val(14), 
                                                                                                                                  16=>Character'Val(15), 
                                                                                                                                  17=>Character'Val(16), 
                                                                                                                                  18=>Character'Val(17), 
                                                                                                                                  19=>Character'Val(18), 
                                                                                                                                  20=>Character'Val(19), 
                                                                                                                                  21=>Character'Val(20), 
                                                                                                                                  22=>Character'Val(21), 
                                                                                                                                  23=>Character'Val(22), 
                                                                                                                                  24=>Character'Val(23), 
                                                                                                                                  25=>Character'Val(24), 
                                                                                                                                  26=>Character'Val(25), 
                                                                                                                                  27=>Character'Val(26), 
                                                                                                                                  28=>Character'Val(27), 
                                                                                                                                  29=>Character'Val(28), 
                                                                                                                                  30=>Character'Val(29), 
                                                                                                                                  31=>Character'Val(30), 
                                                                                                                                  32=>Character'Val(31), 
                                                                                                                                  33=>Character'Val(32), 
                                                                                                                                  34=>Character'Val(33), 
                                                                                                                                  35=>Character'Val(34), 
                                                                                                                                  36=>Character'Val(35), 
                                                                                                                                  37=>Character'Val(36), 
                                                                                                                                  38=>Character'Val(37), 
                                                                                                                                  39=>Character'Val(38), 
                                                                                                                                  40=>Character'Val(39), 
                                                                                                                                  41=>Character'Val(40), 
                                                                                                                                  42=>Character'Val(41), 
                                                                                                                                  43=>Character'Val(42), 
                                                                                                                                  44=>Character'Val(43), 
                                                                                                                                  45=>Character'Val(44), 
                                                                                                                                  46=>Character'Val(45), 
                                                                                                                                  47=>Character'Val(46), 
                                                                                                                                  48=>Character'Val(47), 
                                                                                                                                  49=>Character'Val(48), 
                                                                                                                                  50=>Character'Val(49), 
                                                                                                                                  51=>Character'Val(50), 
                                                                                                                                  52=>Character'Val(51), 
                                                                                                                                  53=>Character'Val(52), 
                                                                                                                                  54=>Character'Val(53), 
                                                                                                                                  55=>Character'Val(54), 
                                                                                                                                  56=>Character'Val(55), 
                                                                                                                                  57=>Character'Val(56), 
                                                                                                                                  58=>Character'Val(57), 
                                                                                                                                  59=>Character'Val(58), 
                                                                                                                                  60=>Character'Val(59), 
                                                                                                                                  61=>Character'Val(60), 
                                                                                                                                  62=>Character'Val(61), 
                                                                                                                                  63=>Character'Val(62), 
                                                                                                                                  64=>Character'Val(63), 
                                                                                                                                  65=>Character'Val(64), 
                                                                                                                                  66=>Character'Val(65), 
                                                                                                                                  67=>Character'Val(66), 
                                                                                                                                  68=>Character'Val(67), 
                                                                                                                                  69=>Character'Val(68), 
                                                                                                                                  70=>Character'Val(69), 
                                                                                                                                  71=>Character'Val(70), 
                                                                                                                                  72=>Character'Val(71), 
                                                                                                                                  73=>Character'Val(72), 
                                                                                                                                  74=>Character'Val(73), 
                                                                                                                                  75=>Character'Val(74), 
                                                                                                                                  76=>Character'Val(75), 
                                                                                                                                  77=>Character'Val(76), 
                                                                                                                                  78=>Character'Val(77), 
                                                                                                                                  79=>Character'Val(78), 
                                                                                                                                  80=>Character'Val(79), 
                                                                                                                                  81=>Character'Val(80), 
                                                                                                                                  82=>Character'Val(81), 
                                                                                                                                  83=>Character'Val(82), 
                                                                                                                                  84=>Character'Val(83), 
                                                                                                                                  85=>Character'Val(84), 
                                                                                                                                  86=>Character'Val(85), 
                                                                                                                                  87=>Character'Val(86), 
                                                                                                                                  88=>Character'Val(87), 
                                                                                                                                  89=>Character'Val(88), 
                                                                                                                                  90=>Character'Val(89), 
                                                                                                                                  91=>Character'Val(90), 
                                                                                                                                  92=>Character'Val(91), 
                                                                                                                                  93=>Character'Val(92), 
                                                                                                                                  94=>Character'Val(93), 
                                                                                                                                  95=>Character'Val(94), 
                                                                                                                                  96=>Character'Val(95), 
                                                                                                                                  97=>Character'Val(96), 
                                                                                                                                  98=>Character'Val(97), 
                                                                                                                                  99=>Character'Val(98), 
                                                                                                                                  100=>Character'Val(99), 
                                                                                                                                  101=>Character'Val(100), 
                                                                                                                                  102=>Character'Val(101), 
                                                                                                                                  103=>Character'Val(102), 
                                                                                                                                  104=>Character'Val(103), 
                                                                                                                                  105=>Character'Val(104), 
                                                                                                                                  106=>Character'Val(105), 
                                                                                                                                  107=>Character'Val(106), 
                                                                                                                                  108=>Character'Val(107), 
                                                                                                                                  109=>Character'Val(108), 
                                                                                                                                  110=>Character'Val(109), 
                                                                                                                                  111=>Character'Val(110), 
                                                                                                                                  112=>Character'Val(111), 
                                                                                                                                  113=>Character'Val(112), 
                                                                                                                                  114=>Character'Val(113), 
                                                                                                                                  115=>Character'Val(114), 
                                                                                                                                  116=>Character'Val(115), 
                                                                                                                                  117=>Character'Val(116), 
                                                                                                                                  118=>Character'Val(117), 
                                                                                                                                  119=>Character'Val(118), 
                                                                                                                                  120=>Character'Val(119), 
                                                                                                                                  121=>Character'Val(120), 
                                                                                                                                  122=>Character'Val(121), 
                                                                                                                                  123=>Character'Val(122), 
                                                                                                                                  124=>Character'Val(123), 
                                                                                                                                  125=>Character'Val(124), 
                                                                                                                                  126=>Character'Val(125), 
                                                                                                                                  127=>Character'Val(126), 
                                                                                                                                  128=>Character'Val(127));


type asn1SccNamed_Function_Event is record 
    id : asn1SccNamed_Function_Event_id;
    event : asn1SccFunction_Event;
end record;


function asn1SccNamed_Function_Event_id_Equal(val1, val2 : asn1SccNamed_Function_Event_id) return Boolean;

function asn1SccNamed_Function_Event_Equal(val1, val2 : asn1SccNamed_Function_Event) return Boolean;

function asn1SccNamed_Function_Event_id_Init return asn1SccNamed_Function_Event_id;
function asn1SccNamed_Function_Event_Init return asn1SccNamed_Function_Event;

ERR_NAMED_FUNCTION_EVENT:constant Integer := 526; 
ERR_NAMED_FUNCTION_EVENT_ID:constant Integer := 376; 
ERR_NAMED_FUNCTION_EVENT_EVENT_2:constant Integer := 521; 
function asn1SccNamed_Function_Event_IsConstraintValid(val : asn1SccNamed_Function_Event) return adaasn1rtl.ASN1_RESULT;

ERR_UPER_ENCODE_NAMED_FUNCTION_EVENT:constant Integer := 527; 
ERR_UPER_ENCODE_NAMED_FUNCTION_EVENT_ID:constant Integer := 377; 
ERR_UPER_ENCODE_NAMED_FUNCTION_EVENT_EVENT_2:constant Integer := 522; 
asn1SccNamed_Function_Event_REQUIRED_BYTES_FOR_ENCODING:constant Integer := 74;
asn1SccNamed_Function_Event_REQUIRED_BITS_FOR_ENCODING:constant Integer := 586;

subtype asn1SccNamed_Function_Event_uPER_Stream is adaasn1rtl.encoding.Bitstream(asn1SccNamed_Function_Event_REQUIRED_BYTES_FOR_ENCODING);

procedure asn1SccNamed_Function_Event_Encode (val : asn1SccNamed_Function_Event; Stream : out asn1SccNamed_Function_Event_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccNamed_Function_Event_Encode_aux(val : asn1SccNamed_Function_Event; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccNamed_Function_Event_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccNamed_Function_Event_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccNamed_Function_Event_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;

ERR_UPER_DECODE_NAMED_FUNCTION_EVENT:constant Integer := 528; 
ERR_UPER_DECODE_NAMED_FUNCTION_EVENT_ID:constant Integer := 378; 
ERR_UPER_DECODE_NAMED_FUNCTION_EVENT_EVENT_2:constant Integer := 523; 
procedure asn1SccNamed_Function_Event_Decode(val: out asn1SccNamed_Function_Event; Stream : in out asn1SccNamed_Function_Event_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccNamed_Function_Event_Decode_aux(val: out asn1SccNamed_Function_Event; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccNamed_Function_Event_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccNamed_Function_Event_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccNamed_Function_Event_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;
-- asn1SccInterface_Event --------------------------------------------

type asn1SccInterface_Event is record 
    source : asn1SccPID;
    dest : asn1SccPID;
    event : asn1SccFunction_Event;
end record;


function asn1SccInterface_Event_Equal(val1, val2 : asn1SccInterface_Event) return Boolean;

function asn1SccInterface_Event_Init return asn1SccInterface_Event;

ERR_INTERFACE_EVENT:constant Integer := 696; 
ERR_INTERFACE_EVENT_SOURCE_2:constant Integer := 536; 
ERR_INTERFACE_EVENT_DEST_2:constant Integer := 546; 
ERR_INTERFACE_EVENT_EVENT_2:constant Integer := 691; 
function asn1SccInterface_Event_IsConstraintValid(val : asn1SccInterface_Event) return adaasn1rtl.ASN1_RESULT;

ERR_UPER_ENCODE_INTERFACE_EVENT:constant Integer := 697; 
ERR_UPER_ENCODE_INTERFACE_EVENT_SOURCE_2:constant Integer := 537; 
ERR_UPER_ENCODE_INTERFACE_EVENT_DEST_2:constant Integer := 547; 
ERR_UPER_ENCODE_INTERFACE_EVENT_EVENT_2:constant Integer := 692; 
asn1SccInterface_Event_REQUIRED_BYTES_FOR_ENCODING:constant Integer := 3;
asn1SccInterface_Event_REQUIRED_BITS_FOR_ENCODING:constant Integer := 23;

subtype asn1SccInterface_Event_uPER_Stream is adaasn1rtl.encoding.Bitstream(asn1SccInterface_Event_REQUIRED_BYTES_FOR_ENCODING);

procedure asn1SccInterface_Event_Encode (val : asn1SccInterface_Event; Stream : out asn1SccInterface_Event_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccInterface_Event_Encode_aux(val : asn1SccInterface_Event; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccInterface_Event_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccInterface_Event_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccInterface_Event_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;

ERR_UPER_DECODE_INTERFACE_EVENT:constant Integer := 698; 
ERR_UPER_DECODE_INTERFACE_EVENT_SOURCE_2:constant Integer := 538; 
ERR_UPER_DECODE_INTERFACE_EVENT_DEST_2:constant Integer := 548; 
ERR_UPER_DECODE_INTERFACE_EVENT_EVENT_2:constant Integer := 693; 
procedure asn1SccInterface_Event_Decode(val: out asn1SccInterface_Event; Stream : in out asn1SccInterface_Event_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccInterface_Event_Decode_aux(val: out asn1SccInterface_Event; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccInterface_Event_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccInterface_Event_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccInterface_Event_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;
-- asn1SccObservable_Event --------------------------------------------
-- asn1SccObservable_Event_no_event --------------------------------------------

type asn1SccObservable_Event_no_event is record 
    null;
end record;

-- asn1SccObservable_Event_system_startup --------------------------------------------

type asn1SccObservable_Event_system_startup is record 
    null;
end record;


subtype asn1SccObservable_Event_index_range is Integer range 0..4;

type asn1SccObservable_Event_selection is (no_event_PRESENT, system_startup_PRESENT, input_event_PRESENT, output_event_PRESENT, unhandled_input_PRESENT);
for asn1SccObservable_Event_selection use
    (no_event_PRESENT => 1, system_startup_PRESENT => 2, input_event_PRESENT => 3, output_event_PRESENT => 4, unhandled_input_PRESENT => 5);
for asn1SccObservable_Event_selection'Size use 32;

type asn1SccObservable_Event(kind : asn1SccObservable_Event_selection:= no_event_PRESENT) is 
record
    case kind is
    when no_event_PRESENT =>
            no_event: asn1SccObservable_Event_no_event;
    when system_startup_PRESENT =>
            system_startup: asn1SccObservable_Event_system_startup;
    when input_event_PRESENT =>
            input_event: asn1SccInterface_Event;
    when output_event_PRESENT =>
            output_event: asn1SccInterface_Event;
    when unhandled_input_PRESENT =>
            unhandled_input: asn1SccInterface_Event;
    end case;
end record;

for asn1SccObservable_Event use 
record
    kind at 0 range 0..31;
end record;

function asn1SccObservable_Event_no_event_Equal(val1, val2 : asn1SccObservable_Event_no_event) return Boolean;

function asn1SccObservable_Event_system_startup_Equal(val1, val2 : asn1SccObservable_Event_system_startup) return Boolean;

function asn1SccObservable_Event_Equal(val1, val2 : asn1SccObservable_Event) return Boolean;

function asn1SccObservable_Event_no_event_Init return asn1SccObservable_Event_no_event;
function asn1SccObservable_Event_system_startup_Init return asn1SccObservable_Event_system_startup;
function asn1SccObservable_Event_Init return asn1SccObservable_Event;

ERR_OBSERVABLE_EVENT:constant Integer := 1236; 
ERR_OBSERVABLE_EVENT_NO_EVENT:constant Integer := 701; 
ERR_OBSERVABLE_EVENT_SYSTEM_STARTUP:constant Integer := 706; 
ERR_OBSERVABLE_EVENT_INPUT_EVENT_2:constant Integer := 881; 
ERR_OBSERVABLE_EVENT_OUTPUT_EVENT_2:constant Integer := 1056; 
ERR_OBSERVABLE_EVENT_UNHANDLED_INPUT_2:constant Integer := 1231; 
function asn1SccObservable_Event_IsConstraintValid(val : asn1SccObservable_Event) return adaasn1rtl.ASN1_RESULT;

ERR_UPER_ENCODE_OBSERVABLE_EVENT:constant Integer := 1237; 
ERR_UPER_ENCODE_OBSERVABLE_EVENT_INPUT_EVENT_2:constant Integer := 882; 
ERR_UPER_ENCODE_OBSERVABLE_EVENT_OUTPUT_EVENT_2:constant Integer := 1057; 
ERR_UPER_ENCODE_OBSERVABLE_EVENT_UNHANDLED_INPUT_2:constant Integer := 1232; 
asn1SccObservable_Event_REQUIRED_BYTES_FOR_ENCODING:constant Integer := 4;
asn1SccObservable_Event_REQUIRED_BITS_FOR_ENCODING:constant Integer := 26;

subtype asn1SccObservable_Event_uPER_Stream is adaasn1rtl.encoding.Bitstream(asn1SccObservable_Event_REQUIRED_BYTES_FOR_ENCODING);

procedure asn1SccObservable_Event_Encode (val : asn1SccObservable_Event; Stream : out asn1SccObservable_Event_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccObservable_Event_Encode_aux(val : asn1SccObservable_Event; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccObservable_Event_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccObservable_Event_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccObservable_Event_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;

ERR_UPER_DECODE_OBSERVABLE_EVENT:constant Integer := 1238; 
ERR_UPER_DECODE_OBSERVABLE_EVENT_INPUT_EVENT_2:constant Integer := 883; 
ERR_UPER_DECODE_OBSERVABLE_EVENT_OUTPUT_EVENT_2:constant Integer := 1058; 
ERR_UPER_DECODE_OBSERVABLE_EVENT_UNHANDLED_INPUT_2:constant Integer := 1233; 
procedure asn1SccObservable_Event_Decode(val: out asn1SccObservable_Event; Stream : in out asn1SccObservable_Event_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccObservable_Event_Decode_aux(val: out asn1SccObservable_Event; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccObservable_Event_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccObservable_Event_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccObservable_Event_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;
-- asn1SccEvents_Ty --------------------------------------------


subtype asn1SccEvents_Ty_index is Integer range 1..10;
type asn1SccEvents_Ty_array is array (asn1SccEvents_Ty_index) of asn1SccObservable_Event;
subtype asn1SccEvents_Ty_length_index is Integer range 0..10;
type asn1SccEvents_Ty is  record
    Length : asn1SccEvents_Ty_length_index;
    Data  : asn1SccEvents_Ty_array;
end record;

function asn1SccEvents_Ty_Equal(val1, val2 : asn1SccEvents_Ty) return Boolean;

function asn1SccEvents_Ty_Init return asn1SccEvents_Ty;

ERR_EVENTS_TY:constant Integer := 1786; 
ERR_EVENTS_TY_ELM_2:constant Integer := 1781; 
function asn1SccEvents_Ty_IsConstraintValid(val : asn1SccEvents_Ty) return adaasn1rtl.ASN1_RESULT;

ERR_UPER_ENCODE_EVENTS_TY:constant Integer := 1787; 
ERR_UPER_ENCODE_EVENTS_TY_ELM_2:constant Integer := 1782; 
asn1SccEvents_Ty_REQUIRED_BYTES_FOR_ENCODING:constant Integer := 33;
asn1SccEvents_Ty_REQUIRED_BITS_FOR_ENCODING:constant Integer := 264;

subtype asn1SccEvents_Ty_uPER_Stream is adaasn1rtl.encoding.Bitstream(asn1SccEvents_Ty_REQUIRED_BYTES_FOR_ENCODING);

procedure asn1SccEvents_Ty_Encode (val : asn1SccEvents_Ty; Stream : out asn1SccEvents_Ty_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccEvents_Ty_Encode_aux(val : asn1SccEvents_Ty; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccEvents_Ty_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccEvents_Ty_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccEvents_Ty_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;

ERR_UPER_DECODE_EVENTS_TY:constant Integer := 1788; 
ERR_UPER_DECODE_EVENTS_TY_ELM_2:constant Integer := 1783; 
procedure asn1SccEvents_Ty_Decode(val: out asn1SccEvents_Ty; Stream : in out asn1SccEvents_Ty_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccEvents_Ty_Decode_aux(val: out asn1SccEvents_Ty; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccEvents_Ty_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccEvents_Ty_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccEvents_Ty_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;
-- asn1SccSystem_State --------------------------------------------
subtype asn1SccSystem_State_pinger_queue is asn1SccEvents_Ty;
subtype asn1SccSystem_State_pinger_queue_index is asn1SccEvents_Ty_index;
subtype asn1SccSystem_State_pinger_queue_array is asn1SccEvents_Ty_array;
subtype asn1SccSystem_State_pinger_queue_length_index is asn1SccEvents_Ty_length_index;

subtype asn1SccSystem_State_ponger_queue is asn1SccEvents_Ty;
subtype asn1SccSystem_State_ponger_queue_index is asn1SccEvents_Ty_index;
subtype asn1SccSystem_State_ponger_queue_array is asn1SccEvents_Ty_array;
subtype asn1SccSystem_State_ponger_queue_length_index is asn1SccEvents_Ty_length_index;


type asn1SccSystem_State is record 
    pinger_queue : asn1SccSystem_State_pinger_queue;
    ponger_queue : asn1SccSystem_State_ponger_queue;
    pinger : Pinger_Datamodel.asn1SccPinger_Context;
    ponger : Ponger_Datamodel.asn1SccPonger_Context;
end record;


    function asn1SccSystem_State_pinger_queue_Equal (val1, val2 : asn1SccSystem_State_pinger_queue) return Boolean;

    function asn1SccSystem_State_ponger_queue_Equal (val1, val2 : asn1SccSystem_State_ponger_queue) return Boolean;

function asn1SccSystem_State_Equal(val1, val2 : asn1SccSystem_State) return Boolean;

function asn1SccSystem_State_pinger_queue_Init return asn1SccSystem_State_pinger_queue;
function asn1SccSystem_State_ponger_queue_Init return asn1SccSystem_State_ponger_queue;
function asn1SccSystem_State_Init return asn1SccSystem_State;

ERR_SYSTEM_STATE:constant Integer := 2961; 
ERR_SYSTEM_STATE_PINGER_QUEUE:constant Integer := 2336; 
ERR_SYSTEM_STATE_PINGER_QUEUE_ELM_2:constant Integer := 2331; 
ERR_SYSTEM_STATE_PONGER_QUEUE:constant Integer := 2886; 
ERR_SYSTEM_STATE_PONGER_QUEUE_ELM_2:constant Integer := 2881; 
ERR_SYSTEM_STATE_PINGER_2:constant Integer := 2921; 
ERR_SYSTEM_STATE_PONGER_2:constant Integer := 2956; 
function asn1SccSystem_State_IsConstraintValid(val : asn1SccSystem_State) return adaasn1rtl.ASN1_RESULT;

ERR_UPER_ENCODE_SYSTEM_STATE:constant Integer := 2962; 
ERR_UPER_ENCODE_SYSTEM_STATE_PINGER_QUEUE:constant Integer := 2337; 
ERR_UPER_ENCODE_SYSTEM_STATE_PINGER_QUEUE_ELM_2:constant Integer := 2332; 
ERR_UPER_ENCODE_SYSTEM_STATE_PONGER_QUEUE:constant Integer := 2887; 
ERR_UPER_ENCODE_SYSTEM_STATE_PONGER_QUEUE_ELM_2:constant Integer := 2882; 
ERR_UPER_ENCODE_SYSTEM_STATE_PINGER_2:constant Integer := 2922; 
ERR_UPER_ENCODE_SYSTEM_STATE_PONGER_2:constant Integer := 2957; 
asn1SccSystem_State_REQUIRED_BYTES_FOR_ENCODING:constant Integer := 18;
asn1SccSystem_State_REQUIRED_BITS_FOR_ENCODING:constant Integer := 138;

subtype asn1SccSystem_State_uPER_Stream is adaasn1rtl.encoding.Bitstream(asn1SccSystem_State_REQUIRED_BYTES_FOR_ENCODING);

procedure asn1SccSystem_State_Encode (val : asn1SccSystem_State; Stream : out asn1SccSystem_State_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccSystem_State_Encode_aux(val : asn1SccSystem_State; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccSystem_State_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccSystem_State_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccSystem_State_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;

ERR_UPER_DECODE_SYSTEM_STATE:constant Integer := 2963; 
ERR_UPER_DECODE_SYSTEM_STATE_PINGER_QUEUE:constant Integer := 2338; 
ERR_UPER_DECODE_SYSTEM_STATE_PINGER_QUEUE_ELM_2:constant Integer := 2333; 
ERR_UPER_DECODE_SYSTEM_STATE_PONGER_QUEUE:constant Integer := 2888; 
ERR_UPER_DECODE_SYSTEM_STATE_PONGER_QUEUE_ELM_2:constant Integer := 2883; 
ERR_UPER_DECODE_SYSTEM_STATE_PINGER_2:constant Integer := 2923; 
ERR_UPER_DECODE_SYSTEM_STATE_PONGER_2:constant Integer := 2958; 
procedure asn1SccSystem_State_Decode(val: out asn1SccSystem_State; Stream : in out asn1SccSystem_State_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccSystem_State_Decode_aux(val: out asn1SccSystem_State; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccSystem_State_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccSystem_State_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccSystem_State_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;
subtype asn1SccObserver_State_Kind_index_range is Integer range 0..3;
type asn1SccObserver_State_Kind is (asn1Sccregular_state, asn1Sccerror_state, asn1Sccignore_state, asn1Sccsuccess_state) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccObserver_State_Kind use
    (asn1Sccregular_state => 0, asn1Sccerror_state => 1, asn1Sccignore_state => 2, asn1Sccsuccess_state => 3);

function asn1SccObserver_State_Kind_Equal(val1, val2 : asn1SccObserver_State_Kind) return Boolean;

function asn1SccObserver_State_Kind_Init return asn1SccObserver_State_Kind;

ERR_OBSERVER_STATE_KIND:constant Integer := 231; 
function asn1SccObserver_State_Kind_IsConstraintValid(val : asn1SccObserver_State_Kind) return adaasn1rtl.ASN1_RESULT;

ERR_UPER_ENCODE_OBSERVER_STATE_KIND:constant Integer := 232; 
asn1SccObserver_State_Kind_REQUIRED_BYTES_FOR_ENCODING:constant Integer := 1;
asn1SccObserver_State_Kind_REQUIRED_BITS_FOR_ENCODING:constant Integer := 2;

subtype asn1SccObserver_State_Kind_uPER_Stream is adaasn1rtl.encoding.Bitstream(asn1SccObserver_State_Kind_REQUIRED_BYTES_FOR_ENCODING);

procedure asn1SccObserver_State_Kind_Encode (val : asn1SccObserver_State_Kind; Stream : out asn1SccObserver_State_Kind_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccObserver_State_Kind_Encode_aux(val : asn1SccObserver_State_Kind; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccObserver_State_Kind_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccObserver_State_Kind_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccObserver_State_Kind_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;

ERR_UPER_DECODE_OBSERVER_STATE_KIND:constant Integer := 233; 
procedure asn1SccObserver_State_Kind_Decode(val: out asn1SccObserver_State_Kind; Stream : in out asn1SccObserver_State_Kind_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccObserver_State_Kind_Decode_aux(val: out asn1SccObserver_State_Kind; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccObserver_State_Kind_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccObserver_State_Kind_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccObserver_State_Kind_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;
pragma Warnings (Off, "there are no others");
nothing : constant Simulation_DataView.asn1SccObservable_Event:= asn1SccObservable_Event'(kind => no_event_PRESENT, no_event => asn1SccObservable_Event_no_event'(
null record 
    ));
max_events : constant adaasn1rtl.Asn1Int:= 10;
pinger_queue_size : constant adaasn1rtl.Asn1Int:= 2;
ponger_queue_size : constant adaasn1rtl.Asn1Int:= 2; 
pragma Warnings (On, "there are no others");
private
   --# hide Simulation_DataView;


end Simulation_DataView;