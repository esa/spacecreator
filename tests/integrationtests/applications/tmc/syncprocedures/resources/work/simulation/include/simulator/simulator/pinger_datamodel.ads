pragma Style_Checks (Off);
--  Code automatically generated by asn1scc tool
with adaasn1rtl;
pragma Warnings (Off, "unit ""adaasn1rtl.encoding"" is not referenced");
with adaasn1rtl.encoding;
pragma Warnings (On, "unit ""adaasn1rtl.encoding"" is not referenced");


pragma Warnings (Off, "unit ""System"" is not referenced");
with System;
pragma Warnings (On, "unit ""System"" is not referenced");

pragma Warnings (Off, "use clause for package ""adaasn1rtl"" has no effect");
use adaasn1rtl;
pragma Warnings (On, "use clause for package ""adaasn1rtl"" has no effect");

pragma Warnings (Off, "use clause for type");
pragma Warnings (Off, "is already use-visible through package use clause at line");
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
pragma Warnings (On, "use clause for type");
pragma Warnings (On, "is already use-visible through package use clause at line");


pragma Warnings (Off, "no entities of ""SYNCPROCEDURES_DATAVIEW"" are referenced");
pragma Warnings (Off, "use clause for package ""SYNCPROCEDURES_DATAVIEW"" has no effect");
with SYNCPROCEDURES_DATAVIEW; use SYNCPROCEDURES_DATAVIEW;
pragma Warnings (On, "no entities of ""SYNCPROCEDURES_DATAVIEW"" are referenced");
pragma Warnings (On, "use clause for package ""SYNCPROCEDURES_DATAVIEW"" has no effect");



package Pinger_Datamodel with SPARK_Mode
is


subtype asn1SccPinger_States_index_range is Integer range 0..0;
type asn1SccPinger_States is (asn1Sccwait) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccPinger_States use
    (asn1Sccwait => 0);

function asn1SccPinger_States_Equal(val1, val2 : asn1SccPinger_States) return Boolean;

function asn1SccPinger_States_Init return asn1SccPinger_States;

ERR_PINGER_STATES:constant Integer := 1; 
function asn1SccPinger_States_IsConstraintValid(val : asn1SccPinger_States) return adaasn1rtl.ASN1_RESULT;

ERR_UPER_ENCODE_PINGER_STATES:constant Integer := 2; 
asn1SccPinger_States_REQUIRED_BYTES_FOR_ENCODING:constant Integer := 0;
asn1SccPinger_States_REQUIRED_BITS_FOR_ENCODING:constant Integer := 0;

subtype asn1SccPinger_States_uPER_Stream is adaasn1rtl.encoding.Bitstream(1);

procedure asn1SccPinger_States_Encode (val : asn1SccPinger_States; Stream : out asn1SccPinger_States_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccPinger_States_Encode_aux(val : asn1SccPinger_States; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccPinger_States_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccPinger_States_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccPinger_States_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;

ERR_UPER_DECODE_PINGER_STATES:constant Integer := 3; 
procedure asn1SccPinger_States_Decode(val: out asn1SccPinger_States; Stream : in out asn1SccPinger_States_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccPinger_States_Decode_aux(val: out asn1SccPinger_States; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccPinger_States_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccPinger_States_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccPinger_States_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;
-- asn1SccPinger_Context --------------------------------------------

type asn1SccPinger_Context is record 
    state : asn1SccPinger_States;
    init_done : adaasn1rtl.Asn1Boolean;
    pongarg : SYNCPROCEDURES_DATAVIEW.asn1SccMyInteger;
end record;


function asn1SccPinger_Context_Equal(val1, val2 : asn1SccPinger_Context) return Boolean;

function asn1SccPinger_Context_Init return asn1SccPinger_Context;

ERR_PINGER_CONTEXT:constant Integer := 31; 
ERR_PINGER_CONTEXT_STATE_2:constant Integer := 11; 
ERR_PINGER_CONTEXT_INIT_DONE:constant Integer := 16; 
ERR_PINGER_CONTEXT_PONGARG_2:constant Integer := 26; 
function asn1SccPinger_Context_IsConstraintValid(val : asn1SccPinger_Context) return adaasn1rtl.ASN1_RESULT;

ERR_UPER_ENCODE_PINGER_CONTEXT:constant Integer := 32; 
ERR_UPER_ENCODE_PINGER_CONTEXT_STATE_2:constant Integer := 12; 
ERR_UPER_ENCODE_PINGER_CONTEXT_INIT_DONE:constant Integer := 17; 
ERR_UPER_ENCODE_PINGER_CONTEXT_PONGARG_2:constant Integer := 27; 
asn1SccPinger_Context_REQUIRED_BYTES_FOR_ENCODING:constant Integer := 2;
asn1SccPinger_Context_REQUIRED_BITS_FOR_ENCODING:constant Integer := 15;

subtype asn1SccPinger_Context_uPER_Stream is adaasn1rtl.encoding.Bitstream(asn1SccPinger_Context_REQUIRED_BYTES_FOR_ENCODING);

procedure asn1SccPinger_Context_Encode (val : asn1SccPinger_Context; Stream : out asn1SccPinger_Context_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccPinger_Context_Encode_aux(val : asn1SccPinger_Context; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccPinger_Context_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccPinger_Context_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccPinger_Context_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;

ERR_UPER_DECODE_PINGER_CONTEXT:constant Integer := 33; 
ERR_UPER_DECODE_PINGER_CONTEXT_STATE_2:constant Integer := 13; 
ERR_UPER_DECODE_PINGER_CONTEXT_INIT_DONE:constant Integer := 18; 
ERR_UPER_DECODE_PINGER_CONTEXT_PONGARG_2:constant Integer := 28; 
procedure asn1SccPinger_Context_Decode(val: out asn1SccPinger_Context; Stream : in out asn1SccPinger_Context_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccPinger_Context_Decode_aux(val: out asn1SccPinger_Context; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccPinger_Context_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccPinger_Context_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccPinger_Context_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;
pragma Warnings (Off, "there are no others");
 
pragma Warnings (On, "there are no others");
private
   --# hide Pinger_Datamodel;


end Pinger_Datamodel;