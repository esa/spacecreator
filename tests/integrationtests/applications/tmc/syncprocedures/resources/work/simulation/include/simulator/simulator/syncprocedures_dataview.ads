pragma Style_Checks (Off);
--  Code automatically generated by asn1scc tool
with adaasn1rtl;
pragma Warnings (Off, "unit ""adaasn1rtl.encoding"" is not referenced");
with adaasn1rtl.encoding;
pragma Warnings (On, "unit ""adaasn1rtl.encoding"" is not referenced");


pragma Warnings (Off, "unit ""System"" is not referenced");
with System;
pragma Warnings (On, "unit ""System"" is not referenced");

pragma Warnings (Off, "use clause for package ""adaasn1rtl"" has no effect");
use adaasn1rtl;
pragma Warnings (On, "use clause for package ""adaasn1rtl"" has no effect");

pragma Warnings (Off, "use clause for type");
pragma Warnings (Off, "is already use-visible through package use clause at line");
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
pragma Warnings (On, "use clause for type");
pragma Warnings (On, "is already use-visible through package use clause at line");



package SYNCPROCEDURES_DATAVIEW with SPARK_Mode
is


subtype asn1SccMyInteger is adaasn1rtl.Asn1UInt range 0 .. 10000;


function asn1SccMyInteger_Equal(val1, val2 : asn1SccMyInteger) return Boolean;

function asn1SccMyInteger_Init return asn1SccMyInteger;

ERR_MYINTEGER:constant Integer := 71; 
function asn1SccMyInteger_IsConstraintValid(val : asn1SccMyInteger) return adaasn1rtl.ASN1_RESULT;

ERR_UPER_ENCODE_MYINTEGER:constant Integer := 72; 
asn1SccMyInteger_REQUIRED_BYTES_FOR_ENCODING:constant Integer := 2;
asn1SccMyInteger_REQUIRED_BITS_FOR_ENCODING:constant Integer := 14;

subtype asn1SccMyInteger_uPER_Stream is adaasn1rtl.encoding.Bitstream(asn1SccMyInteger_REQUIRED_BYTES_FOR_ENCODING);

procedure asn1SccMyInteger_Encode (val : asn1SccMyInteger; Stream : out asn1SccMyInteger_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccMyInteger_Encode_aux(val : asn1SccMyInteger; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccMyInteger_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccMyInteger_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccMyInteger_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;

ERR_UPER_DECODE_MYINTEGER:constant Integer := 73; 
procedure asn1SccMyInteger_Decode(val: out asn1SccMyInteger; Stream : in out asn1SccMyInteger_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccMyInteger_Decode_aux(val: out asn1SccMyInteger; bs : in out adaasn1rtl.encoding.Bitstream; result : OUT adaasn1rtl.ASN1_RESULT)
with
    Pre => bs.Current_Bit_Pos < Natural'Last - asn1SccMyInteger_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes < Positive'Last / 8
      and then bs.Current_Bit_Pos + asn1SccMyInteger_REQUIRED_BITS_FOR_ENCODING <= bs.Size_In_Bytes * 8,
       Post => 
         (result.Success and bs.Current_Bit_Pos >= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos <= bs'Old.Current_Bit_Pos + asn1SccMyInteger_REQUIRED_BITS_FOR_ENCODING)
       or
         not result.Success
;
pragma Warnings (Off, "there are no others");
 
pragma Warnings (On, "there are no others");
private
   --# hide SYNCPROCEDURES_DATAVIEW;


end SYNCPROCEDURES_DATAVIEW;