pragma Style_Checks (Off);
--  Code automatically generated by asn1scc tool
with adaasn1rtl;


pragma Warnings (Off, "unit ""System"" is not referenced");
with System;
pragma Warnings (On, "unit ""System"" is not referenced");

pragma Warnings (Off, "use clause for package ""adaasn1rtl"" has no effect");
use adaasn1rtl;
pragma Warnings (On, "use clause for package ""adaasn1rtl"" has no effect");

pragma Warnings (Off, "use clause for type");
pragma Warnings (Off, "is already use-visible through package use clause at line");
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
pragma Warnings (On, "use clause for type");
pragma Warnings (On, "is already use-visible through package use clause at line");



package Function_2_Datamodel with SPARK_Mode
is


subtype asn1SccFunction_2_States_index_range is Integer range 0..0;
type asn1SccFunction_2_States is (asn1Sccwait) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccFunction_2_States use
    (asn1Sccwait => 0);

function asn1SccFunction_2_States_Equal(val1, val2 : asn1SccFunction_2_States) return Boolean;

ERR_FUNCTION_2_STATES:constant Integer := 1; -- wait
function asn1SccFunction_2_States_IsConstraintValid(val : asn1SccFunction_2_States) return adaasn1rtl.ASN1_RESULT;

function asn1SccFunction_2_States_Init return asn1SccFunction_2_States;
-- asn1SccFunction_2_Context --------------------------------------------

type asn1SccFunction_2_Context is record 
    state : asn1SccFunction_2_States;
    init_done : adaasn1rtl.Asn1Boolean;
end record;


function asn1SccFunction_2_Context_Equal(val1, val2 : asn1SccFunction_2_Context) return Boolean;

ERR_FUNCTION_2_CONTEXT:constant Integer := 21; -- 
ERR_FUNCTION_2_CONTEXT_STATE_2:constant Integer := 11; -- 
ERR_FUNCTION_2_CONTEXT_INIT_DONE:constant Integer := 16; -- 
function asn1SccFunction_2_Context_IsConstraintValid(val : asn1SccFunction_2_Context) return adaasn1rtl.ASN1_RESULT;

function asn1SccFunction_2_Context_Init return asn1SccFunction_2_Context;
subtype asn1SccFunction_2_Mychoice_Selection_index_range is Integer range 0..1;
type asn1SccFunction_2_Mychoice_Selection is (asn1Scca_present, asn1Sccb_present) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccFunction_2_Mychoice_Selection use
    (asn1Scca_present => 1, asn1Sccb_present => 2);

function asn1SccFunction_2_Mychoice_Selection_Equal(val1, val2 : asn1SccFunction_2_Mychoice_Selection) return Boolean;

ERR_FUNCTION_2_MYCHOICE_SELECTION:constant Integer := 26; -- a-present | b-present
function asn1SccFunction_2_Mychoice_Selection_IsConstraintValid(val : asn1SccFunction_2_Mychoice_Selection) return adaasn1rtl.ASN1_RESULT;

function asn1SccFunction_2_Mychoice_Selection_Init return asn1SccFunction_2_Mychoice_Selection;
pragma Warnings (Off, "there are no others");
 
pragma Warnings (On, "there are no others");
private
   --# hide Function_2_Datamodel;


end Function_2_Datamodel;