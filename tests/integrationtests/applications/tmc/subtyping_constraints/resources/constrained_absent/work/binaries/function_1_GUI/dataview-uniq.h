#ifndef GENERATED_ASN1SCC_dataview_uniq_H
#define GENERATED_ASN1SCC_dataview_uniq_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"
#include "asn1crt_encoding.h"


#ifdef  __cplusplus
extern "C" {
#endif


typedef asn1SccUint MyInteger;


flag MyInteger_Equal(const MyInteger* pVal1, const MyInteger* pVal2);

#define ERR_MYINTEGER		1  /*(0 .. 10)*/
flag MyInteger_IsConstraintValid(const MyInteger* pVal, int* pErrCode);

void MyInteger_Initialize(MyInteger* pVal);

#define ERR_UPER_ENCODE_MYINTEGER		2  /**/
#define MyInteger_REQUIRED_BYTES_FOR_ENCODING       1 
#define MyInteger_REQUIRED_BITS_FOR_ENCODING        4

flag MyInteger_Encode(const MyInteger* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYINTEGER		3  /**/
flag MyInteger_Decode(MyInteger* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MYINTEGER		4  /**/
#define MyInteger_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define MyInteger_REQUIRED_BITS_FOR_ACN_ENCODING        4

flag MyInteger_ACN_Encode(const MyInteger* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MYINTEGER		5  /**/
flag MyInteger_ACN_Decode(MyInteger* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- MySeq --------------------------------------------*/
typedef enum {
    MySeq_validity_valid = 0,
    MySeq_validity_invalid = 1
} MySeq_validity;

// please use the following macros to avoid breaking code.
#define MySeq_validity_valid MySeq_validity_valid
#define MySeq_validity_invalid MySeq_validity_invalid
typedef struct {
    MyInteger inputdata;
    MyInteger outputdata;
    MySeq_validity validity;

} MySeq;

flag MySeq_validity_Equal(const MySeq_validity* pVal1, const MySeq_validity* pVal2);

flag MySeq_Equal(const MySeq* pVal1, const MySeq* pVal2);

#define ERR_MYSEQ_VALIDITY		31  /*valid | invalid*/
flag MySeq_validity_IsConstraintValid(const MySeq_validity* pVal, int* pErrCode);

#define ERR_MYSEQ		36  /**/
#define ERR_MYSEQ_INPUTDATA_2		16  /**/
#define ERR_MYSEQ_OUTPUTDATA_2		26  /**/
flag MySeq_IsConstraintValid(const MySeq* pVal, int* pErrCode);

void MySeq_validity_Initialize(MySeq_validity* pVal);
void MySeq_Initialize(MySeq* pVal);

#define ERR_UPER_ENCODE_MYSEQ		37  /**/
#define ERR_UPER_ENCODE_MYSEQ_INPUTDATA_2		17  /**/
#define ERR_UPER_ENCODE_MYSEQ_OUTPUTDATA_2		27  /**/
#define ERR_UPER_ENCODE_MYSEQ_VALIDITY		32  /**/
#define MySeq_REQUIRED_BYTES_FOR_ENCODING       2 
#define MySeq_REQUIRED_BITS_FOR_ENCODING        9

flag MySeq_Encode(const MySeq* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYSEQ		38  /**/
#define ERR_UPER_DECODE_MYSEQ_INPUTDATA_2		18  /**/
#define ERR_UPER_DECODE_MYSEQ_OUTPUTDATA_2		28  /**/
#define ERR_UPER_DECODE_MYSEQ_VALIDITY		33  /**/
flag MySeq_Decode(MySeq* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MYSEQ		39  /**/
#define ERR_ACN_ENCODE_MYSEQ_INPUTDATA_2		19  /**/
#define ERR_ACN_ENCODE_MYSEQ_OUTPUTDATA_2		29  /**/
#define ERR_ACN_ENCODE_MYSEQ_VALIDITY		34  /**/
#define MySeq_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define MySeq_REQUIRED_BITS_FOR_ACN_ENCODING        9

flag MySeq_ACN_Encode(const MySeq* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MYSEQ		40  /**/
#define ERR_ACN_DECODE_MYSEQ_INPUTDATA_2		20  /**/
#define ERR_ACN_DECODE_MYSEQ_OUTPUTDATA_2		30  /**/
#define ERR_ACN_DECODE_MYSEQ_VALIDITY		35  /**/
flag MySeq_ACN_Decode(MySeq* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- MyChoice --------------------------------------------*/

typedef enum {
    MyChoice_NONE,
    MyChoice_a_PRESENT,
    MyChoice_b_PRESENT 
} MyChoice_selection;


typedef struct {
    MyChoice_selection kind;
    
    union {
        flag a;
        MySeq b;
    } u; 
} MyChoice;

flag MyChoice_Equal(const MyChoice* pVal1, const MyChoice* pVal2);

#define ERR_MYCHOICE		81  /**/
#define ERR_MYCHOICE_A		41  /**/
#define ERR_MYCHOICE_B_2		76  /**/
flag MyChoice_IsConstraintValid(const MyChoice* pVal, int* pErrCode);

void MyChoice_Initialize(MyChoice* pVal);

#define ERR_UPER_ENCODE_MYCHOICE		82  /**/
#define ERR_UPER_ENCODE_MYCHOICE_A		42  /**/
#define ERR_UPER_ENCODE_MYCHOICE_B_2		77  /**/
#define MyChoice_REQUIRED_BYTES_FOR_ENCODING       2 
#define MyChoice_REQUIRED_BITS_FOR_ENCODING        10

flag MyChoice_Encode(const MyChoice* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYCHOICE		83  /**/
#define ERR_UPER_DECODE_MYCHOICE_A		43  /**/
#define ERR_UPER_DECODE_MYCHOICE_B_2		78  /**/
flag MyChoice_Decode(MyChoice* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MYCHOICE		84  /**/
#define ERR_ACN_ENCODE_MYCHOICE_A		44  /**/
#define ERR_ACN_ENCODE_MYCHOICE_B_2		79  /**/
#define MyChoice_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define MyChoice_REQUIRED_BITS_FOR_ACN_ENCODING        10

flag MyChoice_ACN_Encode(const MyChoice* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MYCHOICE		85  /**/
#define ERR_ACN_DECODE_MYCHOICE_A		45  /**/
#define ERR_ACN_DECODE_MYCHOICE_B_2		80  /**/
flag MyChoice_ACN_Decode(MyChoice* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    MyEnum_hello = 0,
    MyEnum_world = 1,
    MyEnum_howareyou = 2
} MyEnum;

// please use the following macros to avoid breaking code.
#define MyEnum_hello MyEnum_hello
#define MyEnum_world MyEnum_world
#define MyEnum_howareyou MyEnum_howareyou

flag MyEnum_Equal(const MyEnum* pVal1, const MyEnum* pVal2);

#define ERR_MYENUM		6  /*hello | world | howareyou*/
flag MyEnum_IsConstraintValid(const MyEnum* pVal, int* pErrCode);

void MyEnum_Initialize(MyEnum* pVal);

#define ERR_UPER_ENCODE_MYENUM		7  /**/
#define MyEnum_REQUIRED_BYTES_FOR_ENCODING       1 
#define MyEnum_REQUIRED_BITS_FOR_ENCODING        2

flag MyEnum_Encode(const MyEnum* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYENUM		8  /**/
flag MyEnum_Decode(MyEnum* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MYENUM		9  /**/
#define MyEnum_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define MyEnum_REQUIRED_BITS_FOR_ACN_ENCODING        2

flag MyEnum_ACN_Encode(const MyEnum* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MYENUM		10  /**/
flag MyEnum_ACN_Decode(MyEnum* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    int nCount; 
    
    MyEnum arr[10];
} MySeqOf;

flag MySeqOf_Equal(const MySeqOf* pVal1, const MySeqOf* pVal2);

#define ERR_MYSEQOF		96  /*(SIZE (0..10))*/
#define ERR_MYSEQOF_ELM_2		91  /**/
flag MySeqOf_IsConstraintValid(const MySeqOf* pVal, int* pErrCode);

void MySeqOf_Initialize(MySeqOf* pVal);

#define ERR_UPER_ENCODE_MYSEQOF		97  /**/
#define ERR_UPER_ENCODE_MYSEQOF_ELM_2		92  /**/
#define MySeqOf_REQUIRED_BYTES_FOR_ENCODING       3 
#define MySeqOf_REQUIRED_BITS_FOR_ENCODING        24

flag MySeqOf_Encode(const MySeqOf* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYSEQOF		98  /**/
#define ERR_UPER_DECODE_MYSEQOF_ELM_2		93  /**/
flag MySeqOf_Decode(MySeqOf* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MYSEQOF		99  /**/
#define ERR_ACN_ENCODE_MYSEQOF_ELM_2		94  /**/
#define MySeqOf_REQUIRED_BYTES_FOR_ACN_ENCODING       3 
#define MySeqOf_REQUIRED_BITS_FOR_ACN_ENCODING        24

flag MySeqOf_ACN_Encode(const MySeqOf* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MYSEQOF		100  /**/
#define ERR_ACN_DECODE_MYSEQOF_ELM_2		95  /**/
flag MySeqOf_ACN_Decode(MySeqOf* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint T_Int32;


flag T_Int32_Equal(const T_Int32* pVal1, const T_Int32* pVal2);

#define ERR_T_INT32		101  /*(-2147483648 .. 2147483647)*/
flag T_Int32_IsConstraintValid(const T_Int32* pVal, int* pErrCode);

void T_Int32_Initialize(T_Int32* pVal);

#define ERR_UPER_ENCODE_T_INT32		102  /**/
#define T_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define T_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag T_Int32_Encode(const T_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT32		103  /**/
flag T_Int32_Decode(T_Int32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT32		104  /**/
#define T_Int32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define T_Int32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag T_Int32_ACN_Encode(const T_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT32		105  /**/
flag T_Int32_ACN_Decode(T_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint T_UInt32;


flag T_UInt32_Equal(const T_UInt32* pVal1, const T_UInt32* pVal2);

#define ERR_T_UINT32		106  /*(0 .. 4294967295)*/
flag T_UInt32_IsConstraintValid(const T_UInt32* pVal, int* pErrCode);

void T_UInt32_Initialize(T_UInt32* pVal);

#define ERR_UPER_ENCODE_T_UINT32		107  /**/
#define T_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define T_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag T_UInt32_Encode(const T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT32		108  /**/
flag T_UInt32_Decode(T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT32		109  /**/
#define T_UInt32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define T_UInt32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag T_UInt32_ACN_Encode(const T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT32		110  /**/
flag T_UInt32_ACN_Decode(T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint T_Int8;


flag T_Int8_Equal(const T_Int8* pVal1, const T_Int8* pVal2);

#define ERR_T_INT8		111  /*(-128 .. 127)*/
flag T_Int8_IsConstraintValid(const T_Int8* pVal, int* pErrCode);

void T_Int8_Initialize(T_Int8* pVal);

#define ERR_UPER_ENCODE_T_INT8		112  /**/
#define T_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag T_Int8_Encode(const T_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT8		113  /**/
flag T_Int8_Decode(T_Int8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT8		114  /**/
#define T_Int8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_Int8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag T_Int8_ACN_Encode(const T_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT8		115  /**/
flag T_Int8_ACN_Decode(T_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint T_UInt8;


flag T_UInt8_Equal(const T_UInt8* pVal1, const T_UInt8* pVal2);

#define ERR_T_UINT8		116  /*(0 .. 255)*/
flag T_UInt8_IsConstraintValid(const T_UInt8* pVal, int* pErrCode);

void T_UInt8_Initialize(T_UInt8* pVal);

#define ERR_UPER_ENCODE_T_UINT8		117  /**/
#define T_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag T_UInt8_Encode(const T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT8		118  /**/
flag T_UInt8_Decode(T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT8		119  /**/
#define T_UInt8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_UInt8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag T_UInt8_ACN_Encode(const T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT8		120  /**/
flag T_UInt8_ACN_Decode(T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag T_Boolean;


flag T_Boolean_Equal(const T_Boolean* pVal1, const T_Boolean* pVal2);

#define ERR_T_BOOLEAN		121  /**/
flag T_Boolean_IsConstraintValid(const T_Boolean* pVal, int* pErrCode);

void T_Boolean_Initialize(T_Boolean* pVal);

#define ERR_UPER_ENCODE_T_BOOLEAN		122  /**/
#define T_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_Boolean_REQUIRED_BITS_FOR_ENCODING        1

flag T_Boolean_Encode(const T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_BOOLEAN		123  /**/
flag T_Boolean_Decode(T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_BOOLEAN		124  /**/
#define T_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_Boolean_ACN_Encode(const T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_BOOLEAN		125  /**/
flag T_Boolean_ACN_Decode(T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- T_Null_Record --------------------------------------------*/
typedef struct {

} T_Null_Record;

flag T_Null_Record_Equal(const T_Null_Record* pVal1, const T_Null_Record* pVal2);

#define ERR_T_NULL_RECORD		126  /**/
flag T_Null_Record_IsConstraintValid(const T_Null_Record* pVal, int* pErrCode);

void T_Null_Record_Initialize(T_Null_Record* pVal);

#define T_Null_Record_REQUIRED_BYTES_FOR_ENCODING       0 
#define T_Null_Record_REQUIRED_BITS_FOR_ENCODING        0

flag T_Null_Record_Encode(const T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag T_Null_Record_Decode(T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);

#define T_Null_Record_REQUIRED_BYTES_FOR_ACN_ENCODING       0 
#define T_Null_Record_REQUIRED_BITS_FOR_ACN_ENCODING        0

flag T_Null_Record_ACN_Encode(const T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag T_Null_Record_ACN_Decode(T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    PID_function_1 = 0,
    PID_function_2 = 1,
    PID_env = 2
} PID;

// please use the following macros to avoid breaking code.
#define PID_function_1 PID_function_1
#define PID_function_2 PID_function_2
#define PID_env PID_env

flag PID_Equal(const PID* pVal1, const PID* pVal2);

#define ERR_PID		131  /*function-1 | function-2 | env*/
flag PID_IsConstraintValid(const PID* pVal, int* pErrCode);

void PID_Initialize(PID* pVal);

#define ERR_UPER_ENCODE_PID		132  /**/
#define PID_REQUIRED_BYTES_FOR_ENCODING       1 
#define PID_REQUIRED_BITS_FOR_ENCODING        2

flag PID_Encode(const PID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PID		133  /**/
flag PID_Decode(PID* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PID		134  /**/
#define PID_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define PID_REQUIRED_BITS_FOR_ACN_ENCODING        2

flag PID_ACN_Encode(const PID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PID		135  /**/
flag PID_ACN_Decode(PID* pVal, BitStream* pBitStrm, int* pErrCode);

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
