#ifndef GENERATED_ASN1SCC_dataview_uniq_H
#define GENERATED_ASN1SCC_dataview_uniq_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"
#include "asn1crt_encoding.h"


#ifdef  __cplusplus
extern "C" {
#endif


typedef asn1SccUint asn1SccMyInteger;


flag asn1SccMyInteger_Equal(const asn1SccMyInteger* pVal1, const asn1SccMyInteger* pVal2);

#define ERR_MYINTEGER		1  /*(0 .. 4)*/
flag asn1SccMyInteger_IsConstraintValid(const asn1SccMyInteger* pVal, int* pErrCode);

void asn1SccMyInteger_Initialize(asn1SccMyInteger* pVal);

#define ERR_UPER_ENCODE_MYINTEGER		2  /**/
#define asn1SccMyInteger_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccMyInteger_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccMyInteger_Encode(const asn1SccMyInteger* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYINTEGER		3  /**/
flag asn1SccMyInteger_Decode(asn1SccMyInteger* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MYINTEGER		4  /**/
#define asn1SccMyInteger_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccMyInteger_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag asn1SccMyInteger_ACN_Encode(const asn1SccMyInteger* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MYINTEGER		5  /**/
flag asn1SccMyInteger_ACN_Decode(asn1SccMyInteger* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccMySeq --------------------------------------------*/
typedef enum {
    MySeq_validity_valid = 0,
    MySeq_validity_invalid = 1
} asn1SccMySeq_validity;

// please use the following macros to avoid breaking code.
#define asn1SccMySeq_validity_valid MySeq_validity_valid
#define asn1SccMySeq_validity_invalid MySeq_validity_invalid
typedef struct {
    asn1SccMyInteger inputdata;
    asn1SccMyInteger outputdata;
    asn1SccMySeq_validity validity;

} asn1SccMySeq;

flag asn1SccMySeq_validity_Equal(const asn1SccMySeq_validity* pVal1, const asn1SccMySeq_validity* pVal2);

flag asn1SccMySeq_Equal(const asn1SccMySeq* pVal1, const asn1SccMySeq* pVal2);

#define ERR_MYSEQ_VALIDITY		31  /*valid | invalid*/
flag asn1SccMySeq_validity_IsConstraintValid(const asn1SccMySeq_validity* pVal, int* pErrCode);

#define ERR_MYSEQ		36  /**/
#define ERR_MYSEQ_INPUTDATA_2		16  /**/
#define ERR_MYSEQ_OUTPUTDATA_2		26  /**/
flag asn1SccMySeq_IsConstraintValid(const asn1SccMySeq* pVal, int* pErrCode);

void asn1SccMySeq_validity_Initialize(asn1SccMySeq_validity* pVal);
void asn1SccMySeq_Initialize(asn1SccMySeq* pVal);

#define ERR_UPER_ENCODE_MYSEQ		37  /**/
#define ERR_UPER_ENCODE_MYSEQ_INPUTDATA_2		17  /**/
#define ERR_UPER_ENCODE_MYSEQ_OUTPUTDATA_2		27  /**/
#define ERR_UPER_ENCODE_MYSEQ_VALIDITY		32  /**/
#define asn1SccMySeq_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccMySeq_REQUIRED_BITS_FOR_ENCODING        7

flag asn1SccMySeq_Encode(const asn1SccMySeq* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYSEQ		38  /**/
#define ERR_UPER_DECODE_MYSEQ_INPUTDATA_2		18  /**/
#define ERR_UPER_DECODE_MYSEQ_OUTPUTDATA_2		28  /**/
#define ERR_UPER_DECODE_MYSEQ_VALIDITY		33  /**/
flag asn1SccMySeq_Decode(asn1SccMySeq* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MYSEQ		39  /**/
#define ERR_ACN_ENCODE_MYSEQ_INPUTDATA_2		19  /**/
#define ERR_ACN_ENCODE_MYSEQ_OUTPUTDATA_2		29  /**/
#define ERR_ACN_ENCODE_MYSEQ_VALIDITY		34  /**/
#define asn1SccMySeq_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccMySeq_REQUIRED_BITS_FOR_ACN_ENCODING        7

flag asn1SccMySeq_ACN_Encode(const asn1SccMySeq* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MYSEQ		40  /**/
#define ERR_ACN_DECODE_MYSEQ_INPUTDATA_2		20  /**/
#define ERR_ACN_DECODE_MYSEQ_OUTPUTDATA_2		30  /**/
#define ERR_ACN_DECODE_MYSEQ_VALIDITY		35  /**/
flag asn1SccMySeq_ACN_Decode(asn1SccMySeq* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccMyChoice --------------------------------------------*/

typedef enum {
    MyChoice_NONE,
    MyChoice_a_PRESENT,
    MyChoice_b_PRESENT 
} asn1SccMyChoice_selection;


typedef struct {
    asn1SccMyChoice_selection kind;
    
    union {
        flag a;
        asn1SccMySeq b;
    } u; 
} asn1SccMyChoice;

flag asn1SccMyChoice_Equal(const asn1SccMyChoice* pVal1, const asn1SccMyChoice* pVal2);

#define ERR_MYCHOICE		81  /**/
#define ERR_MYCHOICE_A		41  /**/
#define ERR_MYCHOICE_B_2		76  /**/
flag asn1SccMyChoice_IsConstraintValid(const asn1SccMyChoice* pVal, int* pErrCode);

void asn1SccMyChoice_Initialize(asn1SccMyChoice* pVal);

#define ERR_UPER_ENCODE_MYCHOICE		82  /**/
#define ERR_UPER_ENCODE_MYCHOICE_A		42  /**/
#define ERR_UPER_ENCODE_MYCHOICE_B_2		77  /**/
#define asn1SccMyChoice_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccMyChoice_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccMyChoice_Encode(const asn1SccMyChoice* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYCHOICE		83  /**/
#define ERR_UPER_DECODE_MYCHOICE_A		43  /**/
#define ERR_UPER_DECODE_MYCHOICE_B_2		78  /**/
flag asn1SccMyChoice_Decode(asn1SccMyChoice* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MYCHOICE		84  /**/
#define ERR_ACN_ENCODE_MYCHOICE_A		44  /**/
#define ERR_ACN_ENCODE_MYCHOICE_B_2		79  /**/
#define asn1SccMyChoice_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccMyChoice_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag asn1SccMyChoice_ACN_Encode(const asn1SccMyChoice* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MYCHOICE		85  /**/
#define ERR_ACN_DECODE_MYCHOICE_A		45  /**/
#define ERR_ACN_DECODE_MYCHOICE_B_2		80  /**/
flag asn1SccMyChoice_ACN_Decode(asn1SccMyChoice* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    MyEnum_hello = 0,
    MyEnum_world = 1,
    MyEnum_howareyou = 2
} asn1SccMyEnum;

// please use the following macros to avoid breaking code.
#define asn1SccMyEnum_hello MyEnum_hello
#define asn1SccMyEnum_world MyEnum_world
#define asn1SccMyEnum_howareyou MyEnum_howareyou

flag asn1SccMyEnum_Equal(const asn1SccMyEnum* pVal1, const asn1SccMyEnum* pVal2);

#define ERR_MYENUM		6  /*hello | world | howareyou*/
flag asn1SccMyEnum_IsConstraintValid(const asn1SccMyEnum* pVal, int* pErrCode);

void asn1SccMyEnum_Initialize(asn1SccMyEnum* pVal);

#define ERR_UPER_ENCODE_MYENUM		7  /**/
#define asn1SccMyEnum_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccMyEnum_REQUIRED_BITS_FOR_ENCODING        2

flag asn1SccMyEnum_Encode(const asn1SccMyEnum* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYENUM		8  /**/
flag asn1SccMyEnum_Decode(asn1SccMyEnum* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MYENUM		9  /**/
#define asn1SccMyEnum_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccMyEnum_REQUIRED_BITS_FOR_ACN_ENCODING        2

flag asn1SccMyEnum_ACN_Encode(const asn1SccMyEnum* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MYENUM		10  /**/
flag asn1SccMyEnum_ACN_Decode(asn1SccMyEnum* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    int nCount; 
    
    asn1SccMyEnum arr[10];
} asn1SccMySeqOf;

flag asn1SccMySeqOf_Equal(const asn1SccMySeqOf* pVal1, const asn1SccMySeqOf* pVal2);

#define ERR_MYSEQOF		96  /*(SIZE (0..10))*/
#define ERR_MYSEQOF_ELM_2		91  /**/
flag asn1SccMySeqOf_IsConstraintValid(const asn1SccMySeqOf* pVal, int* pErrCode);

void asn1SccMySeqOf_Initialize(asn1SccMySeqOf* pVal);

#define ERR_UPER_ENCODE_MYSEQOF		97  /**/
#define ERR_UPER_ENCODE_MYSEQOF_ELM_2		92  /**/
#define asn1SccMySeqOf_REQUIRED_BYTES_FOR_ENCODING       3 
#define asn1SccMySeqOf_REQUIRED_BITS_FOR_ENCODING        24

flag asn1SccMySeqOf_Encode(const asn1SccMySeqOf* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYSEQOF		98  /**/
#define ERR_UPER_DECODE_MYSEQOF_ELM_2		93  /**/
flag asn1SccMySeqOf_Decode(asn1SccMySeqOf* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MYSEQOF		99  /**/
#define ERR_ACN_ENCODE_MYSEQOF_ELM_2		94  /**/
#define asn1SccMySeqOf_REQUIRED_BYTES_FOR_ACN_ENCODING       3 
#define asn1SccMySeqOf_REQUIRED_BITS_FOR_ACN_ENCODING        24

flag asn1SccMySeqOf_ACN_Encode(const asn1SccMySeqOf* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MYSEQOF		100  /**/
#define ERR_ACN_DECODE_MYSEQOF_ELM_2		95  /**/
flag asn1SccMySeqOf_ACN_Decode(asn1SccMySeqOf* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int32;


flag asn1SccT_Int32_Equal(const asn1SccT_Int32* pVal1, const asn1SccT_Int32* pVal2);

#define ERR_T_INT32		101  /*(-2147483648 .. 2147483647)*/
flag asn1SccT_Int32_IsConstraintValid(const asn1SccT_Int32* pVal, int* pErrCode);

void asn1SccT_Int32_Initialize(asn1SccT_Int32* pVal);

#define ERR_UPER_ENCODE_T_INT32		102  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_Int32_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT32		103  /**/
flag asn1SccT_Int32_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT32		104  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccT_Int32_ACN_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT32		105  /**/
flag asn1SccT_Int32_ACN_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt32;


flag asn1SccT_UInt32_Equal(const asn1SccT_UInt32* pVal1, const asn1SccT_UInt32* pVal2);

#define ERR_T_UINT32		106  /*(0 .. 4294967295)*/
flag asn1SccT_UInt32_IsConstraintValid(const asn1SccT_UInt32* pVal, int* pErrCode);

void asn1SccT_UInt32_Initialize(asn1SccT_UInt32* pVal);

#define ERR_UPER_ENCODE_T_UINT32		107  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_UInt32_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT32		108  /**/
flag asn1SccT_UInt32_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT32		109  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccT_UInt32_ACN_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT32		110  /**/
flag asn1SccT_UInt32_ACN_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int8;


flag asn1SccT_Int8_Equal(const asn1SccT_Int8* pVal1, const asn1SccT_Int8* pVal2);

#define ERR_T_INT8		111  /*(-128 .. 127)*/
flag asn1SccT_Int8_IsConstraintValid(const asn1SccT_Int8* pVal, int* pErrCode);

void asn1SccT_Int8_Initialize(asn1SccT_Int8* pVal);

#define ERR_UPER_ENCODE_T_INT8		112  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_Int8_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT8		113  /**/
flag asn1SccT_Int8_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT8		114  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag asn1SccT_Int8_ACN_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT8		115  /**/
flag asn1SccT_Int8_ACN_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt8;


flag asn1SccT_UInt8_Equal(const asn1SccT_UInt8* pVal1, const asn1SccT_UInt8* pVal2);

#define ERR_T_UINT8		116  /*(0 .. 255)*/
flag asn1SccT_UInt8_IsConstraintValid(const asn1SccT_UInt8* pVal, int* pErrCode);

void asn1SccT_UInt8_Initialize(asn1SccT_UInt8* pVal);

#define ERR_UPER_ENCODE_T_UINT8		117  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_UInt8_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT8		118  /**/
flag asn1SccT_UInt8_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT8		119  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag asn1SccT_UInt8_ACN_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT8		120  /**/
flag asn1SccT_UInt8_ACN_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag asn1SccT_Boolean;


flag asn1SccT_Boolean_Equal(const asn1SccT_Boolean* pVal1, const asn1SccT_Boolean* pVal2);

#define ERR_T_BOOLEAN		121  /**/
flag asn1SccT_Boolean_IsConstraintValid(const asn1SccT_Boolean* pVal, int* pErrCode);

void asn1SccT_Boolean_Initialize(asn1SccT_Boolean* pVal);

#define ERR_UPER_ENCODE_T_BOOLEAN		122  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccT_Boolean_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_BOOLEAN		123  /**/
flag asn1SccT_Boolean_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_BOOLEAN		124  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag asn1SccT_Boolean_ACN_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_BOOLEAN		125  /**/
flag asn1SccT_Boolean_ACN_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccT_Null_Record --------------------------------------------*/
typedef struct {

} asn1SccT_Null_Record;

flag asn1SccT_Null_Record_Equal(const asn1SccT_Null_Record* pVal1, const asn1SccT_Null_Record* pVal2);

#define ERR_T_NULL_RECORD		126  /**/
flag asn1SccT_Null_Record_IsConstraintValid(const asn1SccT_Null_Record* pVal, int* pErrCode);

void asn1SccT_Null_Record_Initialize(asn1SccT_Null_Record* pVal);

#define asn1SccT_Null_Record_REQUIRED_BYTES_FOR_ENCODING       0 
#define asn1SccT_Null_Record_REQUIRED_BITS_FOR_ENCODING        0

flag asn1SccT_Null_Record_Encode(const asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag asn1SccT_Null_Record_Decode(asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccT_Null_Record_REQUIRED_BYTES_FOR_ACN_ENCODING       0 
#define asn1SccT_Null_Record_REQUIRED_BITS_FOR_ACN_ENCODING        0

flag asn1SccT_Null_Record_ACN_Encode(const asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag asn1SccT_Null_Record_ACN_Decode(asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    PID_function_1 = 0,
    PID_function_2 = 1,
    PID_env = 2
} asn1SccPID;

// please use the following macros to avoid breaking code.
#define asn1SccPID_function_1 PID_function_1
#define asn1SccPID_function_2 PID_function_2
#define asn1SccPID_env PID_env

flag asn1SccPID_Equal(const asn1SccPID* pVal1, const asn1SccPID* pVal2);

#define ERR_PID		131  /*function-1 | function-2 | env*/
flag asn1SccPID_IsConstraintValid(const asn1SccPID* pVal, int* pErrCode);

void asn1SccPID_Initialize(asn1SccPID* pVal);

#define ERR_UPER_ENCODE_PID		132  /**/
#define asn1SccPID_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccPID_REQUIRED_BITS_FOR_ENCODING        2

flag asn1SccPID_Encode(const asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PID		133  /**/
flag asn1SccPID_Decode(asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PID		134  /**/
#define asn1SccPID_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccPID_REQUIRED_BITS_FOR_ACN_ENCODING        2

flag asn1SccPID_ACN_Encode(const asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PID		135  /**/
flag asn1SccPID_ACN_Decode(asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode);

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
