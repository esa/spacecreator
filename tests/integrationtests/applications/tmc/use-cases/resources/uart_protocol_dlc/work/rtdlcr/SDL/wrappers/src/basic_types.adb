pragma Style_Checks (Off);
--  Code automatically generated by asn1scc tool
pragma Warnings (Off, "redundant with clause in body");
pragma Warnings (On, "redundant with clause in body");

package body Basic_Types with SPARK_Mode is



pragma Warnings (Off, "condition can only be False if invalid values present");
pragma Warnings (Off, "condition can only be True if invalid values present");


function asn1SccUINT40_Equal (val1, val2 :  asn1SccUINT40) return Boolean
is

begin
	return val1 = val2;

end asn1SccUINT40_Equal;

function asn1SccUINT40_IsConstraintValid(val : asn1SccUINT40) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (val <= 1099511627775);
    ret.ErrorCode := (if ret.Success then 0 else ERR_UINT40);
    return ret;
end asn1SccUINT40_IsConstraintValid;

function asn1SccUINT40_Init return asn1SccUINT40
is
    val: asn1SccUINT40;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccUINT40_Init;



function asn1SccUINT32_Equal (val1, val2 :  asn1SccUINT32) return Boolean
is

begin
	return val1 = val2;

end asn1SccUINT32_Equal;

function asn1SccUINT32_IsConstraintValid(val : asn1SccUINT32) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (val <= 4294967295);
    ret.ErrorCode := (if ret.Success then 0 else ERR_UINT32);
    return ret;
end asn1SccUINT32_IsConstraintValid;

function asn1SccUINT32_Init return asn1SccUINT32
is
    val: asn1SccUINT32;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccUINT32_Init;



function asn1SccUINT24_Equal (val1, val2 :  asn1SccUINT24) return Boolean
is

begin
	return val1 = val2;

end asn1SccUINT24_Equal;

function asn1SccUINT24_IsConstraintValid(val : asn1SccUINT24) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (val <= 16777215);
    ret.ErrorCode := (if ret.Success then 0 else ERR_UINT24);
    return ret;
end asn1SccUINT24_IsConstraintValid;

function asn1SccUINT24_Init return asn1SccUINT24
is
    val: asn1SccUINT24;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccUINT24_Init;



function asn1SccUINT16_Equal (val1, val2 :  asn1SccUINT16) return Boolean
is

begin
	return val1 = val2;

end asn1SccUINT16_Equal;

function asn1SccUINT16_IsConstraintValid(val : asn1SccUINT16) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (val <= 65535);
    ret.ErrorCode := (if ret.Success then 0 else ERR_UINT16);
    return ret;
end asn1SccUINT16_IsConstraintValid;

function asn1SccUINT16_Init return asn1SccUINT16
is
    val: asn1SccUINT16;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccUINT16_Init;



function asn1SccUINT14_Equal (val1, val2 :  asn1SccUINT14) return Boolean
is

begin
	return val1 = val2;

end asn1SccUINT14_Equal;

function asn1SccUINT14_IsConstraintValid(val : asn1SccUINT14) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (val <= 16383);
    ret.ErrorCode := (if ret.Success then 0 else ERR_UINT14);
    return ret;
end asn1SccUINT14_IsConstraintValid;

function asn1SccUINT14_Init return asn1SccUINT14
is
    val: asn1SccUINT14;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccUINT14_Init;



function asn1SccUINT12_Equal (val1, val2 :  asn1SccUINT12) return Boolean
is

begin
	return val1 = val2;

end asn1SccUINT12_Equal;

function asn1SccUINT12_IsConstraintValid(val : asn1SccUINT12) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (val <= 4095);
    ret.ErrorCode := (if ret.Success then 0 else ERR_UINT12);
    return ret;
end asn1SccUINT12_IsConstraintValid;

function asn1SccUINT12_Init return asn1SccUINT12
is
    val: asn1SccUINT12;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccUINT12_Init;



function asn1SccUINT11_Equal (val1, val2 :  asn1SccUINT11) return Boolean
is

begin
	return val1 = val2;

end asn1SccUINT11_Equal;

function asn1SccUINT11_IsConstraintValid(val : asn1SccUINT11) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (val <= 2047);
    ret.ErrorCode := (if ret.Success then 0 else ERR_UINT11);
    return ret;
end asn1SccUINT11_IsConstraintValid;

function asn1SccUINT11_Init return asn1SccUINT11
is
    val: asn1SccUINT11;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccUINT11_Init;



function asn1SccUINT10_Equal (val1, val2 :  asn1SccUINT10) return Boolean
is

begin
	return val1 = val2;

end asn1SccUINT10_Equal;

function asn1SccUINT10_IsConstraintValid(val : asn1SccUINT10) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (val <= 1023);
    ret.ErrorCode := (if ret.Success then 0 else ERR_UINT10);
    return ret;
end asn1SccUINT10_IsConstraintValid;

function asn1SccUINT10_Init return asn1SccUINT10
is
    val: asn1SccUINT10;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccUINT10_Init;



function asn1SccUINT8_Equal (val1, val2 :  asn1SccUINT8) return Boolean
is

begin
	return val1 = val2;

end asn1SccUINT8_Equal;

function asn1SccUINT8_IsConstraintValid(val : asn1SccUINT8) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (val <= 255);
    ret.ErrorCode := (if ret.Success then 0 else ERR_UINT8);
    return ret;
end asn1SccUINT8_IsConstraintValid;

function asn1SccUINT8_Init return asn1SccUINT8
is
    val: asn1SccUINT8;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccUINT8_Init;



function asn1SccUINT7_Equal (val1, val2 :  asn1SccUINT7) return Boolean
is

begin
	return val1 = val2;

end asn1SccUINT7_Equal;

function asn1SccUINT7_IsConstraintValid(val : asn1SccUINT7) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (val <= 127);
    ret.ErrorCode := (if ret.Success then 0 else ERR_UINT7);
    return ret;
end asn1SccUINT7_IsConstraintValid;

function asn1SccUINT7_Init return asn1SccUINT7
is
    val: asn1SccUINT7;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccUINT7_Init;



function asn1SccUINT6_Equal (val1, val2 :  asn1SccUINT6) return Boolean
is

begin
	return val1 = val2;

end asn1SccUINT6_Equal;

function asn1SccUINT6_IsConstraintValid(val : asn1SccUINT6) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (val <= 63);
    ret.ErrorCode := (if ret.Success then 0 else ERR_UINT6);
    return ret;
end asn1SccUINT6_IsConstraintValid;

function asn1SccUINT6_Init return asn1SccUINT6
is
    val: asn1SccUINT6;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccUINT6_Init;



function asn1SccUINT5_Equal (val1, val2 :  asn1SccUINT5) return Boolean
is

begin
	return val1 = val2;

end asn1SccUINT5_Equal;

function asn1SccUINT5_IsConstraintValid(val : asn1SccUINT5) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (val <= 31);
    ret.ErrorCode := (if ret.Success then 0 else ERR_UINT5);
    return ret;
end asn1SccUINT5_IsConstraintValid;

function asn1SccUINT5_Init return asn1SccUINT5
is
    val: asn1SccUINT5;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccUINT5_Init;



function asn1SccUINT4_Equal (val1, val2 :  asn1SccUINT4) return Boolean
is

begin
	return val1 = val2;

end asn1SccUINT4_Equal;

function asn1SccUINT4_IsConstraintValid(val : asn1SccUINT4) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (val <= 15);
    ret.ErrorCode := (if ret.Success then 0 else ERR_UINT4);
    return ret;
end asn1SccUINT4_IsConstraintValid;

function asn1SccUINT4_Init return asn1SccUINT4
is
    val: asn1SccUINT4;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccUINT4_Init;



function asn1SccUINT3_Equal (val1, val2 :  asn1SccUINT3) return Boolean
is

begin
	return val1 = val2;

end asn1SccUINT3_Equal;

function asn1SccUINT3_IsConstraintValid(val : asn1SccUINT3) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (val <= 7);
    ret.ErrorCode := (if ret.Success then 0 else ERR_UINT3);
    return ret;
end asn1SccUINT3_IsConstraintValid;

function asn1SccUINT3_Init return asn1SccUINT3
is
    val: asn1SccUINT3;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccUINT3_Init;



function asn1SccUINT2_Equal (val1, val2 :  asn1SccUINT2) return Boolean
is

begin
	return val1 = val2;

end asn1SccUINT2_Equal;

function asn1SccUINT2_IsConstraintValid(val : asn1SccUINT2) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (val <= 3);
    ret.ErrorCode := (if ret.Success then 0 else ERR_UINT2);
    return ret;
end asn1SccUINT2_IsConstraintValid;

function asn1SccUINT2_Init return asn1SccUINT2
is
    val: asn1SccUINT2;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccUINT2_Init;



function asn1SccUINT1_Equal (val1, val2 :  asn1SccUINT1) return Boolean
is

begin
	return val1 = val2;

end asn1SccUINT1_Equal;

function asn1SccUINT1_IsConstraintValid(val : asn1SccUINT1) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (val <= 1);
    ret.ErrorCode := (if ret.Success then 0 else ERR_UINT1);
    return ret;
end asn1SccUINT1_IsConstraintValid;

function asn1SccUINT1_Init return asn1SccUINT1
is
    val: asn1SccUINT1;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccUINT1_Init;



function asn1SccT_Bit_Equal (val1, val2 :  asn1SccT_Bit) return Boolean
is

begin
	return val1 = val2;

end asn1SccT_Bit_Equal;

function asn1SccT_Bit_IsConstraintValid(val : asn1SccT_Bit) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret := asn1SccUINT1_IsConstraintValid(val);
    return ret;
end asn1SccT_Bit_IsConstraintValid;

function asn1SccT_Bit_Init return asn1SccT_Bit
is
    val: asn1SccT_Bit;
begin
    val := asn1SccUINT1_Init;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccT_Bit_Init;



function asn1SccINT16_Equal (val1, val2 :  asn1SccINT16) return Boolean
is

begin
	return val1 = val2;

end asn1SccINT16_Equal;

function asn1SccINT16_IsConstraintValid(val : asn1SccINT16) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := ((-32768 <= val) AND (val <= 32767));
    ret.ErrorCode := (if ret.Success then 0 else ERR_INT16);
    return ret;
end asn1SccINT16_IsConstraintValid;

function asn1SccINT16_Init return asn1SccINT16
is
    val: asn1SccINT16;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccINT16_Init;



function asn1SccINT32_Equal (val1, val2 :  asn1SccINT32) return Boolean
is

begin
	return val1 = val2;

end asn1SccINT32_Equal;

function asn1SccINT32_IsConstraintValid(val : asn1SccINT32) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := ((-2147483648 <= val) AND (val <= 2147483647));
    ret.ErrorCode := (if ret.Success then 0 else ERR_INT32);
    return ret;
end asn1SccINT32_IsConstraintValid;

function asn1SccINT32_Init return asn1SccINT32
is
    val: asn1SccINT32;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccINT32_Init;



function asn1SccINT24_Equal (val1, val2 :  asn1SccINT24) return Boolean
is

begin
	return val1 = val2;

end asn1SccINT24_Equal;

function asn1SccINT24_IsConstraintValid(val : asn1SccINT24) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := ((-8388608 <= val) AND (val <= 8388607));
    ret.ErrorCode := (if ret.Success then 0 else ERR_INT24);
    return ret;
end asn1SccINT24_IsConstraintValid;

function asn1SccINT24_Init return asn1SccINT24
is
    val: asn1SccINT24;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccINT24_Init;



function asn1SccT_OCTET_Equal (val1, val2 :  asn1SccT_OCTET) return Boolean
is

begin
	return val1.Data = val2.Data;

end asn1SccT_OCTET_Equal;

function asn1SccT_OCTET_IsConstraintValid(val : asn1SccT_OCTET) return adaasn1rtl.ASN1_RESULT
is
    pragma Unreferenced (val);
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    return ret;
end asn1SccT_OCTET_IsConstraintValid;

function asn1SccT_OCTET_Init return asn1SccT_OCTET
is
    val: asn1SccT_OCTET;
    i1:Integer;
begin
    i1 := 1;
    while i1<= 1 loop
        --  commented because it casues this warning    
        --  warning: condition can only be False if invalid values present
        pragma Loop_Invariant (i1 >=1 and i1<=1);
        val.Data(i1) := adaasn1rtl.Asn1Byte(0);
        i1 := i1 + 1;
    end loop;

	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccT_OCTET_Init;


pragma Warnings (On, "condition can only be False if invalid values present");
pragma Warnings (On, "condition can only be True if invalid values present");

 
end Basic_Types;