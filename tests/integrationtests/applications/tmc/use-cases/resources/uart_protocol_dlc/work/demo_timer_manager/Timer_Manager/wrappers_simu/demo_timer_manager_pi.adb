-- DO NOT EDIT THIS FILE, IT WILL BE OVERWRITTEN DURING THE BUILD
-- (Generated by TASTE/Kazoo - $TOOL_SRC/kazoo/templates/glue/language_wrappers/simu_pi_adb/function.tmplt)
package body Demo_Timer_Manager_PI is

   procedure Update_States_For_Synchronous_Calls (Global_State : asn1SccSystem_State) is
   begin
      --  No synchronous RIs are connected to this function
      null;
   end Update_States_For_Synchronous_Calls;

   procedure Update_Global_State_After_Synchronous_Calls (Global_State : in out asn1SccSystem_State)  is
   begin
      --  No synchronous RIs are connected to this function
      null;
   end Update_Global_State_After_Synchronous_Calls;

   procedure Startup (Global_State : in out asn1SccSystem_State) is
   begin
      --  Initialize the global state after startup function has run
      null;
   end Startup;

   procedure Continuous_Signals (Global_State : in out asn1SccSystem_State) is
   begin
     null;
   end Continuous_Signals;

   --  Provided interfaces
   procedure Reset_Rtdlcr_Frametimer (Global_State : in out asn1SccSystem_State) is
   begin
      -- Set the current context (provided by the simulation API)
      Demo_Timer_Manager.Ctxt := Global_State.Demo_Timer_Manager;
      --  If user code calls synchronous RIs, set their state too
      Update_States_For_Synchronous_Calls (Global_State);
      Demo_Timer_Manager.Reset_Rtdlcr_Frametimer;
      -- Update the global state
      Global_State.Demo_Timer_Manager := Demo_Timer_Manager.Ctxt;
      --  If user code called synchronous RIs, populate their state
      Update_Global_State_After_Synchronous_Calls (Global_State);
   end Reset_Rtdlcr_Frametimer;
   
   
   procedure Set_Rtdlcr_Frametimer
      (Global_State : in out asn1SccSystem_State;
      Val : in out asn1SccT_Uint32) is
   begin
      -- Set the current context (provided by the simulation API)
      Demo_Timer_Manager.Ctxt := Global_State.Demo_Timer_Manager;
      --  If user code calls synchronous RIs, set their state too
      Update_States_For_Synchronous_Calls (Global_State);
      Demo_Timer_Manager.Set_Rtdlcr_Frametimer
         (Val => Val);
      -- Update the global state
      Global_State.Demo_Timer_Manager := Demo_Timer_Manager.Ctxt;
      --  If user code called synchronous RIs, populate their state
      Update_Global_State_After_Synchronous_Calls (Global_State);
   end Set_Rtdlcr_Frametimer;
   
   
   procedure Tick (Global_State : in out asn1SccSystem_State) is
   begin
      -- Set the current context (provided by the simulation API)
      Demo_Timer_Manager.Ctxt := Global_State.Demo_Timer_Manager;
      --  If user code calls synchronous RIs, set their state too
      Update_States_For_Synchronous_Calls (Global_State);
      Demo_Timer_Manager.Tick;
      -- Update the global state
      Global_State.Demo_Timer_Manager := Demo_Timer_Manager.Ctxt;
      --  If user code called synchronous RIs, populate their state
      Update_Global_State_After_Synchronous_Calls (Global_State);
   end Tick;

end Demo_Timer_Manager_PI;
