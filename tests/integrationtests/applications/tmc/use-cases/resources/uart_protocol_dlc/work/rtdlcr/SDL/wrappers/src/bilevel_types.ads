pragma Style_Checks (Off);
--  Code automatically generated by asn1scc tool
with adaasn1rtl;


pragma Warnings (Off, "unit ""System"" is not referenced");
with System;
pragma Warnings (On, "unit ""System"" is not referenced");

pragma Warnings (Off, "use clause for package ""adaasn1rtl"" has no effect");
use adaasn1rtl;
pragma Warnings (On, "use clause for package ""adaasn1rtl"" has no effect");

pragma Warnings (Off, "use clause for type");
pragma Warnings (Off, "is already use-visible through package use clause at line");
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
pragma Warnings (On, "use clause for type");
pragma Warnings (On, "is already use-visible through package use clause at line");



package Bilevel_Types with SPARK_Mode
is


subtype asn1SccT_OnOffState_index_range is Integer range 0..1;
type asn1SccT_OnOffState is (asn1Sccoff, asn1Sccon) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccT_OnOffState use
    (asn1Sccoff => 0, asn1Sccon => 1);

function asn1SccT_OnOffState_Equal(val1, val2 : asn1SccT_OnOffState) return Boolean;

ERR_T_ONOFFSTATE:constant Integer := 111; -- off | on
function asn1SccT_OnOffState_IsConstraintValid(val : asn1SccT_OnOffState) return adaasn1rtl.ASN1_RESULT;

function asn1SccT_OnOffState_Init return asn1SccT_OnOffState;
subtype asn1SccT_NominalRedundantState_index_range is Integer range 0..1;
type asn1SccT_NominalRedundantState is (asn1Sccredundant, asn1Sccnominal) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccT_NominalRedundantState use
    (asn1Sccredundant => 0, asn1Sccnominal => 1);

function asn1SccT_NominalRedundantState_Equal(val1, val2 : asn1SccT_NominalRedundantState) return Boolean;

ERR_T_NOMINALREDUNDANTSTATE:constant Integer := 116; -- redundant | nominal
function asn1SccT_NominalRedundantState_IsConstraintValid(val : asn1SccT_NominalRedundantState) return adaasn1rtl.ASN1_RESULT;

function asn1SccT_NominalRedundantState_Init return asn1SccT_NominalRedundantState;
subtype asn1SccT_ConnectionState_index_range is Integer range 0..1;
type asn1SccT_ConnectionState is (asn1Sccdisconnected, asn1Sccconnected) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccT_ConnectionState use
    (asn1Sccdisconnected => 0, asn1Sccconnected => 1);

function asn1SccT_ConnectionState_Equal(val1, val2 : asn1SccT_ConnectionState) return Boolean;

ERR_T_CONNECTIONSTATE:constant Integer := 121; -- disconnected | connected
function asn1SccT_ConnectionState_IsConstraintValid(val : asn1SccT_ConnectionState) return adaasn1rtl.ASN1_RESULT;

function asn1SccT_ConnectionState_Init return asn1SccT_ConnectionState;
subtype asn1SccT_SwitchState_index_range is Integer range 0..1;
type asn1SccT_SwitchState is (asn1Sccswitch_open, asn1Sccswitch_closed) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccT_SwitchState use
    (asn1Sccswitch_open => 0, asn1Sccswitch_closed => 1);

function asn1SccT_SwitchState_Equal(val1, val2 : asn1SccT_SwitchState) return Boolean;

ERR_T_SWITCHSTATE:constant Integer := 126; -- switch-open | switch-closed
function asn1SccT_SwitchState_IsConstraintValid(val : asn1SccT_SwitchState) return adaasn1rtl.ASN1_RESULT;

function asn1SccT_SwitchState_Init return asn1SccT_SwitchState;
subtype asn1SccT_FaultState_index_range is Integer range 0..1;
type asn1SccT_FaultState is (asn1Sccfault, asn1Sccok) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccT_FaultState use
    (asn1Sccfault => 0, asn1Sccok => 1);

function asn1SccT_FaultState_Equal(val1, val2 : asn1SccT_FaultState) return Boolean;

ERR_T_FAULTSTATE:constant Integer := 131; -- fault | ok
function asn1SccT_FaultState_IsConstraintValid(val : asn1SccT_FaultState) return adaasn1rtl.ASN1_RESULT;

function asn1SccT_FaultState_Init return asn1SccT_FaultState;
subtype asn1SccT_SelectionState_index_range is Integer range 0..1;
type asn1SccT_SelectionState is (asn1Sccnot_selected, asn1Sccselected) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccT_SelectionState use
    (asn1Sccnot_selected => 0, asn1Sccselected => 1);

function asn1SccT_SelectionState_Equal(val1, val2 : asn1SccT_SelectionState) return Boolean;

ERR_T_SELECTIONSTATE:constant Integer := 136; -- not-selected | selected
function asn1SccT_SelectionState_IsConstraintValid(val : asn1SccT_SelectionState) return adaasn1rtl.ASN1_RESULT;

function asn1SccT_SelectionState_Init return asn1SccT_SelectionState;
subtype asn1SccT_PresenceState_index_range is Integer range 0..1;
type asn1SccT_PresenceState is (asn1Sccabsent, asn1Sccpresent) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccT_PresenceState use
    (asn1Sccabsent => 0, asn1Sccpresent => 1);

function asn1SccT_PresenceState_Equal(val1, val2 : asn1SccT_PresenceState) return Boolean;

ERR_T_PRESENCESTATE:constant Integer := 141; -- absent | present
function asn1SccT_PresenceState_IsConstraintValid(val : asn1SccT_PresenceState) return adaasn1rtl.ASN1_RESULT;

function asn1SccT_PresenceState_Init return asn1SccT_PresenceState;
subtype asn1SccT_ForwardBackwardState_index_range is Integer range 0..1;
type asn1SccT_ForwardBackwardState is (asn1Sccbackward, asn1Sccforward) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccT_ForwardBackwardState use
    (asn1Sccbackward => 0, asn1Sccforward => 1);

function asn1SccT_ForwardBackwardState_Equal(val1, val2 : asn1SccT_ForwardBackwardState) return Boolean;

ERR_T_FORWARDBACKWARDSTATE:constant Integer := 146; -- backward | forward
function asn1SccT_ForwardBackwardState_IsConstraintValid(val : asn1SccT_ForwardBackwardState) return adaasn1rtl.ASN1_RESULT;

function asn1SccT_ForwardBackwardState_Init return asn1SccT_ForwardBackwardState;
subtype asn1SccT_LeftRightState_index_range is Integer range 0..1;
type asn1SccT_LeftRightState is (asn1Sccleft, asn1Sccright) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccT_LeftRightState use
    (asn1Sccleft => 0, asn1Sccright => 1);

function asn1SccT_LeftRightState_Equal(val1, val2 : asn1SccT_LeftRightState) return Boolean;

ERR_T_LEFTRIGHTSTATE:constant Integer := 151; -- left | right
function asn1SccT_LeftRightState_IsConstraintValid(val : asn1SccT_LeftRightState) return adaasn1rtl.ASN1_RESULT;

function asn1SccT_LeftRightState_Init return asn1SccT_LeftRightState;
subtype asn1SccT_UsedUnusedState_index_range is Integer range 0..1;
type asn1SccT_UsedUnusedState is (asn1Sccunused, asn1Sccused) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccT_UsedUnusedState use
    (asn1Sccunused => 0, asn1Sccused => 1);

function asn1SccT_UsedUnusedState_Equal(val1, val2 : asn1SccT_UsedUnusedState) return Boolean;

ERR_T_USEDUNUSEDSTATE:constant Integer := 156; -- unused | used
function asn1SccT_UsedUnusedState_IsConstraintValid(val : asn1SccT_UsedUnusedState) return adaasn1rtl.ASN1_RESULT;

function asn1SccT_UsedUnusedState_Init return asn1SccT_UsedUnusedState;
subtype asn1SccT_MovingStillState_index_range is Integer range 0..1;
type asn1SccT_MovingStillState is (asn1Sccstationary, asn1Sccmoving) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccT_MovingStillState use
    (asn1Sccstationary => 0, asn1Sccmoving => 1);

function asn1SccT_MovingStillState_Equal(val1, val2 : asn1SccT_MovingStillState) return Boolean;

ERR_T_MOVINGSTILLSTATE:constant Integer := 161; -- stationary | moving
function asn1SccT_MovingStillState_IsConstraintValid(val : asn1SccT_MovingStillState) return adaasn1rtl.ASN1_RESULT;

function asn1SccT_MovingStillState_Init return asn1SccT_MovingStillState;
subtype asn1SccT_PlusMinusState_index_range is Integer range 0..1;
type asn1SccT_PlusMinusState is (asn1Sccplus, asn1Sccminus) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccT_PlusMinusState use
    (asn1Sccplus => 0, asn1Sccminus => 1);

function asn1SccT_PlusMinusState_Equal(val1, val2 : asn1SccT_PlusMinusState) return Boolean;

ERR_T_PLUSMINUSSTATE:constant Integer := 166; -- plus | minus
function asn1SccT_PlusMinusState_IsConstraintValid(val : asn1SccT_PlusMinusState) return adaasn1rtl.ASN1_RESULT;

function asn1SccT_PlusMinusState_Init return asn1SccT_PlusMinusState;
subtype asn1SccT_ArmedDisarmedState_index_range is Integer range 0..1;
type asn1SccT_ArmedDisarmedState is (asn1Sccdisarmed, asn1Sccarmed) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccT_ArmedDisarmedState use
    (asn1Sccdisarmed => 0, asn1Sccarmed => 1);

function asn1SccT_ArmedDisarmedState_Equal(val1, val2 : asn1SccT_ArmedDisarmedState) return Boolean;

ERR_T_ARMEDDISARMEDSTATE:constant Integer := 171; -- disarmed | armed
function asn1SccT_ArmedDisarmedState_IsConstraintValid(val : asn1SccT_ArmedDisarmedState) return adaasn1rtl.ASN1_RESULT;

function asn1SccT_ArmedDisarmedState_Init return asn1SccT_ArmedDisarmedState;
subtype asn1SccT_ActiveInactiveState_index_range is Integer range 0..1;
type asn1SccT_ActiveInactiveState is (asn1Sccinactive, asn1Sccactive) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccT_ActiveInactiveState use
    (asn1Sccinactive => 0, asn1Sccactive => 1);

function asn1SccT_ActiveInactiveState_Equal(val1, val2 : asn1SccT_ActiveInactiveState) return Boolean;

ERR_T_ACTIVEINACTIVESTATE:constant Integer := 176; -- inactive | active
function asn1SccT_ActiveInactiveState_IsConstraintValid(val : asn1SccT_ActiveInactiveState) return adaasn1rtl.ASN1_RESULT;

function asn1SccT_ActiveInactiveState_Init return asn1SccT_ActiveInactiveState;
subtype asn1SccT_EnabledInhibitedState_index_range is Integer range 0..1;
type asn1SccT_EnabledInhibitedState is (asn1Sccinhibited, asn1Sccenabled) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccT_EnabledInhibitedState use
    (asn1Sccinhibited => 0, asn1Sccenabled => 1);

function asn1SccT_EnabledInhibitedState_Equal(val1, val2 : asn1SccT_EnabledInhibitedState) return Boolean;

ERR_T_ENABLEDINHIBITEDSTATE:constant Integer := 181; -- inhibited | enabled
function asn1SccT_EnabledInhibitedState_IsConstraintValid(val : asn1SccT_EnabledInhibitedState) return adaasn1rtl.ASN1_RESULT;

function asn1SccT_EnabledInhibitedState_Init return asn1SccT_EnabledInhibitedState;
subtype asn1SccT_FlagState_index_range is Integer range 0..1;
type asn1SccT_FlagState is (asn1Sccclear, asn1Sccset) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccT_FlagState use
    (asn1Sccclear => 0, asn1Sccset => 1);

function asn1SccT_FlagState_Equal(val1, val2 : asn1SccT_FlagState) return Boolean;

ERR_T_FLAGSTATE:constant Integer := 186; -- clear | set
function asn1SccT_FlagState_IsConstraintValid(val : asn1SccT_FlagState) return adaasn1rtl.ASN1_RESULT;

function asn1SccT_FlagState_Init return asn1SccT_FlagState;
subtype asn1SccT_SuccessFailState_index_range is Integer range 0..1;
type asn1SccT_SuccessFailState is (asn1Sccfail, asn1Sccsuccess) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccT_SuccessFailState use
    (asn1Sccfail => 0, asn1Sccsuccess => 1);

function asn1SccT_SuccessFailState_Equal(val1, val2 : asn1SccT_SuccessFailState) return Boolean;

ERR_T_SUCCESSFAILSTATE:constant Integer := 191; -- fail | success
function asn1SccT_SuccessFailState_IsConstraintValid(val : asn1SccT_SuccessFailState) return adaasn1rtl.ASN1_RESULT;

function asn1SccT_SuccessFailState_Init return asn1SccT_SuccessFailState;
subtype asn1SccT_HighLowState_index_range is Integer range 0..1;
type asn1SccT_HighLowState is (asn1Scclow, asn1Scchigh) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccT_HighLowState use
    (asn1Scclow => 0, asn1Scchigh => 1);

function asn1SccT_HighLowState_Equal(val1, val2 : asn1SccT_HighLowState) return Boolean;

ERR_T_HIGHLOWSTATE:constant Integer := 196; -- low | high
function asn1SccT_HighLowState_IsConstraintValid(val : asn1SccT_HighLowState) return adaasn1rtl.ASN1_RESULT;

function asn1SccT_HighLowState_Init return asn1SccT_HighLowState;
subtype asn1SccT_OverrideState_index_range is Integer range 0..1;
type asn1SccT_OverrideState is (asn1Sccnormal, asn1Sccoverridden) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccT_OverrideState use
    (asn1Sccnormal => 0, asn1Sccoverridden => 1);

function asn1SccT_OverrideState_Equal(val1, val2 : asn1SccT_OverrideState) return Boolean;

ERR_T_OVERRIDESTATE:constant Integer := 201; -- normal | overridden
function asn1SccT_OverrideState_IsConstraintValid(val : asn1SccT_OverrideState) return adaasn1rtl.ASN1_RESULT;

function asn1SccT_OverrideState_Init return asn1SccT_OverrideState;
subtype asn1SccT_LockedUnlockedState_index_range is Integer range 0..1;
type asn1SccT_LockedUnlockedState is (asn1Sccunlocked, asn1Scclocked) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccT_LockedUnlockedState use
    (asn1Sccunlocked => 0, asn1Scclocked => 1);

function asn1SccT_LockedUnlockedState_Equal(val1, val2 : asn1SccT_LockedUnlockedState) return Boolean;

ERR_T_LOCKEDUNLOCKEDSTATE:constant Integer := 206; -- unlocked | locked
function asn1SccT_LockedUnlockedState_IsConstraintValid(val : asn1SccT_LockedUnlockedState) return adaasn1rtl.ASN1_RESULT;

function asn1SccT_LockedUnlockedState_Init return asn1SccT_LockedUnlockedState;
subtype asn1SccT_WarningState_index_range is Integer range 0..1;
type asn1SccT_WarningState is (asn1Sccok, asn1Sccwarning) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccT_WarningState use
    (asn1Sccok => 0, asn1Sccwarning => 1);

function asn1SccT_WarningState_Equal(val1, val2 : asn1SccT_WarningState) return Boolean;

ERR_T_WARNINGSTATE:constant Integer := 211; -- ok | warning
function asn1SccT_WarningState_IsConstraintValid(val : asn1SccT_WarningState) return adaasn1rtl.ASN1_RESULT;

function asn1SccT_WarningState_Init return asn1SccT_WarningState;
subtype asn1SccT_ValidInvalidState_index_range is Integer range 0..1;
type asn1SccT_ValidInvalidState is (asn1Sccinvalid, asn1Sccvalid) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccT_ValidInvalidState use
    (asn1Sccinvalid => 0, asn1Sccvalid => 1);

function asn1SccT_ValidInvalidState_Equal(val1, val2 : asn1SccT_ValidInvalidState) return Boolean;

ERR_T_VALIDINVALIDSTATE:constant Integer := 216; -- invalid | valid
function asn1SccT_ValidInvalidState_IsConstraintValid(val : asn1SccT_ValidInvalidState) return adaasn1rtl.ASN1_RESULT;

function asn1SccT_ValidInvalidState_Init return asn1SccT_ValidInvalidState;
pragma Warnings (Off, "there are no others");
 
pragma Warnings (On, "there are no others");
private
   --# hide Bilevel_Types;


end Bilevel_Types;