pragma Style_Checks (Off);
--  Code automatically generated by asn1scc tool
with adaasn1rtl;


pragma Warnings (Off, "unit ""System"" is not referenced");
with System;
pragma Warnings (On, "unit ""System"" is not referenced");

pragma Warnings (Off, "use clause for package ""adaasn1rtl"" has no effect");
use adaasn1rtl;
pragma Warnings (On, "use clause for package ""adaasn1rtl"" has no effect");

pragma Warnings (Off, "use clause for type");
pragma Warnings (Off, "is already use-visible through package use clause at line");
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
pragma Warnings (On, "use clause for type");
pragma Warnings (On, "is already use-visible through package use clause at line");



package Basic_Types with SPARK_Mode
is


subtype asn1SccUINT40 is adaasn1rtl.Asn1UInt range 0 .. 1099511627775;


function asn1SccUINT40_Equal(val1, val2 : asn1SccUINT40) return Boolean;

ERR_UINT40:constant Integer := 1; -- (0 .. 1099511627775)
function asn1SccUINT40_IsConstraintValid(val : asn1SccUINT40) return adaasn1rtl.ASN1_RESULT;

function asn1SccUINT40_Init return asn1SccUINT40;
subtype asn1SccUINT32 is adaasn1rtl.Asn1UInt range 0 .. 4294967295;


function asn1SccUINT32_Equal(val1, val2 : asn1SccUINT32) return Boolean;

ERR_UINT32:constant Integer := 6; -- (0 .. 4294967295)
function asn1SccUINT32_IsConstraintValid(val : asn1SccUINT32) return adaasn1rtl.ASN1_RESULT;

function asn1SccUINT32_Init return asn1SccUINT32;
subtype asn1SccUINT24 is adaasn1rtl.Asn1UInt range 0 .. 16777215;


function asn1SccUINT24_Equal(val1, val2 : asn1SccUINT24) return Boolean;

ERR_UINT24:constant Integer := 11; -- (0 .. 16777215)
function asn1SccUINT24_IsConstraintValid(val : asn1SccUINT24) return adaasn1rtl.ASN1_RESULT;

function asn1SccUINT24_Init return asn1SccUINT24;
subtype asn1SccUINT16 is adaasn1rtl.Asn1UInt range 0 .. 65535;


function asn1SccUINT16_Equal(val1, val2 : asn1SccUINT16) return Boolean;

ERR_UINT16:constant Integer := 16; -- (0 .. 65535)
function asn1SccUINT16_IsConstraintValid(val : asn1SccUINT16) return adaasn1rtl.ASN1_RESULT;

function asn1SccUINT16_Init return asn1SccUINT16;
subtype asn1SccUINT14 is adaasn1rtl.Asn1UInt range 0 .. 16383;


function asn1SccUINT14_Equal(val1, val2 : asn1SccUINT14) return Boolean;

ERR_UINT14:constant Integer := 21; -- (0 .. 16383)
function asn1SccUINT14_IsConstraintValid(val : asn1SccUINT14) return adaasn1rtl.ASN1_RESULT;

function asn1SccUINT14_Init return asn1SccUINT14;
subtype asn1SccUINT12 is adaasn1rtl.Asn1UInt range 0 .. 4095;


function asn1SccUINT12_Equal(val1, val2 : asn1SccUINT12) return Boolean;

ERR_UINT12:constant Integer := 26; -- (0 .. 4095)
function asn1SccUINT12_IsConstraintValid(val : asn1SccUINT12) return adaasn1rtl.ASN1_RESULT;

function asn1SccUINT12_Init return asn1SccUINT12;
subtype asn1SccUINT11 is adaasn1rtl.Asn1UInt range 0 .. 2047;


function asn1SccUINT11_Equal(val1, val2 : asn1SccUINT11) return Boolean;

ERR_UINT11:constant Integer := 31; -- (0 .. 2047)
function asn1SccUINT11_IsConstraintValid(val : asn1SccUINT11) return adaasn1rtl.ASN1_RESULT;

function asn1SccUINT11_Init return asn1SccUINT11;
subtype asn1SccUINT10 is adaasn1rtl.Asn1UInt range 0 .. 1023;


function asn1SccUINT10_Equal(val1, val2 : asn1SccUINT10) return Boolean;

ERR_UINT10:constant Integer := 36; -- (0 .. 1023)
function asn1SccUINT10_IsConstraintValid(val : asn1SccUINT10) return adaasn1rtl.ASN1_RESULT;

function asn1SccUINT10_Init return asn1SccUINT10;
subtype asn1SccUINT8 is adaasn1rtl.Asn1UInt range 0 .. 255;


function asn1SccUINT8_Equal(val1, val2 : asn1SccUINT8) return Boolean;

ERR_UINT8:constant Integer := 41; -- (0 .. 255)
function asn1SccUINT8_IsConstraintValid(val : asn1SccUINT8) return adaasn1rtl.ASN1_RESULT;

function asn1SccUINT8_Init return asn1SccUINT8;
subtype asn1SccUINT7 is adaasn1rtl.Asn1UInt range 0 .. 127;


function asn1SccUINT7_Equal(val1, val2 : asn1SccUINT7) return Boolean;

ERR_UINT7:constant Integer := 46; -- (0 .. 127)
function asn1SccUINT7_IsConstraintValid(val : asn1SccUINT7) return adaasn1rtl.ASN1_RESULT;

function asn1SccUINT7_Init return asn1SccUINT7;
subtype asn1SccUINT6 is adaasn1rtl.Asn1UInt range 0 .. 63;


function asn1SccUINT6_Equal(val1, val2 : asn1SccUINT6) return Boolean;

ERR_UINT6:constant Integer := 51; -- (0 .. 63)
function asn1SccUINT6_IsConstraintValid(val : asn1SccUINT6) return adaasn1rtl.ASN1_RESULT;

function asn1SccUINT6_Init return asn1SccUINT6;
subtype asn1SccUINT5 is adaasn1rtl.Asn1UInt range 0 .. 31;


function asn1SccUINT5_Equal(val1, val2 : asn1SccUINT5) return Boolean;

ERR_UINT5:constant Integer := 56; -- (0 .. 31)
function asn1SccUINT5_IsConstraintValid(val : asn1SccUINT5) return adaasn1rtl.ASN1_RESULT;

function asn1SccUINT5_Init return asn1SccUINT5;
subtype asn1SccUINT4 is adaasn1rtl.Asn1UInt range 0 .. 15;


function asn1SccUINT4_Equal(val1, val2 : asn1SccUINT4) return Boolean;

ERR_UINT4:constant Integer := 61; -- (0 .. 15)
function asn1SccUINT4_IsConstraintValid(val : asn1SccUINT4) return adaasn1rtl.ASN1_RESULT;

function asn1SccUINT4_Init return asn1SccUINT4;
subtype asn1SccUINT3 is adaasn1rtl.Asn1UInt range 0 .. 7;


function asn1SccUINT3_Equal(val1, val2 : asn1SccUINT3) return Boolean;

ERR_UINT3:constant Integer := 66; -- (0 .. 7)
function asn1SccUINT3_IsConstraintValid(val : asn1SccUINT3) return adaasn1rtl.ASN1_RESULT;

function asn1SccUINT3_Init return asn1SccUINT3;
subtype asn1SccUINT2 is adaasn1rtl.Asn1UInt range 0 .. 3;


function asn1SccUINT2_Equal(val1, val2 : asn1SccUINT2) return Boolean;

ERR_UINT2:constant Integer := 71; -- (0 .. 3)
function asn1SccUINT2_IsConstraintValid(val : asn1SccUINT2) return adaasn1rtl.ASN1_RESULT;

function asn1SccUINT2_Init return asn1SccUINT2;
subtype asn1SccUINT1 is adaasn1rtl.Asn1UInt range 0 .. 1;


function asn1SccUINT1_Equal(val1, val2 : asn1SccUINT1) return Boolean;

ERR_UINT1:constant Integer := 76; -- (0 .. 1)
function asn1SccUINT1_IsConstraintValid(val : asn1SccUINT1) return adaasn1rtl.ASN1_RESULT;

function asn1SccUINT1_Init return asn1SccUINT1;
subtype asn1SccT_Bit is asn1SccUINT1 range 0 .. 1;


function asn1SccT_Bit_Equal(val1, val2 : asn1SccT_Bit) return Boolean;

ERR_T_BIT_2:constant Integer := 86; -- 
function asn1SccT_Bit_IsConstraintValid(val : asn1SccT_Bit) return adaasn1rtl.ASN1_RESULT;

function asn1SccT_Bit_Init return asn1SccT_Bit;
subtype asn1SccINT16 is adaasn1rtl.Asn1Int range -32768 .. 32767;


function asn1SccINT16_Equal(val1, val2 : asn1SccINT16) return Boolean;

ERR_INT16:constant Integer := 91; -- (-32768 .. 32767)
function asn1SccINT16_IsConstraintValid(val : asn1SccINT16) return adaasn1rtl.ASN1_RESULT;

function asn1SccINT16_Init return asn1SccINT16;
subtype asn1SccINT32 is adaasn1rtl.Asn1Int range -2147483648 .. 2147483647;


function asn1SccINT32_Equal(val1, val2 : asn1SccINT32) return Boolean;

ERR_INT32:constant Integer := 96; -- (-2147483648 .. 2147483647)
function asn1SccINT32_IsConstraintValid(val : asn1SccINT32) return adaasn1rtl.ASN1_RESULT;

function asn1SccINT32_Init return asn1SccINT32;
subtype asn1SccINT24 is adaasn1rtl.Asn1Int range -8388608 .. 8388607;


function asn1SccINT24_Equal(val1, val2 : asn1SccINT24) return Boolean;

ERR_INT24:constant Integer := 101; -- (-8388608 .. 8388607)
function asn1SccINT24_IsConstraintValid(val : asn1SccINT24) return adaasn1rtl.ASN1_RESULT;

function asn1SccINT24_Init return asn1SccINT24;
subtype asn1SccT_OCTET_index is Integer range 1..1;
subtype asn1SccT_OCTET_array is adaasn1rtl.OctetBuffer(asn1SccT_OCTET_index);
type asn1SccT_OCTET is  record
    Data  : asn1SccT_OCTET_array;
end record;

function asn1SccT_OCTET_Equal(val1, val2 : asn1SccT_OCTET) return Boolean;

ERR_T_OCTET:constant Integer := 106; -- (SIZE(1))
function asn1SccT_OCTET_IsConstraintValid(val : asn1SccT_OCTET) return adaasn1rtl.ASN1_RESULT;

function asn1SccT_OCTET_Init return asn1SccT_OCTET;
pragma Warnings (Off, "there are no others");
 
pragma Warnings (On, "there are no others");
private
   --# hide Basic_Types;


end Basic_Types;