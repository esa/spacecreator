#ifndef GENERATED_ASN1SCC_dataview_uniq_H
#define GENERATED_ASN1SCC_dataview_uniq_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"
#include "asn1crt_encoding.h"


#ifdef  __cplusplus
extern "C" {
#endif


typedef asn1SccUint UINT40;


flag UINT40_Equal(const UINT40* pVal1, const UINT40* pVal2);

#define ERR_UINT40		1  /*(0 .. 1099511627775)*/
flag UINT40_IsConstraintValid(const UINT40* pVal, int* pErrCode);

void UINT40_Initialize(UINT40* pVal);

#define ERR_UPER_ENCODE_UINT40		2  /**/
#define UINT40_REQUIRED_BYTES_FOR_ENCODING       5 
#define UINT40_REQUIRED_BITS_FOR_ENCODING        40

flag UINT40_Encode(const UINT40* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_UINT40		3  /**/
flag UINT40_Decode(UINT40* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_UINT40		4  /**/
#define UINT40_REQUIRED_BYTES_FOR_ACN_ENCODING       5 
#define UINT40_REQUIRED_BITS_FOR_ACN_ENCODING        40

flag UINT40_ACN_Encode(const UINT40* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_UINT40		5  /**/
flag UINT40_ACN_Decode(UINT40* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint UINT32;


flag UINT32_Equal(const UINT32* pVal1, const UINT32* pVal2);

#define ERR_UINT32		6  /*(0 .. 4294967295)*/
flag UINT32_IsConstraintValid(const UINT32* pVal, int* pErrCode);

void UINT32_Initialize(UINT32* pVal);

#define ERR_UPER_ENCODE_UINT32		7  /**/
#define UINT32_REQUIRED_BYTES_FOR_ENCODING       4 
#define UINT32_REQUIRED_BITS_FOR_ENCODING        32

flag UINT32_Encode(const UINT32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_UINT32		8  /**/
flag UINT32_Decode(UINT32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_UINT32		9  /**/
#define UINT32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define UINT32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag UINT32_ACN_Encode(const UINT32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_UINT32		10  /**/
flag UINT32_ACN_Decode(UINT32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint UINT24;


flag UINT24_Equal(const UINT24* pVal1, const UINT24* pVal2);

#define ERR_UINT24		11  /*(0 .. 16777215)*/
flag UINT24_IsConstraintValid(const UINT24* pVal, int* pErrCode);

void UINT24_Initialize(UINT24* pVal);

#define ERR_UPER_ENCODE_UINT24		12  /**/
#define UINT24_REQUIRED_BYTES_FOR_ENCODING       3 
#define UINT24_REQUIRED_BITS_FOR_ENCODING        24

flag UINT24_Encode(const UINT24* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_UINT24		13  /**/
flag UINT24_Decode(UINT24* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_UINT24		14  /**/
#define UINT24_REQUIRED_BYTES_FOR_ACN_ENCODING       3 
#define UINT24_REQUIRED_BITS_FOR_ACN_ENCODING        24

flag UINT24_ACN_Encode(const UINT24* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_UINT24		15  /**/
flag UINT24_ACN_Decode(UINT24* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint UINT16;


flag UINT16_Equal(const UINT16* pVal1, const UINT16* pVal2);

#define ERR_UINT16		16  /*(0 .. 65535)*/
flag UINT16_IsConstraintValid(const UINT16* pVal, int* pErrCode);

void UINT16_Initialize(UINT16* pVal);

#define ERR_UPER_ENCODE_UINT16		17  /**/
#define UINT16_REQUIRED_BYTES_FOR_ENCODING       2 
#define UINT16_REQUIRED_BITS_FOR_ENCODING        16

flag UINT16_Encode(const UINT16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_UINT16		18  /**/
flag UINT16_Decode(UINT16* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_UINT16		19  /**/
#define UINT16_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define UINT16_REQUIRED_BITS_FOR_ACN_ENCODING        16

flag UINT16_ACN_Encode(const UINT16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_UINT16		20  /**/
flag UINT16_ACN_Decode(UINT16* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint UINT14;


flag UINT14_Equal(const UINT14* pVal1, const UINT14* pVal2);

#define ERR_UINT14		21  /*(0 .. 16383)*/
flag UINT14_IsConstraintValid(const UINT14* pVal, int* pErrCode);

void UINT14_Initialize(UINT14* pVal);

#define ERR_UPER_ENCODE_UINT14		22  /**/
#define UINT14_REQUIRED_BYTES_FOR_ENCODING       2 
#define UINT14_REQUIRED_BITS_FOR_ENCODING        14

flag UINT14_Encode(const UINT14* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_UINT14		23  /**/
flag UINT14_Decode(UINT14* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_UINT14		24  /**/
#define UINT14_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define UINT14_REQUIRED_BITS_FOR_ACN_ENCODING        14

flag UINT14_ACN_Encode(const UINT14* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_UINT14		25  /**/
flag UINT14_ACN_Decode(UINT14* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint UINT12;


flag UINT12_Equal(const UINT12* pVal1, const UINT12* pVal2);

#define ERR_UINT12		26  /*(0 .. 4095)*/
flag UINT12_IsConstraintValid(const UINT12* pVal, int* pErrCode);

void UINT12_Initialize(UINT12* pVal);

#define ERR_UPER_ENCODE_UINT12		27  /**/
#define UINT12_REQUIRED_BYTES_FOR_ENCODING       2 
#define UINT12_REQUIRED_BITS_FOR_ENCODING        12

flag UINT12_Encode(const UINT12* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_UINT12		28  /**/
flag UINT12_Decode(UINT12* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_UINT12		29  /**/
#define UINT12_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define UINT12_REQUIRED_BITS_FOR_ACN_ENCODING        12

flag UINT12_ACN_Encode(const UINT12* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_UINT12		30  /**/
flag UINT12_ACN_Decode(UINT12* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint UINT11;


flag UINT11_Equal(const UINT11* pVal1, const UINT11* pVal2);

#define ERR_UINT11		31  /*(0 .. 2047)*/
flag UINT11_IsConstraintValid(const UINT11* pVal, int* pErrCode);

void UINT11_Initialize(UINT11* pVal);

#define ERR_UPER_ENCODE_UINT11		32  /**/
#define UINT11_REQUIRED_BYTES_FOR_ENCODING       2 
#define UINT11_REQUIRED_BITS_FOR_ENCODING        11

flag UINT11_Encode(const UINT11* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_UINT11		33  /**/
flag UINT11_Decode(UINT11* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_UINT11		34  /**/
#define UINT11_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define UINT11_REQUIRED_BITS_FOR_ACN_ENCODING        11

flag UINT11_ACN_Encode(const UINT11* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_UINT11		35  /**/
flag UINT11_ACN_Decode(UINT11* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint UINT10;


flag UINT10_Equal(const UINT10* pVal1, const UINT10* pVal2);

#define ERR_UINT10		36  /*(0 .. 1023)*/
flag UINT10_IsConstraintValid(const UINT10* pVal, int* pErrCode);

void UINT10_Initialize(UINT10* pVal);

#define ERR_UPER_ENCODE_UINT10		37  /**/
#define UINT10_REQUIRED_BYTES_FOR_ENCODING       2 
#define UINT10_REQUIRED_BITS_FOR_ENCODING        10

flag UINT10_Encode(const UINT10* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_UINT10		38  /**/
flag UINT10_Decode(UINT10* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_UINT10		39  /**/
#define UINT10_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define UINT10_REQUIRED_BITS_FOR_ACN_ENCODING        10

flag UINT10_ACN_Encode(const UINT10* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_UINT10		40  /**/
flag UINT10_ACN_Decode(UINT10* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint UINT8;


flag UINT8_Equal(const UINT8* pVal1, const UINT8* pVal2);

#define ERR_UINT8		41  /*(0 .. 255)*/
flag UINT8_IsConstraintValid(const UINT8* pVal, int* pErrCode);

void UINT8_Initialize(UINT8* pVal);

#define ERR_UPER_ENCODE_UINT8		42  /**/
#define UINT8_REQUIRED_BYTES_FOR_ENCODING       1 
#define UINT8_REQUIRED_BITS_FOR_ENCODING        8

flag UINT8_Encode(const UINT8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_UINT8		43  /**/
flag UINT8_Decode(UINT8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_UINT8		44  /**/
#define UINT8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define UINT8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag UINT8_ACN_Encode(const UINT8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_UINT8		45  /**/
flag UINT8_ACN_Decode(UINT8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef UINT8 T_UART_DLC_Header;


flag T_UART_DLC_Header_Equal(const T_UART_DLC_Header* pVal1, const T_UART_DLC_Header* pVal2);

#define ERR_T_UART_DLC_HEADER_2		231  /*(c-UART-DLC-SYNC-VALUE)*/
flag T_UART_DLC_Header_IsConstraintValid(const T_UART_DLC_Header* pVal, int* pErrCode);

void T_UART_DLC_Header_Initialize(T_UART_DLC_Header* pVal);

#define ERR_UPER_ENCODE_T_UART_DLC_HEADER		227  /**/
#define T_UART_DLC_Header_REQUIRED_BYTES_FOR_ENCODING       0 
#define T_UART_DLC_Header_REQUIRED_BITS_FOR_ENCODING        0

flag T_UART_DLC_Header_Encode(const T_UART_DLC_Header* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UART_DLC_HEADER		228  /**/
flag T_UART_DLC_Header_Decode(T_UART_DLC_Header* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UART_DLC_HEADER		229  /**/
#define T_UART_DLC_Header_REQUIRED_BYTES_FOR_ACN_ENCODING       0 
#define T_UART_DLC_Header_REQUIRED_BITS_FOR_ACN_ENCODING        0

flag T_UART_DLC_Header_ACN_Encode(const T_UART_DLC_Header* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UART_DLC_HEADER		230  /**/
flag T_UART_DLC_Header_ACN_Decode(T_UART_DLC_Header* pVal, BitStream* pBitStrm, int* pErrCode);
typedef UINT8 T_UART_DLC_FrameCRC;


flag T_UART_DLC_FrameCRC_Equal(const T_UART_DLC_FrameCRC* pVal1, const T_UART_DLC_FrameCRC* pVal2);

#define ERR_T_UART_DLC_FRAMECRC_2		237  /**/
flag T_UART_DLC_FrameCRC_IsConstraintValid(const T_UART_DLC_FrameCRC* pVal, int* pErrCode);

void T_UART_DLC_FrameCRC_Initialize(T_UART_DLC_FrameCRC* pVal);

#define ERR_UPER_ENCODE_T_UART_DLC_FRAMECRC_2		238  /**/
#define T_UART_DLC_FrameCRC_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_UART_DLC_FrameCRC_REQUIRED_BITS_FOR_ENCODING        8

flag T_UART_DLC_FrameCRC_Encode(const T_UART_DLC_FrameCRC* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UART_DLC_FRAMECRC_2		239  /**/
flag T_UART_DLC_FrameCRC_Decode(T_UART_DLC_FrameCRC* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UART_DLC_FRAMECRC_2		240  /**/
#define T_UART_DLC_FrameCRC_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_UART_DLC_FrameCRC_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag T_UART_DLC_FrameCRC_ACN_Encode(const T_UART_DLC_FrameCRC* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UART_DLC_FRAMECRC_2		241  /**/
flag T_UART_DLC_FrameCRC_ACN_Decode(T_UART_DLC_FrameCRC* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    
    UINT8 arr[256];
} T_RMAPCRCTable;

flag T_RMAPCRCTable_Equal(const T_RMAPCRCTable* pVal1, const T_RMAPCRCTable* pVal2);

#define ERR_T_RMAPCRCTABLE		301  /*(SIZE(256))*/
#define ERR_T_RMAPCRCTABLE_ELM_2		296  /**/
flag T_RMAPCRCTable_IsConstraintValid(const T_RMAPCRCTable* pVal, int* pErrCode);

void T_RMAPCRCTable_Initialize(T_RMAPCRCTable* pVal);

#define ERR_UPER_ENCODE_T_RMAPCRCTABLE		302  /**/
#define ERR_UPER_ENCODE_T_RMAPCRCTABLE_ELM_2		297  /**/
#define T_RMAPCRCTable_REQUIRED_BYTES_FOR_ENCODING       256 
#define T_RMAPCRCTable_REQUIRED_BITS_FOR_ENCODING        2048

flag T_RMAPCRCTable_Encode(const T_RMAPCRCTable* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_RMAPCRCTABLE		303  /**/
#define ERR_UPER_DECODE_T_RMAPCRCTABLE_ELM_2		298  /**/
flag T_RMAPCRCTable_Decode(T_RMAPCRCTable* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_RMAPCRCTABLE		304  /**/
#define ERR_ACN_ENCODE_T_RMAPCRCTABLE_ELM_2		299  /**/
#define T_RMAPCRCTable_REQUIRED_BYTES_FOR_ACN_ENCODING       256 
#define T_RMAPCRCTable_REQUIRED_BITS_FOR_ACN_ENCODING        2048

flag T_RMAPCRCTable_ACN_Encode(const T_RMAPCRCTable* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_RMAPCRCTABLE		305  /**/
#define ERR_ACN_DECODE_T_RMAPCRCTABLE_ELM_2		300  /**/
flag T_RMAPCRCTable_ACN_Decode(T_RMAPCRCTable* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint UINT7;


flag UINT7_Equal(const UINT7* pVal1, const UINT7* pVal2);

#define ERR_UINT7		46  /*(0 .. 127)*/
flag UINT7_IsConstraintValid(const UINT7* pVal, int* pErrCode);

void UINT7_Initialize(UINT7* pVal);

#define ERR_UPER_ENCODE_UINT7		47  /**/
#define UINT7_REQUIRED_BYTES_FOR_ENCODING       1 
#define UINT7_REQUIRED_BITS_FOR_ENCODING        7

flag UINT7_Encode(const UINT7* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_UINT7		48  /**/
flag UINT7_Decode(UINT7* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_UINT7		49  /**/
#define UINT7_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define UINT7_REQUIRED_BITS_FOR_ACN_ENCODING        7

flag UINT7_ACN_Encode(const UINT7* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_UINT7		50  /**/
flag UINT7_ACN_Decode(UINT7* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint UINT6;


flag UINT6_Equal(const UINT6* pVal1, const UINT6* pVal2);

#define ERR_UINT6		51  /*(0 .. 63)*/
flag UINT6_IsConstraintValid(const UINT6* pVal, int* pErrCode);

void UINT6_Initialize(UINT6* pVal);

#define ERR_UPER_ENCODE_UINT6		52  /**/
#define UINT6_REQUIRED_BYTES_FOR_ENCODING       1 
#define UINT6_REQUIRED_BITS_FOR_ENCODING        6

flag UINT6_Encode(const UINT6* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_UINT6		53  /**/
flag UINT6_Decode(UINT6* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_UINT6		54  /**/
#define UINT6_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define UINT6_REQUIRED_BITS_FOR_ACN_ENCODING        6

flag UINT6_ACN_Encode(const UINT6* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_UINT6		55  /**/
flag UINT6_ACN_Decode(UINT6* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint UINT5;


flag UINT5_Equal(const UINT5* pVal1, const UINT5* pVal2);

#define ERR_UINT5		56  /*(0 .. 31)*/
flag UINT5_IsConstraintValid(const UINT5* pVal, int* pErrCode);

void UINT5_Initialize(UINT5* pVal);

#define ERR_UPER_ENCODE_UINT5		57  /**/
#define UINT5_REQUIRED_BYTES_FOR_ENCODING       1 
#define UINT5_REQUIRED_BITS_FOR_ENCODING        5

flag UINT5_Encode(const UINT5* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_UINT5		58  /**/
flag UINT5_Decode(UINT5* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_UINT5		59  /**/
#define UINT5_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define UINT5_REQUIRED_BITS_FOR_ACN_ENCODING        5

flag UINT5_ACN_Encode(const UINT5* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_UINT5		60  /**/
flag UINT5_ACN_Decode(UINT5* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint UINT4;


flag UINT4_Equal(const UINT4* pVal1, const UINT4* pVal2);

#define ERR_UINT4		61  /*(0 .. 15)*/
flag UINT4_IsConstraintValid(const UINT4* pVal, int* pErrCode);

void UINT4_Initialize(UINT4* pVal);

#define ERR_UPER_ENCODE_UINT4		62  /**/
#define UINT4_REQUIRED_BYTES_FOR_ENCODING       1 
#define UINT4_REQUIRED_BITS_FOR_ENCODING        4

flag UINT4_Encode(const UINT4* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_UINT4		63  /**/
flag UINT4_Decode(UINT4* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_UINT4		64  /**/
#define UINT4_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define UINT4_REQUIRED_BITS_FOR_ACN_ENCODING        4

flag UINT4_ACN_Encode(const UINT4* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_UINT4		65  /**/
flag UINT4_ACN_Decode(UINT4* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint UINT3;


flag UINT3_Equal(const UINT3* pVal1, const UINT3* pVal2);

#define ERR_UINT3		66  /*(0 .. 7)*/
flag UINT3_IsConstraintValid(const UINT3* pVal, int* pErrCode);

void UINT3_Initialize(UINT3* pVal);

#define ERR_UPER_ENCODE_UINT3		67  /**/
#define UINT3_REQUIRED_BYTES_FOR_ENCODING       1 
#define UINT3_REQUIRED_BITS_FOR_ENCODING        3

flag UINT3_Encode(const UINT3* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_UINT3		68  /**/
flag UINT3_Decode(UINT3* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_UINT3		69  /**/
#define UINT3_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define UINT3_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag UINT3_ACN_Encode(const UINT3* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_UINT3		70  /**/
flag UINT3_ACN_Decode(UINT3* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint UINT2;


flag UINT2_Equal(const UINT2* pVal1, const UINT2* pVal2);

#define ERR_UINT2		71  /*(0 .. 3)*/
flag UINT2_IsConstraintValid(const UINT2* pVal, int* pErrCode);

void UINT2_Initialize(UINT2* pVal);

#define ERR_UPER_ENCODE_UINT2		72  /**/
#define UINT2_REQUIRED_BYTES_FOR_ENCODING       1 
#define UINT2_REQUIRED_BITS_FOR_ENCODING        2

flag UINT2_Encode(const UINT2* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_UINT2		73  /**/
flag UINT2_Decode(UINT2* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_UINT2		74  /**/
#define UINT2_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define UINT2_REQUIRED_BITS_FOR_ACN_ENCODING        2

flag UINT2_ACN_Encode(const UINT2* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_UINT2		75  /**/
flag UINT2_ACN_Decode(UINT2* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint UINT1;


flag UINT1_Equal(const UINT1* pVal1, const UINT1* pVal2);

#define ERR_UINT1		76  /*(0 .. 1)*/
flag UINT1_IsConstraintValid(const UINT1* pVal, int* pErrCode);

void UINT1_Initialize(UINT1* pVal);

#define ERR_UPER_ENCODE_UINT1		77  /**/
#define UINT1_REQUIRED_BYTES_FOR_ENCODING       1 
#define UINT1_REQUIRED_BITS_FOR_ENCODING        1

flag UINT1_Encode(const UINT1* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_UINT1		78  /**/
flag UINT1_Decode(UINT1* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_UINT1		79  /**/
#define UINT1_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define UINT1_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag UINT1_ACN_Encode(const UINT1* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_UINT1		80  /**/
flag UINT1_ACN_Decode(UINT1* pVal, BitStream* pBitStrm, int* pErrCode);
typedef UINT1 T_Bit;


flag T_Bit_Equal(const T_Bit* pVal1, const T_Bit* pVal2);

#define ERR_T_BIT_2		86  /**/
flag T_Bit_IsConstraintValid(const T_Bit* pVal, int* pErrCode);

void T_Bit_Initialize(T_Bit* pVal);

#define ERR_UPER_ENCODE_T_BIT_2		87  /**/
#define T_Bit_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_Bit_REQUIRED_BITS_FOR_ENCODING        1

flag T_Bit_Encode(const T_Bit* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_BIT_2		88  /**/
flag T_Bit_Decode(T_Bit* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_BIT_2		89  /**/
#define T_Bit_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_Bit_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_Bit_ACN_Encode(const T_Bit* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_BIT_2		90  /**/
flag T_Bit_ACN_Decode(T_Bit* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint INT16;


flag INT16_Equal(const INT16* pVal1, const INT16* pVal2);

#define ERR_INT16		91  /*(-32768 .. 32767)*/
flag INT16_IsConstraintValid(const INT16* pVal, int* pErrCode);

void INT16_Initialize(INT16* pVal);

#define ERR_UPER_ENCODE_INT16		92  /**/
#define INT16_REQUIRED_BYTES_FOR_ENCODING       2 
#define INT16_REQUIRED_BITS_FOR_ENCODING        16

flag INT16_Encode(const INT16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_INT16		93  /**/
flag INT16_Decode(INT16* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_INT16		94  /**/
#define INT16_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define INT16_REQUIRED_BITS_FOR_ACN_ENCODING        16

flag INT16_ACN_Encode(const INT16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_INT16		95  /**/
flag INT16_ACN_Decode(INT16* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint INT32;


flag INT32_Equal(const INT32* pVal1, const INT32* pVal2);

#define ERR_INT32		96  /*(-2147483648 .. 2147483647)*/
flag INT32_IsConstraintValid(const INT32* pVal, int* pErrCode);

void INT32_Initialize(INT32* pVal);

#define ERR_UPER_ENCODE_INT32		97  /**/
#define INT32_REQUIRED_BYTES_FOR_ENCODING       4 
#define INT32_REQUIRED_BITS_FOR_ENCODING        32

flag INT32_Encode(const INT32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_INT32		98  /**/
flag INT32_Decode(INT32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_INT32		99  /**/
#define INT32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define INT32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag INT32_ACN_Encode(const INT32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_INT32		100  /**/
flag INT32_ACN_Decode(INT32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint INT24;


flag INT24_Equal(const INT24* pVal1, const INT24* pVal2);

#define ERR_INT24		101  /*(-8388608 .. 8388607)*/
flag INT24_IsConstraintValid(const INT24* pVal, int* pErrCode);

void INT24_Initialize(INT24* pVal);

#define ERR_UPER_ENCODE_INT24		102  /**/
#define INT24_REQUIRED_BYTES_FOR_ENCODING       3 
#define INT24_REQUIRED_BITS_FOR_ENCODING        24

flag INT24_Encode(const INT24* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_INT24		103  /**/
flag INT24_Decode(INT24* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_INT24		104  /**/
#define INT24_REQUIRED_BYTES_FOR_ACN_ENCODING       3 
#define INT24_REQUIRED_BITS_FOR_ACN_ENCODING        24

flag INT24_ACN_Encode(const INT24* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_INT24		105  /**/
flag INT24_ACN_Decode(INT24* pVal, BitStream* pBitStrm, int* pErrCode);
typedef struct {
    
    byte arr[1];
} T_OCTET;


flag T_OCTET_Equal(const T_OCTET* pVal1, const T_OCTET* pVal2);

#define ERR_T_OCTET		106  /*(SIZE(1))*/
flag T_OCTET_IsConstraintValid(const T_OCTET* pVal, int* pErrCode);

void T_OCTET_Initialize(T_OCTET* pVal);

#define ERR_UPER_ENCODE_T_OCTET		107  /**/
#define T_OCTET_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_OCTET_REQUIRED_BITS_FOR_ENCODING        8

flag T_OCTET_Encode(const T_OCTET* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_OCTET		108  /**/
flag T_OCTET_Decode(T_OCTET* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_OCTET		109  /**/
#define T_OCTET_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_OCTET_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag T_OCTET_ACN_Encode(const T_OCTET* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_OCTET		110  /**/
flag T_OCTET_ACN_Decode(T_OCTET* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    T_OnOffState_off = 0,
    T_OnOffState_on = 1
} T_OnOffState;

// please use the following macros to avoid breaking code.
#define T_OnOffState_off T_OnOffState_off
#define T_OnOffState_on T_OnOffState_on

flag T_OnOffState_Equal(const T_OnOffState* pVal1, const T_OnOffState* pVal2);

#define ERR_T_ONOFFSTATE		111  /*off | on*/
flag T_OnOffState_IsConstraintValid(const T_OnOffState* pVal, int* pErrCode);

void T_OnOffState_Initialize(T_OnOffState* pVal);

#define ERR_UPER_ENCODE_T_ONOFFSTATE		112  /**/
#define T_OnOffState_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_OnOffState_REQUIRED_BITS_FOR_ENCODING        1

flag T_OnOffState_Encode(const T_OnOffState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_ONOFFSTATE		113  /**/
flag T_OnOffState_Decode(T_OnOffState* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_ONOFFSTATE		114  /**/
#define T_OnOffState_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_OnOffState_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_OnOffState_ACN_Encode(const T_OnOffState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_ONOFFSTATE		115  /**/
flag T_OnOffState_ACN_Decode(T_OnOffState* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    T_NominalRedundantState_redundant = 0,
    T_NominalRedundantState_nominal = 1
} T_NominalRedundantState;

// please use the following macros to avoid breaking code.
#define T_NominalRedundantState_redundant T_NominalRedundantState_redundant
#define T_NominalRedundantState_nominal T_NominalRedundantState_nominal

flag T_NominalRedundantState_Equal(const T_NominalRedundantState* pVal1, const T_NominalRedundantState* pVal2);

#define ERR_T_NOMINALREDUNDANTSTATE		116  /*redundant | nominal*/
flag T_NominalRedundantState_IsConstraintValid(const T_NominalRedundantState* pVal, int* pErrCode);

void T_NominalRedundantState_Initialize(T_NominalRedundantState* pVal);

#define ERR_UPER_ENCODE_T_NOMINALREDUNDANTSTATE		117  /**/
#define T_NominalRedundantState_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_NominalRedundantState_REQUIRED_BITS_FOR_ENCODING        1

flag T_NominalRedundantState_Encode(const T_NominalRedundantState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_NOMINALREDUNDANTSTATE		118  /**/
flag T_NominalRedundantState_Decode(T_NominalRedundantState* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_NOMINALREDUNDANTSTATE		119  /**/
#define T_NominalRedundantState_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_NominalRedundantState_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_NominalRedundantState_ACN_Encode(const T_NominalRedundantState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_NOMINALREDUNDANTSTATE		120  /**/
flag T_NominalRedundantState_ACN_Decode(T_NominalRedundantState* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    T_ConnectionState_disconnected = 0,
    T_ConnectionState_connected = 1
} T_ConnectionState;

// please use the following macros to avoid breaking code.
#define T_ConnectionState_disconnected T_ConnectionState_disconnected
#define T_ConnectionState_connected T_ConnectionState_connected

flag T_ConnectionState_Equal(const T_ConnectionState* pVal1, const T_ConnectionState* pVal2);

#define ERR_T_CONNECTIONSTATE		121  /*disconnected | connected*/
flag T_ConnectionState_IsConstraintValid(const T_ConnectionState* pVal, int* pErrCode);

void T_ConnectionState_Initialize(T_ConnectionState* pVal);

#define ERR_UPER_ENCODE_T_CONNECTIONSTATE		122  /**/
#define T_ConnectionState_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_ConnectionState_REQUIRED_BITS_FOR_ENCODING        1

flag T_ConnectionState_Encode(const T_ConnectionState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_CONNECTIONSTATE		123  /**/
flag T_ConnectionState_Decode(T_ConnectionState* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_CONNECTIONSTATE		124  /**/
#define T_ConnectionState_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_ConnectionState_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_ConnectionState_ACN_Encode(const T_ConnectionState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_CONNECTIONSTATE		125  /**/
flag T_ConnectionState_ACN_Decode(T_ConnectionState* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    T_SwitchState_switch_open = 0,
    T_SwitchState_switch_closed = 1
} T_SwitchState;

// please use the following macros to avoid breaking code.
#define T_SwitchState_switch_open T_SwitchState_switch_open
#define T_SwitchState_switch_closed T_SwitchState_switch_closed

flag T_SwitchState_Equal(const T_SwitchState* pVal1, const T_SwitchState* pVal2);

#define ERR_T_SWITCHSTATE		126  /*switch-open | switch-closed*/
flag T_SwitchState_IsConstraintValid(const T_SwitchState* pVal, int* pErrCode);

void T_SwitchState_Initialize(T_SwitchState* pVal);

#define ERR_UPER_ENCODE_T_SWITCHSTATE		127  /**/
#define T_SwitchState_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_SwitchState_REQUIRED_BITS_FOR_ENCODING        1

flag T_SwitchState_Encode(const T_SwitchState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_SWITCHSTATE		128  /**/
flag T_SwitchState_Decode(T_SwitchState* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_SWITCHSTATE		129  /**/
#define T_SwitchState_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_SwitchState_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_SwitchState_ACN_Encode(const T_SwitchState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_SWITCHSTATE		130  /**/
flag T_SwitchState_ACN_Decode(T_SwitchState* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    T_FaultState_fault = 0,
    T_FaultState_ok = 1
} T_FaultState;

// please use the following macros to avoid breaking code.
#define T_FaultState_fault T_FaultState_fault
#define T_FaultState_ok T_FaultState_ok

flag T_FaultState_Equal(const T_FaultState* pVal1, const T_FaultState* pVal2);

#define ERR_T_FAULTSTATE		131  /*fault | ok*/
flag T_FaultState_IsConstraintValid(const T_FaultState* pVal, int* pErrCode);

void T_FaultState_Initialize(T_FaultState* pVal);

#define ERR_UPER_ENCODE_T_FAULTSTATE		132  /**/
#define T_FaultState_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_FaultState_REQUIRED_BITS_FOR_ENCODING        1

flag T_FaultState_Encode(const T_FaultState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_FAULTSTATE		133  /**/
flag T_FaultState_Decode(T_FaultState* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_FAULTSTATE		134  /**/
#define T_FaultState_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_FaultState_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_FaultState_ACN_Encode(const T_FaultState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_FAULTSTATE		135  /**/
flag T_FaultState_ACN_Decode(T_FaultState* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    T_SelectionState_not_selected = 0,
    T_SelectionState_selected = 1
} T_SelectionState;

// please use the following macros to avoid breaking code.
#define T_SelectionState_not_selected T_SelectionState_not_selected
#define T_SelectionState_selected T_SelectionState_selected

flag T_SelectionState_Equal(const T_SelectionState* pVal1, const T_SelectionState* pVal2);

#define ERR_T_SELECTIONSTATE		136  /*not-selected | selected*/
flag T_SelectionState_IsConstraintValid(const T_SelectionState* pVal, int* pErrCode);

void T_SelectionState_Initialize(T_SelectionState* pVal);

#define ERR_UPER_ENCODE_T_SELECTIONSTATE		137  /**/
#define T_SelectionState_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_SelectionState_REQUIRED_BITS_FOR_ENCODING        1

flag T_SelectionState_Encode(const T_SelectionState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_SELECTIONSTATE		138  /**/
flag T_SelectionState_Decode(T_SelectionState* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_SELECTIONSTATE		139  /**/
#define T_SelectionState_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_SelectionState_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_SelectionState_ACN_Encode(const T_SelectionState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_SELECTIONSTATE		140  /**/
flag T_SelectionState_ACN_Decode(T_SelectionState* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    T_PresenceState_absent = 0,
    T_PresenceState_present = 1
} T_PresenceState;

// please use the following macros to avoid breaking code.
#define T_PresenceState_absent T_PresenceState_absent
#define T_PresenceState_present T_PresenceState_present

flag T_PresenceState_Equal(const T_PresenceState* pVal1, const T_PresenceState* pVal2);

#define ERR_T_PRESENCESTATE		141  /*absent | present*/
flag T_PresenceState_IsConstraintValid(const T_PresenceState* pVal, int* pErrCode);

void T_PresenceState_Initialize(T_PresenceState* pVal);

#define ERR_UPER_ENCODE_T_PRESENCESTATE		142  /**/
#define T_PresenceState_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_PresenceState_REQUIRED_BITS_FOR_ENCODING        1

flag T_PresenceState_Encode(const T_PresenceState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_PRESENCESTATE		143  /**/
flag T_PresenceState_Decode(T_PresenceState* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_PRESENCESTATE		144  /**/
#define T_PresenceState_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_PresenceState_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_PresenceState_ACN_Encode(const T_PresenceState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_PRESENCESTATE		145  /**/
flag T_PresenceState_ACN_Decode(T_PresenceState* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    T_ForwardBackwardState_backward = 0,
    T_ForwardBackwardState_forward = 1
} T_ForwardBackwardState;

// please use the following macros to avoid breaking code.
#define T_ForwardBackwardState_backward T_ForwardBackwardState_backward
#define T_ForwardBackwardState_forward T_ForwardBackwardState_forward

flag T_ForwardBackwardState_Equal(const T_ForwardBackwardState* pVal1, const T_ForwardBackwardState* pVal2);

#define ERR_T_FORWARDBACKWARDSTATE		146  /*backward | forward*/
flag T_ForwardBackwardState_IsConstraintValid(const T_ForwardBackwardState* pVal, int* pErrCode);

void T_ForwardBackwardState_Initialize(T_ForwardBackwardState* pVal);

#define ERR_UPER_ENCODE_T_FORWARDBACKWARDSTATE		147  /**/
#define T_ForwardBackwardState_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_ForwardBackwardState_REQUIRED_BITS_FOR_ENCODING        1

flag T_ForwardBackwardState_Encode(const T_ForwardBackwardState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_FORWARDBACKWARDSTATE		148  /**/
flag T_ForwardBackwardState_Decode(T_ForwardBackwardState* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_FORWARDBACKWARDSTATE		149  /**/
#define T_ForwardBackwardState_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_ForwardBackwardState_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_ForwardBackwardState_ACN_Encode(const T_ForwardBackwardState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_FORWARDBACKWARDSTATE		150  /**/
flag T_ForwardBackwardState_ACN_Decode(T_ForwardBackwardState* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    T_LeftRightState_left = 0,
    T_LeftRightState_right = 1
} T_LeftRightState;

// please use the following macros to avoid breaking code.
#define T_LeftRightState_left T_LeftRightState_left
#define T_LeftRightState_right T_LeftRightState_right

flag T_LeftRightState_Equal(const T_LeftRightState* pVal1, const T_LeftRightState* pVal2);

#define ERR_T_LEFTRIGHTSTATE		151  /*left | right*/
flag T_LeftRightState_IsConstraintValid(const T_LeftRightState* pVal, int* pErrCode);

void T_LeftRightState_Initialize(T_LeftRightState* pVal);

#define ERR_UPER_ENCODE_T_LEFTRIGHTSTATE		152  /**/
#define T_LeftRightState_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_LeftRightState_REQUIRED_BITS_FOR_ENCODING        1

flag T_LeftRightState_Encode(const T_LeftRightState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_LEFTRIGHTSTATE		153  /**/
flag T_LeftRightState_Decode(T_LeftRightState* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_LEFTRIGHTSTATE		154  /**/
#define T_LeftRightState_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_LeftRightState_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_LeftRightState_ACN_Encode(const T_LeftRightState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_LEFTRIGHTSTATE		155  /**/
flag T_LeftRightState_ACN_Decode(T_LeftRightState* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    T_UsedUnusedState_unused = 0,
    T_UsedUnusedState_used = 1
} T_UsedUnusedState;

// please use the following macros to avoid breaking code.
#define T_UsedUnusedState_unused T_UsedUnusedState_unused
#define T_UsedUnusedState_used T_UsedUnusedState_used

flag T_UsedUnusedState_Equal(const T_UsedUnusedState* pVal1, const T_UsedUnusedState* pVal2);

#define ERR_T_USEDUNUSEDSTATE		156  /*unused | used*/
flag T_UsedUnusedState_IsConstraintValid(const T_UsedUnusedState* pVal, int* pErrCode);

void T_UsedUnusedState_Initialize(T_UsedUnusedState* pVal);

#define ERR_UPER_ENCODE_T_USEDUNUSEDSTATE		157  /**/
#define T_UsedUnusedState_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_UsedUnusedState_REQUIRED_BITS_FOR_ENCODING        1

flag T_UsedUnusedState_Encode(const T_UsedUnusedState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_USEDUNUSEDSTATE		158  /**/
flag T_UsedUnusedState_Decode(T_UsedUnusedState* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_USEDUNUSEDSTATE		159  /**/
#define T_UsedUnusedState_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_UsedUnusedState_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_UsedUnusedState_ACN_Encode(const T_UsedUnusedState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_USEDUNUSEDSTATE		160  /**/
flag T_UsedUnusedState_ACN_Decode(T_UsedUnusedState* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    T_MovingStillState_stationary = 0,
    T_MovingStillState_moving = 1
} T_MovingStillState;

// please use the following macros to avoid breaking code.
#define T_MovingStillState_stationary T_MovingStillState_stationary
#define T_MovingStillState_moving T_MovingStillState_moving

flag T_MovingStillState_Equal(const T_MovingStillState* pVal1, const T_MovingStillState* pVal2);

#define ERR_T_MOVINGSTILLSTATE		161  /*stationary | moving*/
flag T_MovingStillState_IsConstraintValid(const T_MovingStillState* pVal, int* pErrCode);

void T_MovingStillState_Initialize(T_MovingStillState* pVal);

#define ERR_UPER_ENCODE_T_MOVINGSTILLSTATE		162  /**/
#define T_MovingStillState_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_MovingStillState_REQUIRED_BITS_FOR_ENCODING        1

flag T_MovingStillState_Encode(const T_MovingStillState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_MOVINGSTILLSTATE		163  /**/
flag T_MovingStillState_Decode(T_MovingStillState* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_MOVINGSTILLSTATE		164  /**/
#define T_MovingStillState_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_MovingStillState_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_MovingStillState_ACN_Encode(const T_MovingStillState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_MOVINGSTILLSTATE		165  /**/
flag T_MovingStillState_ACN_Decode(T_MovingStillState* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    T_PlusMinusState_plus = 0,
    T_PlusMinusState_minus = 1
} T_PlusMinusState;

// please use the following macros to avoid breaking code.
#define T_PlusMinusState_plus T_PlusMinusState_plus
#define T_PlusMinusState_minus T_PlusMinusState_minus

flag T_PlusMinusState_Equal(const T_PlusMinusState* pVal1, const T_PlusMinusState* pVal2);

#define ERR_T_PLUSMINUSSTATE		166  /*plus | minus*/
flag T_PlusMinusState_IsConstraintValid(const T_PlusMinusState* pVal, int* pErrCode);

void T_PlusMinusState_Initialize(T_PlusMinusState* pVal);

#define ERR_UPER_ENCODE_T_PLUSMINUSSTATE		167  /**/
#define T_PlusMinusState_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_PlusMinusState_REQUIRED_BITS_FOR_ENCODING        1

flag T_PlusMinusState_Encode(const T_PlusMinusState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_PLUSMINUSSTATE		168  /**/
flag T_PlusMinusState_Decode(T_PlusMinusState* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_PLUSMINUSSTATE		169  /**/
#define T_PlusMinusState_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_PlusMinusState_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_PlusMinusState_ACN_Encode(const T_PlusMinusState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_PLUSMINUSSTATE		170  /**/
flag T_PlusMinusState_ACN_Decode(T_PlusMinusState* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    T_ArmedDisarmedState_disarmed = 0,
    T_ArmedDisarmedState_armed = 1
} T_ArmedDisarmedState;

// please use the following macros to avoid breaking code.
#define T_ArmedDisarmedState_disarmed T_ArmedDisarmedState_disarmed
#define T_ArmedDisarmedState_armed T_ArmedDisarmedState_armed

flag T_ArmedDisarmedState_Equal(const T_ArmedDisarmedState* pVal1, const T_ArmedDisarmedState* pVal2);

#define ERR_T_ARMEDDISARMEDSTATE		171  /*disarmed | armed*/
flag T_ArmedDisarmedState_IsConstraintValid(const T_ArmedDisarmedState* pVal, int* pErrCode);

void T_ArmedDisarmedState_Initialize(T_ArmedDisarmedState* pVal);

#define ERR_UPER_ENCODE_T_ARMEDDISARMEDSTATE		172  /**/
#define T_ArmedDisarmedState_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_ArmedDisarmedState_REQUIRED_BITS_FOR_ENCODING        1

flag T_ArmedDisarmedState_Encode(const T_ArmedDisarmedState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_ARMEDDISARMEDSTATE		173  /**/
flag T_ArmedDisarmedState_Decode(T_ArmedDisarmedState* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_ARMEDDISARMEDSTATE		174  /**/
#define T_ArmedDisarmedState_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_ArmedDisarmedState_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_ArmedDisarmedState_ACN_Encode(const T_ArmedDisarmedState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_ARMEDDISARMEDSTATE		175  /**/
flag T_ArmedDisarmedState_ACN_Decode(T_ArmedDisarmedState* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    T_ActiveInactiveState_inactive = 0,
    T_ActiveInactiveState_active = 1
} T_ActiveInactiveState;

// please use the following macros to avoid breaking code.
#define T_ActiveInactiveState_inactive T_ActiveInactiveState_inactive
#define T_ActiveInactiveState_active T_ActiveInactiveState_active

flag T_ActiveInactiveState_Equal(const T_ActiveInactiveState* pVal1, const T_ActiveInactiveState* pVal2);

#define ERR_T_ACTIVEINACTIVESTATE		176  /*inactive | active*/
flag T_ActiveInactiveState_IsConstraintValid(const T_ActiveInactiveState* pVal, int* pErrCode);

void T_ActiveInactiveState_Initialize(T_ActiveInactiveState* pVal);

#define ERR_UPER_ENCODE_T_ACTIVEINACTIVESTATE		177  /**/
#define T_ActiveInactiveState_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_ActiveInactiveState_REQUIRED_BITS_FOR_ENCODING        1

flag T_ActiveInactiveState_Encode(const T_ActiveInactiveState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_ACTIVEINACTIVESTATE		178  /**/
flag T_ActiveInactiveState_Decode(T_ActiveInactiveState* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_ACTIVEINACTIVESTATE		179  /**/
#define T_ActiveInactiveState_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_ActiveInactiveState_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_ActiveInactiveState_ACN_Encode(const T_ActiveInactiveState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_ACTIVEINACTIVESTATE		180  /**/
flag T_ActiveInactiveState_ACN_Decode(T_ActiveInactiveState* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    T_EnabledInhibitedState_inhibited = 0,
    T_EnabledInhibitedState_enabled = 1
} T_EnabledInhibitedState;

// please use the following macros to avoid breaking code.
#define T_EnabledInhibitedState_inhibited T_EnabledInhibitedState_inhibited
#define T_EnabledInhibitedState_enabled T_EnabledInhibitedState_enabled

flag T_EnabledInhibitedState_Equal(const T_EnabledInhibitedState* pVal1, const T_EnabledInhibitedState* pVal2);

#define ERR_T_ENABLEDINHIBITEDSTATE		181  /*inhibited | enabled*/
flag T_EnabledInhibitedState_IsConstraintValid(const T_EnabledInhibitedState* pVal, int* pErrCode);

void T_EnabledInhibitedState_Initialize(T_EnabledInhibitedState* pVal);

#define ERR_UPER_ENCODE_T_ENABLEDINHIBITEDSTATE		182  /**/
#define T_EnabledInhibitedState_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_EnabledInhibitedState_REQUIRED_BITS_FOR_ENCODING        1

flag T_EnabledInhibitedState_Encode(const T_EnabledInhibitedState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_ENABLEDINHIBITEDSTATE		183  /**/
flag T_EnabledInhibitedState_Decode(T_EnabledInhibitedState* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_ENABLEDINHIBITEDSTATE		184  /**/
#define T_EnabledInhibitedState_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_EnabledInhibitedState_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_EnabledInhibitedState_ACN_Encode(const T_EnabledInhibitedState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_ENABLEDINHIBITEDSTATE		185  /**/
flag T_EnabledInhibitedState_ACN_Decode(T_EnabledInhibitedState* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    T_FlagState_clear = 0,
    T_FlagState_set = 1
} T_FlagState;

// please use the following macros to avoid breaking code.
#define T_FlagState_clear T_FlagState_clear
#define T_FlagState_set T_FlagState_set

flag T_FlagState_Equal(const T_FlagState* pVal1, const T_FlagState* pVal2);

#define ERR_T_FLAGSTATE		186  /*clear | set*/
flag T_FlagState_IsConstraintValid(const T_FlagState* pVal, int* pErrCode);

void T_FlagState_Initialize(T_FlagState* pVal);

#define ERR_UPER_ENCODE_T_FLAGSTATE		187  /**/
#define T_FlagState_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_FlagState_REQUIRED_BITS_FOR_ENCODING        1

flag T_FlagState_Encode(const T_FlagState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_FLAGSTATE		188  /**/
flag T_FlagState_Decode(T_FlagState* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_FLAGSTATE		189  /**/
#define T_FlagState_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_FlagState_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_FlagState_ACN_Encode(const T_FlagState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_FLAGSTATE		190  /**/
flag T_FlagState_ACN_Decode(T_FlagState* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    T_SuccessFailState_fail = 0,
    T_SuccessFailState_success = 1
} T_SuccessFailState;

// please use the following macros to avoid breaking code.
#define T_SuccessFailState_fail T_SuccessFailState_fail
#define T_SuccessFailState_success T_SuccessFailState_success

flag T_SuccessFailState_Equal(const T_SuccessFailState* pVal1, const T_SuccessFailState* pVal2);

#define ERR_T_SUCCESSFAILSTATE		191  /*fail | success*/
flag T_SuccessFailState_IsConstraintValid(const T_SuccessFailState* pVal, int* pErrCode);

void T_SuccessFailState_Initialize(T_SuccessFailState* pVal);

#define ERR_UPER_ENCODE_T_SUCCESSFAILSTATE		192  /**/
#define T_SuccessFailState_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_SuccessFailState_REQUIRED_BITS_FOR_ENCODING        1

flag T_SuccessFailState_Encode(const T_SuccessFailState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_SUCCESSFAILSTATE		193  /**/
flag T_SuccessFailState_Decode(T_SuccessFailState* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_SUCCESSFAILSTATE		194  /**/
#define T_SuccessFailState_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_SuccessFailState_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_SuccessFailState_ACN_Encode(const T_SuccessFailState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_SUCCESSFAILSTATE		195  /**/
flag T_SuccessFailState_ACN_Decode(T_SuccessFailState* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    T_HighLowState_low = 0,
    T_HighLowState_high = 1
} T_HighLowState;

// please use the following macros to avoid breaking code.
#define T_HighLowState_low T_HighLowState_low
#define T_HighLowState_high T_HighLowState_high

flag T_HighLowState_Equal(const T_HighLowState* pVal1, const T_HighLowState* pVal2);

#define ERR_T_HIGHLOWSTATE		196  /*low | high*/
flag T_HighLowState_IsConstraintValid(const T_HighLowState* pVal, int* pErrCode);

void T_HighLowState_Initialize(T_HighLowState* pVal);

#define ERR_UPER_ENCODE_T_HIGHLOWSTATE		197  /**/
#define T_HighLowState_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_HighLowState_REQUIRED_BITS_FOR_ENCODING        1

flag T_HighLowState_Encode(const T_HighLowState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_HIGHLOWSTATE		198  /**/
flag T_HighLowState_Decode(T_HighLowState* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_HIGHLOWSTATE		199  /**/
#define T_HighLowState_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_HighLowState_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_HighLowState_ACN_Encode(const T_HighLowState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_HIGHLOWSTATE		200  /**/
flag T_HighLowState_ACN_Decode(T_HighLowState* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    T_OverrideState_normal = 0,
    T_OverrideState_overridden = 1
} T_OverrideState;

// please use the following macros to avoid breaking code.
#define T_OverrideState_normal T_OverrideState_normal
#define T_OverrideState_overridden T_OverrideState_overridden

flag T_OverrideState_Equal(const T_OverrideState* pVal1, const T_OverrideState* pVal2);

#define ERR_T_OVERRIDESTATE		201  /*normal | overridden*/
flag T_OverrideState_IsConstraintValid(const T_OverrideState* pVal, int* pErrCode);

void T_OverrideState_Initialize(T_OverrideState* pVal);

#define ERR_UPER_ENCODE_T_OVERRIDESTATE		202  /**/
#define T_OverrideState_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_OverrideState_REQUIRED_BITS_FOR_ENCODING        1

flag T_OverrideState_Encode(const T_OverrideState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_OVERRIDESTATE		203  /**/
flag T_OverrideState_Decode(T_OverrideState* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_OVERRIDESTATE		204  /**/
#define T_OverrideState_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_OverrideState_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_OverrideState_ACN_Encode(const T_OverrideState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_OVERRIDESTATE		205  /**/
flag T_OverrideState_ACN_Decode(T_OverrideState* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    T_LockedUnlockedState_unlocked = 0,
    T_LockedUnlockedState_locked = 1
} T_LockedUnlockedState;

// please use the following macros to avoid breaking code.
#define T_LockedUnlockedState_unlocked T_LockedUnlockedState_unlocked
#define T_LockedUnlockedState_locked T_LockedUnlockedState_locked

flag T_LockedUnlockedState_Equal(const T_LockedUnlockedState* pVal1, const T_LockedUnlockedState* pVal2);

#define ERR_T_LOCKEDUNLOCKEDSTATE		206  /*unlocked | locked*/
flag T_LockedUnlockedState_IsConstraintValid(const T_LockedUnlockedState* pVal, int* pErrCode);

void T_LockedUnlockedState_Initialize(T_LockedUnlockedState* pVal);

#define ERR_UPER_ENCODE_T_LOCKEDUNLOCKEDSTATE		207  /**/
#define T_LockedUnlockedState_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_LockedUnlockedState_REQUIRED_BITS_FOR_ENCODING        1

flag T_LockedUnlockedState_Encode(const T_LockedUnlockedState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_LOCKEDUNLOCKEDSTATE		208  /**/
flag T_LockedUnlockedState_Decode(T_LockedUnlockedState* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_LOCKEDUNLOCKEDSTATE		209  /**/
#define T_LockedUnlockedState_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_LockedUnlockedState_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_LockedUnlockedState_ACN_Encode(const T_LockedUnlockedState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_LOCKEDUNLOCKEDSTATE		210  /**/
flag T_LockedUnlockedState_ACN_Decode(T_LockedUnlockedState* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    T_WarningState_ok = 0,
    T_WarningState_warning = 1
} T_WarningState;

// please use the following macros to avoid breaking code.
#define T_WarningState_ok T_WarningState_ok
#define T_WarningState_warning T_WarningState_warning

flag T_WarningState_Equal(const T_WarningState* pVal1, const T_WarningState* pVal2);

#define ERR_T_WARNINGSTATE		211  /*ok | warning*/
flag T_WarningState_IsConstraintValid(const T_WarningState* pVal, int* pErrCode);

void T_WarningState_Initialize(T_WarningState* pVal);

#define ERR_UPER_ENCODE_T_WARNINGSTATE		212  /**/
#define T_WarningState_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_WarningState_REQUIRED_BITS_FOR_ENCODING        1

flag T_WarningState_Encode(const T_WarningState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_WARNINGSTATE		213  /**/
flag T_WarningState_Decode(T_WarningState* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_WARNINGSTATE		214  /**/
#define T_WarningState_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_WarningState_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_WarningState_ACN_Encode(const T_WarningState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_WARNINGSTATE		215  /**/
flag T_WarningState_ACN_Decode(T_WarningState* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    T_ValidInvalidState_invalid = 0,
    T_ValidInvalidState_valid = 1
} T_ValidInvalidState;

// please use the following macros to avoid breaking code.
#define T_ValidInvalidState_invalid T_ValidInvalidState_invalid
#define T_ValidInvalidState_valid T_ValidInvalidState_valid

flag T_ValidInvalidState_Equal(const T_ValidInvalidState* pVal1, const T_ValidInvalidState* pVal2);

#define ERR_T_VALIDINVALIDSTATE		216  /*invalid | valid*/
flag T_ValidInvalidState_IsConstraintValid(const T_ValidInvalidState* pVal, int* pErrCode);

void T_ValidInvalidState_Initialize(T_ValidInvalidState* pVal);

#define ERR_UPER_ENCODE_T_VALIDINVALIDSTATE		217  /**/
#define T_ValidInvalidState_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_ValidInvalidState_REQUIRED_BITS_FOR_ENCODING        1

flag T_ValidInvalidState_Encode(const T_ValidInvalidState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_VALIDINVALIDSTATE		218  /**/
flag T_ValidInvalidState_Decode(T_ValidInvalidState* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_VALIDINVALIDSTATE		219  /**/
#define T_ValidInvalidState_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_ValidInvalidState_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_ValidInvalidState_ACN_Encode(const T_ValidInvalidState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_VALIDINVALIDSTATE		220  /**/
flag T_ValidInvalidState_ACN_Decode(T_ValidInvalidState* pVal, BitStream* pBitStrm, int* pErrCode);
typedef struct {
    
    byte arr[16];
} T_UART_DLC_FrameBuffer;


flag T_UART_DLC_FrameBuffer_Equal(const T_UART_DLC_FrameBuffer* pVal1, const T_UART_DLC_FrameBuffer* pVal2);

#define ERR_T_UART_DLC_FRAMEBUFFER		221  /*(SIZE(c-UART-DLC-PDU-SIZE ))*/
flag T_UART_DLC_FrameBuffer_IsConstraintValid(const T_UART_DLC_FrameBuffer* pVal, int* pErrCode);

void T_UART_DLC_FrameBuffer_Initialize(T_UART_DLC_FrameBuffer* pVal);

#define ERR_UPER_ENCODE_T_UART_DLC_FRAMEBUFFER		222  /**/
#define T_UART_DLC_FrameBuffer_REQUIRED_BYTES_FOR_ENCODING       16 
#define T_UART_DLC_FrameBuffer_REQUIRED_BITS_FOR_ENCODING        128

flag T_UART_DLC_FrameBuffer_Encode(const T_UART_DLC_FrameBuffer* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UART_DLC_FRAMEBUFFER		223  /**/
flag T_UART_DLC_FrameBuffer_Decode(T_UART_DLC_FrameBuffer* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UART_DLC_FRAMEBUFFER		224  /**/
#define T_UART_DLC_FrameBuffer_REQUIRED_BYTES_FOR_ACN_ENCODING       16 
#define T_UART_DLC_FrameBuffer_REQUIRED_BITS_FOR_ACN_ENCODING        128

flag T_UART_DLC_FrameBuffer_ACN_Encode(const T_UART_DLC_FrameBuffer* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UART_DLC_FRAMEBUFFER		225  /**/
flag T_UART_DLC_FrameBuffer_ACN_Decode(T_UART_DLC_FrameBuffer* pVal, BitStream* pBitStrm, int* pErrCode);
typedef struct {
    
    byte arr[14];
} T_UART_DLC_SDU;


flag T_UART_DLC_SDU_Equal(const T_UART_DLC_SDU* pVal1, const T_UART_DLC_SDU* pVal2);

#define ERR_T_UART_DLC_SDU		242  /*(SIZE(c-UART-DLC-SDU-SIZE))*/
flag T_UART_DLC_SDU_IsConstraintValid(const T_UART_DLC_SDU* pVal, int* pErrCode);

void T_UART_DLC_SDU_Initialize(T_UART_DLC_SDU* pVal);

#define ERR_UPER_ENCODE_T_UART_DLC_SDU		243  /**/
#define T_UART_DLC_SDU_REQUIRED_BYTES_FOR_ENCODING       14 
#define T_UART_DLC_SDU_REQUIRED_BITS_FOR_ENCODING        112

flag T_UART_DLC_SDU_Encode(const T_UART_DLC_SDU* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UART_DLC_SDU		244  /**/
flag T_UART_DLC_SDU_Decode(T_UART_DLC_SDU* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UART_DLC_SDU		245  /**/
#define T_UART_DLC_SDU_REQUIRED_BYTES_FOR_ACN_ENCODING       14 
#define T_UART_DLC_SDU_REQUIRED_BITS_FOR_ACN_ENCODING        112

flag T_UART_DLC_SDU_ACN_Encode(const T_UART_DLC_SDU* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UART_DLC_SDU		246  /**/
flag T_UART_DLC_SDU_ACN_Decode(T_UART_DLC_SDU* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- T_UART_DLC_PDU --------------------------------------------*/
typedef struct {
    T_UART_DLC_Header dlc_header;
    T_UART_DLC_SDU dlc_payload;
    UINT8 crc;

} T_UART_DLC_PDU;

flag T_UART_DLC_PDU_Equal(const T_UART_DLC_PDU* pVal1, const T_UART_DLC_PDU* pVal2);

#define ERR_T_UART_DLC_PDU		281  /**/
#define ERR_T_UART_DLC_PDU_DLC_HEADER_2_2		253  /**/
#define ERR_T_UART_DLC_PDU_DLC_PAYLOAD_2		261  /**/
#define ERR_T_UART_DLC_PDU_CRC_2_2		276  /**/
flag T_UART_DLC_PDU_IsConstraintValid(const T_UART_DLC_PDU* pVal, int* pErrCode);

void T_UART_DLC_PDU_Initialize(T_UART_DLC_PDU* pVal);

#define ERR_UPER_ENCODE_T_UART_DLC_PDU		282  /**/
#define ERR_UPER_ENCODE_T_UART_DLC_PDU_DLC_HEADER		248  /**/
#define ERR_UPER_ENCODE_T_UART_DLC_PDU_DLC_PAYLOAD_2		262  /**/
#define ERR_UPER_ENCODE_T_UART_DLC_PDU_CRC_2_2		277  /**/
#define T_UART_DLC_PDU_REQUIRED_BYTES_FOR_ENCODING       15 
#define T_UART_DLC_PDU_REQUIRED_BITS_FOR_ENCODING        120

flag T_UART_DLC_PDU_Encode(const T_UART_DLC_PDU* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UART_DLC_PDU		283  /**/
#define ERR_UPER_DECODE_T_UART_DLC_PDU_DLC_HEADER		249  /**/
#define ERR_UPER_DECODE_T_UART_DLC_PDU_DLC_PAYLOAD_2		263  /**/
#define ERR_UPER_DECODE_T_UART_DLC_PDU_CRC_2_2		278  /**/
flag T_UART_DLC_PDU_Decode(T_UART_DLC_PDU* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UART_DLC_PDU		284  /**/
#define ERR_ACN_ENCODE_T_UART_DLC_PDU_DLC_HEADER_2		254  /**/
#define ERR_ACN_ENCODE_T_UART_DLC_PDU_DLC_PAYLOAD_2		264  /**/
#define ERR_ACN_ENCODE_T_UART_DLC_PDU_CRC_2_2		279  /**/
#define T_UART_DLC_PDU_REQUIRED_BYTES_FOR_ACN_ENCODING       15 
#define T_UART_DLC_PDU_REQUIRED_BITS_FOR_ACN_ENCODING        120

flag T_UART_DLC_PDU_ACN_Encode(const T_UART_DLC_PDU* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UART_DLC_PDU		285  /**/
#define ERR_ACN_DECODE_T_UART_DLC_PDU_DLC_HEADER_2		255  /**/
#define ERR_ACN_DECODE_T_UART_DLC_PDU_DLC_PAYLOAD_2		265  /**/
#define ERR_ACN_DECODE_T_UART_DLC_PDU_CRC_2_2		280  /**/
flag T_UART_DLC_PDU_ACN_Decode(T_UART_DLC_PDU* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    T_UART_DLC_RxErrorCode_no_error = 0,
    T_UART_DLC_RxErrorCode_bad_start_char = 1,
    T_UART_DLC_RxErrorCode_crc_fail = 2,
    T_UART_DLC_RxErrorCode_frame_timeout = 3,
    T_UART_DLC_RxErrorCode_bad_request_type = 4
} T_UART_DLC_RxErrorCode;

// please use the following macros to avoid breaking code.
#define T_UART_DLC_RxErrorCode_no_error T_UART_DLC_RxErrorCode_no_error
#define T_UART_DLC_RxErrorCode_bad_start_char T_UART_DLC_RxErrorCode_bad_start_char
#define T_UART_DLC_RxErrorCode_crc_fail T_UART_DLC_RxErrorCode_crc_fail
#define T_UART_DLC_RxErrorCode_frame_timeout T_UART_DLC_RxErrorCode_frame_timeout
#define T_UART_DLC_RxErrorCode_bad_request_type T_UART_DLC_RxErrorCode_bad_request_type

flag T_UART_DLC_RxErrorCode_Equal(const T_UART_DLC_RxErrorCode* pVal1, const T_UART_DLC_RxErrorCode* pVal2);

#define ERR_T_UART_DLC_RXERRORCODE		286  /*no-error | bad-start-char | crc-fail | frame-timeout | bad-request-type*/
flag T_UART_DLC_RxErrorCode_IsConstraintValid(const T_UART_DLC_RxErrorCode* pVal, int* pErrCode);

void T_UART_DLC_RxErrorCode_Initialize(T_UART_DLC_RxErrorCode* pVal);

#define ERR_UPER_ENCODE_T_UART_DLC_RXERRORCODE		287  /**/
#define T_UART_DLC_RxErrorCode_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_UART_DLC_RxErrorCode_REQUIRED_BITS_FOR_ENCODING        3

flag T_UART_DLC_RxErrorCode_Encode(const T_UART_DLC_RxErrorCode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UART_DLC_RXERRORCODE		288  /**/
flag T_UART_DLC_RxErrorCode_Decode(T_UART_DLC_RxErrorCode* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UART_DLC_RXERRORCODE		289  /**/
#define T_UART_DLC_RxErrorCode_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_UART_DLC_RxErrorCode_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag T_UART_DLC_RxErrorCode_ACN_Encode(const T_UART_DLC_RxErrorCode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UART_DLC_RXERRORCODE		290  /**/
flag T_UART_DLC_RxErrorCode_ACN_Decode(T_UART_DLC_RxErrorCode* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint T_Int32;


flag T_Int32_Equal(const T_Int32* pVal1, const T_Int32* pVal2);

#define ERR_T_INT32		306  /*(-2147483648 .. 2147483647)*/
flag T_Int32_IsConstraintValid(const T_Int32* pVal, int* pErrCode);

void T_Int32_Initialize(T_Int32* pVal);

#define ERR_UPER_ENCODE_T_INT32		307  /**/
#define T_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define T_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag T_Int32_Encode(const T_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT32		308  /**/
flag T_Int32_Decode(T_Int32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT32		309  /**/
#define T_Int32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define T_Int32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag T_Int32_ACN_Encode(const T_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT32		310  /**/
flag T_Int32_ACN_Decode(T_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint T_UInt32;


flag T_UInt32_Equal(const T_UInt32* pVal1, const T_UInt32* pVal2);

#define ERR_T_UINT32		311  /*(0 .. 4294967295)*/
flag T_UInt32_IsConstraintValid(const T_UInt32* pVal, int* pErrCode);

void T_UInt32_Initialize(T_UInt32* pVal);

#define ERR_UPER_ENCODE_T_UINT32		312  /**/
#define T_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define T_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag T_UInt32_Encode(const T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT32		313  /**/
flag T_UInt32_Decode(T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT32		314  /**/
#define T_UInt32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define T_UInt32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag T_UInt32_ACN_Encode(const T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT32		315  /**/
flag T_UInt32_ACN_Decode(T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint T_Int8;


flag T_Int8_Equal(const T_Int8* pVal1, const T_Int8* pVal2);

#define ERR_T_INT8		316  /*(-128 .. 127)*/
flag T_Int8_IsConstraintValid(const T_Int8* pVal, int* pErrCode);

void T_Int8_Initialize(T_Int8* pVal);

#define ERR_UPER_ENCODE_T_INT8		317  /**/
#define T_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag T_Int8_Encode(const T_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT8		318  /**/
flag T_Int8_Decode(T_Int8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT8		319  /**/
#define T_Int8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_Int8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag T_Int8_ACN_Encode(const T_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT8		320  /**/
flag T_Int8_ACN_Decode(T_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint T_UInt8;


flag T_UInt8_Equal(const T_UInt8* pVal1, const T_UInt8* pVal2);

#define ERR_T_UINT8		321  /*(0 .. 255)*/
flag T_UInt8_IsConstraintValid(const T_UInt8* pVal, int* pErrCode);

void T_UInt8_Initialize(T_UInt8* pVal);

#define ERR_UPER_ENCODE_T_UINT8		322  /**/
#define T_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag T_UInt8_Encode(const T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT8		323  /**/
flag T_UInt8_Decode(T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT8		324  /**/
#define T_UInt8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_UInt8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag T_UInt8_ACN_Encode(const T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT8		325  /**/
flag T_UInt8_ACN_Decode(T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag T_Boolean;


flag T_Boolean_Equal(const T_Boolean* pVal1, const T_Boolean* pVal2);

#define ERR_T_BOOLEAN		326  /**/
flag T_Boolean_IsConstraintValid(const T_Boolean* pVal, int* pErrCode);

void T_Boolean_Initialize(T_Boolean* pVal);

#define ERR_UPER_ENCODE_T_BOOLEAN		327  /**/
#define T_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_Boolean_REQUIRED_BITS_FOR_ENCODING        1

flag T_Boolean_Encode(const T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_BOOLEAN		328  /**/
flag T_Boolean_Decode(T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_BOOLEAN		329  /**/
#define T_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_Boolean_ACN_Encode(const T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_BOOLEAN		330  /**/
flag T_Boolean_ACN_Decode(T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- T_Null_Record --------------------------------------------*/
typedef struct {

} T_Null_Record;

flag T_Null_Record_Equal(const T_Null_Record* pVal1, const T_Null_Record* pVal2);

#define ERR_T_NULL_RECORD		331  /**/
flag T_Null_Record_IsConstraintValid(const T_Null_Record* pVal, int* pErrCode);

void T_Null_Record_Initialize(T_Null_Record* pVal);

#define T_Null_Record_REQUIRED_BYTES_FOR_ENCODING       0 
#define T_Null_Record_REQUIRED_BITS_FOR_ENCODING        0

flag T_Null_Record_Encode(const T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag T_Null_Record_Decode(T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);

#define T_Null_Record_REQUIRED_BYTES_FOR_ACN_ENCODING       0 
#define T_Null_Record_REQUIRED_BITS_FOR_ACN_ENCODING        0

flag T_Null_Record_ACN_Encode(const T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag T_Null_Record_ACN_Decode(T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint MyInteger;


flag MyInteger_Equal(const MyInteger* pVal1, const MyInteger* pVal2);

#define ERR_MYINTEGER		336  /*(0 .. 10000)*/
flag MyInteger_IsConstraintValid(const MyInteger* pVal, int* pErrCode);

void MyInteger_Initialize(MyInteger* pVal);

#define ERR_UPER_ENCODE_MYINTEGER		337  /**/
#define MyInteger_REQUIRED_BYTES_FOR_ENCODING       2 
#define MyInteger_REQUIRED_BITS_FOR_ENCODING        14

flag MyInteger_Encode(const MyInteger* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYINTEGER		338  /**/
flag MyInteger_Decode(MyInteger* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MYINTEGER		339  /**/
#define MyInteger_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define MyInteger_REQUIRED_BITS_FOR_ACN_ENCODING        14

flag MyInteger_ACN_Encode(const MyInteger* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MYINTEGER		340  /**/
flag MyInteger_ACN_Decode(MyInteger* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    PID_bcapp = 0,
    PID_bcdlct = 1,
    PID_channeleffects = 2,
    PID_erroredchannel = 3,
    PID_rtapp = 4,
    PID_rtdlcr = 5,
    PID_env = 6
} PID;

// please use the following macros to avoid breaking code.
#define PID_bcapp PID_bcapp
#define PID_bcdlct PID_bcdlct
#define PID_channeleffects PID_channeleffects
#define PID_erroredchannel PID_erroredchannel
#define PID_rtapp PID_rtapp
#define PID_rtdlcr PID_rtdlcr
#define PID_env PID_env

flag PID_Equal(const PID* pVal1, const PID* pVal2);

#define ERR_PID		341  /*bcapp | bcdlct | channeleffects | erroredchannel | rtapp | rtdlcr | env*/
flag PID_IsConstraintValid(const PID* pVal, int* pErrCode);

void PID_Initialize(PID* pVal);

#define ERR_UPER_ENCODE_PID		342  /**/
#define PID_REQUIRED_BYTES_FOR_ENCODING       1 
#define PID_REQUIRED_BITS_FOR_ENCODING        3

flag PID_Encode(const PID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PID		343  /**/
flag PID_Decode(PID* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PID		344  /**/
#define PID_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define PID_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag PID_ACN_Encode(const PID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PID		345  /**/
flag PID_ACN_Decode(PID* pVal, BitStream* pBitStrm, int* pErrCode);

extern const UINT8 c_UART_DLC_SDU_SIZE;
extern const UINT8 c_UART_DLC_PDU_SIZE;
extern const UINT8 c_UART_DLC_SYNC_VALUE;
extern const T_RMAPCRCTable c_RMAPCRCTable; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
