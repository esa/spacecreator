/* CIF Process (0, 0), (800, 100) */
process Factorial;
    /* CIF Text (0, 150), (400, 500) */
    dcl X Number;
    dcl Tmp Number;
    dcl Iterator Number;
    dcl Io_asyncfactorial_calculatefactorial_pi CalculateFactorial_Type;
    dcl Io_asyncfactorial_calculatefactorial_ri CalculateFactorial_Type1;
    /* CIF ENDTEXT */
    /* CIF Procedure (0, 900), (800, 50) */
    procedure CalculateFactorial;
        /* CIF Text (0, 0), (400, 500) */
        fpar
            in X Number;
        /* CIF ENDTEXT */
        /* CIF Start (0, 750), (200, 75) */
        START;
            /* CIF Task (0, 937), (100, 50) */
            task Tmp := 1;
            /* CIF Task (0, 1012), (100, 50) */
            task Iterator := 1;
            /* CIF Label (0, 1087), (100, 50) */
            loop_start_1:
            /* CIF Decision (0, 1087), (400, 50) */
            decision Iterator <= X;
                /* CIF Answer (0, 1162), (400, 50) */
                (False):
                    /* CIF Join (0, 1237), (100, 50) */
                    join loop_end_2;
                /* CIF Answer (600, 1162), (400, 50) */
                (True):
                    /* CIF Task (600, 1237), (100, 50) */
                    task Tmp := Tmp * Iterator;
                    /* CIF Task (600, 1312), (100, 50) */
                    task Iterator := Iterator + 1;
                    /* CIF Join (600, 1387), (100, 50) */
                    join loop_start_1;
            enddecision;
            /* CIF Label (1200, 1237), (100, 50) */
            loop_end_2:
            /* CIF Task (1200, 1312), (100, 50) */
            task Io_asyncfactorial_calculatefactorial_ri.Result := Tmp;
            /* CIF Output (1200, 1387), (200, 50) */
            output AsyncFactorial_CalculateFactorial_Ri(Io_asyncfactorial_calculatefactorial_ri);
        return ;
    endprocedure;
    /* CIF Start (0, 975), (200, 75) */
    START;
        /* CIF NextState (0, 1162), (200, 50) */
        NEXTSTATE Off;
    /* CIF State (0, 1237), (200, 50) */
    state Idle;
        /* CIF Input (0, 1237), (200, 50) */
        input AsyncFactorial_CalculateFactorial_Pi(Io_asyncfactorial_calculatefactorial_pi);
            /* CIF Task (0, 1312), (100, 50) */
            task X := Io_asyncfactorial_calculatefactorial_pi.X;
            /* CIF ProcedureCall (0, 1387), (100, 50) */
            call CalculateFactorial(X);
            /* CIF NextState (0, 1462), (200, 50) */
            NEXTSTATE Idle;
    endstate;
    /* CIF State (1500, 1237), (200, 50) */
    state Off;
        /* CIF Input (1500, 1237), (200, 50) */
        input AsyncFactorial_Init_Pi;
            /* CIF NextState (1500, 1312), (200, 50) */
            NEXTSTATE Idle;
    endstate;
endprocess Factorial;
