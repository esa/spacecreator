/* CIF Process (0, 0), (800, 100) */
process Client;
    /* CIF Text (0, 150), (400, 500) */
    dcl Resultvar Number;
    dcl sedsFailureReportingVariable CoolBool;
    dcl sedsFailureReportingReturnVariable CoolBool;
    dcl Io_calculatorinterface_dividecommand_pi CalculatorType_DivideCommand_TypeNotify;
    dcl Io_clk_tick_ri ClkType_Tick_TypeNotify;
    dcl Io_calculatorinterface_dividecommand_ri CalculatorType_DivideCommand_Type;
    /* CIF ENDTEXT */
    /* CIF Procedure (0, 900), (800, 50) */
    procedure PleaseDivide;
        /* CIF Text (0, 0), (400, 500) */
        fpar
            in Xvaluearg Number,
            in Yvaluearg Number;
        /* CIF ENDTEXT */
        /* CIF Start (0, 750), (200, 75) */
        START;
            /* CIF Task (0, 937), (100, 50) */
            task Io_calculatorinterface_dividecommand_ri.Xvalue := Xvaluearg;
            /* CIF Task (0, 1012), (100, 50) */
            task Io_calculatorinterface_dividecommand_ri.Yvalue := Yvaluearg;
            /* CIF Output (0, 1087), (200, 50) */
            output CalculatorInterface_DivideCommand_Ri(Io_calculatorinterface_dividecommand_ri);
    return;
    endprocedure;
    /* CIF Start (0, 975), (200, 75) */
    START;
        /* CIF NextState (0, 1162), (200, 50) */
        NEXTSTATE s1;
    /* CIF State (0, 1237), (200, 50) */
    state s1;
        /* CIF Input (0, 1237), (200, 50) */
        input Clk_Tick_Pi;
            /* CIF ProcedureCall (0, 1312), (100, 50) */
            call PleaseDivide(42, 2);
            /* CIF NextState (0, 1387), (200, 50) */
            NEXTSTATE s2;
    endstate;
    /* CIF State (600, 1237), (200, 50) */
    state s2;
        /* CIF Input (600, 1237), (200, 50) */
        input CalculatorInterface_DivideCommand_Pi(Io_calculatorinterface_dividecommand_pi);
            /* CIF Decision (600, 1237), (400, 50) */
            decision Io_calculatorinterface_dividecommand_pi.sedsFailure;
                /* CIF Answer (600, 1312), (400, 50) */
                (false):
                    /* CIF Task (600, 1387), (100, 50) */
                    task Resultvar := Io_calculatorinterface_dividecommand_pi.Result;
                    /* CIF NextState (600, 1462), (200, 50) */
                    NEXTSTATE s3;
                /* CIF Answer (1200, 1312), (400, 50) */
                (true):
                    /* CIF Task (1200, 1387), (100, 50) */
                    task Resultvar := Io_calculatorinterface_dividecommand_pi.Result;
                    /* CIF NextState (1200, 1462), (200, 50) */
                    NEXTSTATE s1;
            enddecision;
    endstate;
    /* CIF State (2100, 1237), (200, 50) */
    state s3;
        /* CIF Input (2100, 1237), (200, 50) */
        input Clk_Tick_Pi;
            /* CIF ProcedureCall (2100, 1312), (100, 50) */
            call PleaseDivide(314, 0);
            /* CIF NextState (2100, 1387), (200, 50) */
            NEXTSTATE s4;
    endstate;
    /* CIF State (2700, 1237), (200, 50) */
    state s4;
        /* CIF Input (2700, 1237), (200, 50) */
        input CalculatorInterface_DivideCommand_Pi(Io_calculatorinterface_dividecommand_pi);
            /* CIF Decision (2700, 1237), (400, 50) */
            decision Io_calculatorinterface_dividecommand_pi.sedsFailure;
                /* CIF Answer (2700, 1312), (400, 50) */
                (false):
                    /* CIF Task (2700, 1387), (100, 50) */
                    task Resultvar := Io_calculatorinterface_dividecommand_pi.Result;
                    /* CIF NextState (2700, 1462), (200, 50) */
                    NEXTSTATE s1;
                /* CIF Answer (3300, 1312), (400, 50) */
                (true):
                    /* CIF Task (3300, 1387), (100, 50) */
                    task Resultvar := Io_calculatorinterface_dividecommand_pi.Result;
                    /* CIF NextState (3300, 1462), (200, 50) */
                    NEXTSTATE s5;
            enddecision;
    endstate;
    /* CIF State (4200, 1237), (200, 50) */
    state s5;
    endstate;
endprocess Client;
