/* CIF Process (0, 0), (800, 100) */
process Calculator;
    /* CIF Text (0, 150), (400, 500) */
    dcl Xvaluevar Number;
    dcl Yvaluevar Number;
    dcl Resultvar Number;
    dcl sedsFailureReportingVariable CoolBool;
    dcl sedsFailureReportingReturnVariable CoolBool;
    dcl Io_calculatorinterface_dividecommand_pi CalculatorType_DivideCommand_Type;
    dcl Io_calculatorinterface_dividecommand_ri CalculatorType_DivideCommand_TypeNotify;
    /* CIF ENDTEXT */
    /* CIF Procedure (0, 900), (800, 50) */
    procedure DoDivide;
        /* CIF Text (0, 0), (400, 500) */
        fpar
            in Xvaluearg Number,
            in Yvaluearg Number;
        /* CIF ENDTEXT */
        /* CIF Start (0, 750), (200, 75) */
        START;
            /* CIF Decision (0, 862), (400, 50) */
            decision Yvaluearg = 0;
                /* CIF Answer (0, 937), (400, 50) */
                (True):
                    /* CIF Task (0, 1012), (100, 50) */
                    task Io_calculatorinterface_dividecommand_ri.sedsFailure := true;
                    /* CIF Output (0, 1087), (200, 50) */
                    output CalculatorInterface_DivideCommand_Ri(Io_calculatorinterface_dividecommand_ri);
                    /* CIF Join (0, 1162), (100, 50) */
                    join condition_1;
                /* CIF Answer (600, 937), (400, 50) */
                (False):
                    /* CIF Task (600, 1012), (100, 50) */
                    task Resultvar := Xvaluearg / Yvaluearg;
                    /* CIF Task (600, 1087), (100, 50) */
                    task Io_calculatorinterface_dividecommand_ri.Result := Resultvar;
                    /* CIF Task (600, 1162), (100, 50) */
                    task Io_calculatorinterface_dividecommand_ri.sedsFailure := false;
                    /* CIF Output (600, 1237), (200, 50) */
                    output CalculatorInterface_DivideCommand_Ri(Io_calculatorinterface_dividecommand_ri);
                    /* CIF Join (600, 1312), (100, 50) */
                    join condition_1;
            enddecision;
            /* CIF Label (1200, 1012), (100, 50) */
            condition_1:
    return;
    endprocedure;
    /* CIF Start (0, 975), (200, 75) */
    START;
        /* CIF NextState (0, 1162), (200, 50) */
        NEXTSTATE s1;
    /* CIF State (0, 1237), (200, 50) */
    state s1;
        /* CIF Input (0, 1237), (200, 50) */
        input CalculatorInterface_DivideCommand_Pi(Io_calculatorinterface_dividecommand_pi);
            /* CIF Task (0, 1312), (100, 50) */
            task Xvaluevar := Io_calculatorinterface_dividecommand_pi.Xvalue;
            /* CIF Task (0, 1387), (100, 50) */
            task Yvaluevar := Io_calculatorinterface_dividecommand_pi.Yvalue;
            /* CIF ProcedureCall (0, 1462), (100, 50) */
            call DoDivide(Xvaluevar, Yvaluevar);
            /* CIF NextState (0, 1537), (200, 50) */
            NEXTSTATE s1;
    endstate;
endprocess Calculator;
